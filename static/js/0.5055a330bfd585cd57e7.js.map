{"version":3,"sources":["webpack:///./node_modules/emmet/emmet.js"],"names":["__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_","root","this","previousUnderscore","breaker","ArrayProto","Array","prototype","ObjProto","Object","FuncProto","Function","slice","unshift","toString","hasOwnProperty","nativeForEach","forEach","nativeMap","map","nativeReduce","reduce","nativeReduceRight","reduceRight","nativeFilter","filter","nativeEvery","every","nativeSome","some","nativeIndexOf","indexOf","nativeLastIndexOf","lastIndexOf","nativeIsArray","isArray","nativeKeys","keys","nativeBind","bind","obj","wrapper","module","exports","VERSION","each","iterator","context","length","i","l","call","key","has","collect","results","value","index","list","foldl","inject","memo","initial","arguments","TypeError","foldr","reversed","toArray","reverse","find","detect","result","any","select","reject","all","identity","include","contains","target","found","invoke","method","args","isFunction","apply","pluck","max","Math","isEmpty","Infinity","computed","min","shuffle","rand","shuffled","floor","random","sortBy","val","criteria","sort","left","right","a","b","groupBy","push","sortedIndex","array","low","high","mid","isArguments","values","size","first","head","take","n","guard","last","rest","tail","compact","flatten","shallow","concat","without","difference","uniq","unique","isSorted","union","intersection","intersect","item","other","zip","range","start","stop","step","len","ceil","idx","ctor","func","bound","self","bindAll","funcs","functions","f","memoize","hasher","delay","wait","setTimeout","defer","throttle","timeout","throttling","more","whenDone","debounce","immediate","clearTimeout","once","ran","wrap","compose","after","times","methods","names","extend","source","prop","pick","defaults","clone","isObject","tap","interceptor","isEqual","eq","stack","_chain","_wrapped","className","String","global","multiline","ignoreCase","constructor","pop","isString","isElement","nodeType","isNumber","isFinite","isNaN","isBoolean","isDate","isRegExp","isNull","isUndefined","noConflict","escape","string","replace","object","property","mixin","name","addToWrapper","idCounter","uniqueId","prefix","id","templateSettings","evaluate","interpolate","noMatch","escapes","\\","'","r","t","u2028","u2029","p","escaper","unescaper","unescape","code","match","template","text","data","settings","variable","render","chain","wrapped","emmet","e","modules","moduleLoader","define","factory","exec","require","fn","protoProps","classProps","child","parent","staticProps","__super__","inherits","expandAbbreviation","abbr","syntax","profile","contextNode","filters","parser","get","resetTabstopIndex","extractFromAbbreviation","outputTree","parse","filtersList","composeList","defaultSyntax","defaultProfile","log","console","setModuleLoader","undefined","reValidName","reWord","pairs","[","(","{","spliceFn","splice","preprocessors","postprocessors","outputProcessors","AbbreviationNode","children","_attributes","abbreviation","counter","_name","_text","repeatCount","hasImplicitRepeat","_data","end","content","padding","stripped","str","substring","consumeQuotedValue","stream","quote","ch","next","extractAttributes","attrSet","attrs","trim","create","eatSpace","eol","pos","eatWhile","attrName","current","attrValue","peek","optimizeAttributes","attr","lookup","la","toLowerCase","unroll","node","j","maxCount","isRepeating","updateProperty","addChild","squash","isGroup","remove","isAllowedChar","charCode","charCodeAt","position","ix","items","findAll","elemName","is","insertChildContent","res","matchedResource","attributeList","attributes","attribute","_setRepeat","count","parseInt","setAbbreviation","that","abbrText","skipToPair","element","extractText","abbrAttrs","attrMap","#",".","nameEnd","parseAttributes","test","utils","innerContent","join","keepVariable","padString","hasEmptyChildren","hasImplicitName","isTextNode","deepestChild","replaceCounter","options","tree","parseAbbreviation","multiplier","loopProtector","inner","c","backUp","isMarker","attrLookup","addPreprocessor","removeFilter","preprocessor","addPostprocessor","removePostprocessor","addOutputProcessor","removeOutputProcessor","matchResources","resources","elements","getMatchedResource","subtree","repeatedChildren","outputPlaceholder","locateOutputPlaceholder","replaceOutputPlaceholders","ranges","replaceSubstring","hasOutputPlaceholder","insertPastedContent","overwrite","nodesWithPlaceholders","deepest","pastedContent","lines","splitByLines","pastedContentObj","resolveNodeNames","tagName","resolve","walker","isOp","isNameChar","isDigit","tokens","isset","v","getConf","char","chnum","line","linenum","tokener","type","conf","w","charstart","charend","linestart","lineend","error","m","config","message","identifier","pre","token","nextChar","tokenize","white","cnext","pk","comment","q","depth","brace","nondigit","point","num","op","total_lines","init","me","split","nextLine","charAt","opsa","opsmatcha","ops","opsmatch","matchattr","lex","getNewline","toSource","toks","src","Kludges","autoSelfClosers","implicitlyClosed","contextGrabbers","doNotIndent","allowUnquoted","allowMissing","inText","state","eat","inBlock","doctype","inTag","style","terminator","setStyle","curState","pass","cc","cont","popContext","prev","startOfLine","maybePopContext","noIndent","indent","indented","pushContext","err","callee","endclosetag","nextTagName","parentTagName","attvalue","attvaluemaybe","sol","offset","score","fuzziness","start_of_string_bonus","abbreviation_score","final_score","character_score","index_in_string","index_c_lowercase","index_c_uppercase","min_index","total_character_score","abbreviation_length","string_length","fuzzies","toUpperCase","caretPlaceholder","StringBuilder","append","valueOf","reTag","endsWithTag","isNumeric","nl","getVariable","setNewline","setVariable","removeEmpty","normalizeNewline","repeatString","howMany","getStringsPads","strings","lengths","s","pad","padStr","zeroPadString","il","unindentString","search","substr","replaceUnescapedSymbol","symbol","sl","matchCount","curSl","newValue","replaceData","replaceVariables","vars","resolver","p1","processText","total","matchNum","base","decrement","matchesTag","escapeText","unescapeText","getCaretPlaceholder","setCaretPlaceholder","getLinePadding","getLinePaddingFromPosition","lineRange","findNewlineBounds","escapeForRegexp","specials","RegExp","prettifyNumber","fraction","toFixed","stringBuilder","narrowToNonSpace","reSpace","from","deepMerge","copy","copyIsArray","cmp","Range","abs","equal","shift","delta","overlap","inside","loc","create2","HandlerList","_list","add","order","listFn","skipValue","h","TokenIterator","_position","reset","hasNext","_i","_il","itemNext","itemPrev","nextUntil","callback","StringStream","skipToEnd","skipTo","open","close","braceCount","pattern","consume","caseInsensitive","cased","cache","systemSettings","userSettings","resolvers","parseItem","normalizeName","setVocabulary","getVocabulary","findSnippet","getSection","voc","variables","hasSyntax","addResolver","removeResolver","subsections","findItem","topSection","subsection","matchedItem","sectionName","fuzzyFindSnippet","minScore","payload","getAllSnippets","sc","scores","nk","parsedValue","cacheKey","sectionKey","section","stackItem","k","zc","actions","humanizeActionName","label","run","action","getAll","getList","getMenu","skipActions","hidden","actionName","ctx","menuName","submenu","parts","getActionNameForMenuTitle","title","menu","profiles","tag_case","attr_case","attr_quotes","tag_nl","tag_nl_leaf","place_cursor","inline_break","self_closing_tag","extraFilters","OutputProfile","stringCase","caseValue","createProfile","createDefaultProfiles","attributeName","attributeQuote","selfClosing","param","cursor","plain","isInsideTag","html","caretPos","outputInfo","editor","getProfileName","getSyntax","getContent","unindent","getCurrentLinePadding","getCurrentLine","mimeTypes","gif","png","jpg","jpeg","svg","htm","extractAbbreviation","curOffset","startIndex","groupCount","textCount","getImageSize","nextByte","width","height","marker","captureContext","xml","xsl","tag","getCaretPos","startTag","tagTree","findExpressionBounds","exprStart","exprEnd","compoundUpdate","sel","getSelectionRange","replaceContent","createSelection","caret","detectSyntax","hint","isStyle","isInlineCSS","detectProfile","isXHTML","innerRange","parseFromPosition","itemFromPosition","valueRange","isSnippet","isUnary","is_empty","isInline","isInlineLevel","isBlock","hasTagsInContent","hasBlockChildren","childContent","appendIfNoChild","childVariableReplaced","output","chars","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","cdp1","cdp2","cdp3","b64","decode","o1","o2","o3","h3","h4","bits","ac","tmpArr","fromCharCode","reOpenTag","reCloseTag","createMatcher","matches","selfClose","openTag","closeTag","findClosingPair","matcher","jl","outerRange","_c","outerContent","startPlaceholderNum","tabstopIndex","defaultOptions","replaceCarets","tabstop","maxNum","tabstops","tsOptions","group","placeholder","variablesResolver","extract","placeholders","carets","marks","ret","buf","lastIx","tabStops","mark","ph","upgrade","placeholderMemo","varName","varValue","preferences","_dbgDefaults","_dbgPreferences","description","prefs","set","getArray","getDict","load","json","exportModified","_startTest","_stopTest","registeredFilters","additionalFilters","factories","reAttrs","elem","commonFactory","elementName","core","EditContainer","_children","_positions","initialize","EditElement","nameToken","valueToken","_value","_updateSource","update","indexes","fullRange","nameRange","isAbsolute","_pos","namePosition","valuePosition","createToken","styleBefore","styleSeparator","WHITESPACE_REMOVE_FROM_START","WHITESPACE_REMOVE_FROM_END","trimWhitespaceTokens","mask","whitespace","findValueRange","it","skipTokens","tok","findParts","sep","isValidIdentifier","CSSEditContainer","propertyRange","editTree","selectorRange","findSelectorRange","contentStart","CSSEditElement","_saveStyle","styles","donor","rule","_end","valueParts","isBackward","bounds","extractRule","bracePos","selector","baseName","styleQuote","XMLEditContainer","attrToken","XMLEditElement","extractTag","maxLen","handlers","info","getSelection","selRange","replaceRange","findAbbreviation","addHandler","removeHandler","curLine","getCurrentLineRange","editorUtils","prompt","newContent","parsedTree","toggleCSSComment","absPos","relPos","reSafeChar","cssItemFromPosition","genericCommentToggle","commentStart","commentEnd","commentRange","startToken","endToken","hasMatch","contentLen","searchComment","setCaretPos","toggleHTMLComment","findNewEditPoint","inc","curPoint","nextPoint","reEmptyLine","getLine","curChar","prevChar","curPos","newPoint","extractFn","rangeFn","itemRange","rng","contentLength","prevRange","searchPos","loop","findNextHTMLItem","isFirst","getOpeningTagFromPosition","findOpeningTagFromPosition","getRangeForHTMLItem","makePossibleRangesHTML","attrValueRange","attrStart","isQuote","classNameRanges","curRange","matchedRanges","makePossibleRangesCSS","stringStream","cssEditTree","fnBody","part","matchedRangeForCSSProperty","possibleRanges","searchFn","nearestItemFn","getRangeForNextItemInCSS","getRangeForPrevItemInCSS","findNextCSSItem","findPrevCSSItem","findPrevHTMLItem","lastMatch","matchPair","direction","narrowed","tagContentRange","startLineBounds","startLinePad","tagContent","profileName","slash","joinTag","splitTag","reflectValue","receiver","curName","curValue","refName","refValue","parseFloat","getReflectedValue","cssRule","oldRule","caretDelta","doCSSReflection","reName","vendorPrefix","actionUtils","expr","hasSign","hasDecimal","strNum","minus","$1","intLength","incrementNumber","hasCloseBrace","insValue","curPadding","nextPadding","selection","pair","textLen","startsWith","filePath","file","absPath","createPath","getFilePath","save","decodeFromBase64","imgPath","editorFile","realImgPath","locateFile","read","getExt","encodeToBase64","getImageSizeForSource","fileContent","au","compoundData","updateImageSizeCSS","xmlElem","updateImageSizeHTML","prefixObj","obsolete","transformName","properties","supports","vendorPrefixes","descTemplate","descAddonTemplate","isSingleProperty","snippet","normalizeValue","hex","repeat","color","normalizeHexColor","getKeyword","aliases","isValidKeyword","keyword","hasPrefix","addPrefix","getSyntaxPreference","transformSnippet","isImportant","formatProperty","webkit","moz","ms","o","vendor","cssSyntaxes","expandToSnippet","ea","replaceFrom","replaceTo","supportsPrefix","prefixed","listPrefixes","getPrefix","removePrefix","extractPrefixes","prefixes","findValuesInAbbreviation","keywords","lastPart","parseValues","extractValues","abbrValues","unitlessProps","unit","expand","autoInsertPrefixes","prefixData","valuesData","abbrData","snippetObj","splitSnippet","propName","noAutofill","findPrefixes","pads","defaultLinearDirections","reDeg","reKeyword","normalizeSpace","parseColorStop","colorStop","oldWebkitDirection","angle","textualDirection","getPrefixedNames","getPropertiesForGradient","gradient","propertyName","props","css","colorStops","oldWebkitLinearGradient","findGradient","cssProp","matchedPart","findGradientFromPosition","g","ruleStart","ruleEnd","insertPos","newCss","resolvedName","resolvePropertyName","alignVendor","before","propsToInsert","valuePads","namePads","pasteGradient","expandGradientOutsideValue","definition","parseLinearGradient","cs","cs2","fillImpliedPositions","generators","addGenerator","regexp","elementTypes","empty","blockLevel","inlineLevel","elementMap","ul","ol","table","tr","tbody","thead","tfoot","colgroup","optgroup","audio","video","getMapping","isTypeOf","isBlockLevel","isEmptyElement","addMapping","removeMapping","addElementToCollection","collection","col","getCollection","removeElementFromCollection","shouldRunHtmlFilter","getSeparators","modifier","bemParse","__bem","block","classNames","shortSymbol","re","normalizeClassName","reBlockName","transformClassName","separators","blockElem","elemModifiers","blockModifiers","processClassName","entityType","reSep","cleanName","process","abbrUtils","templateBefore","templateAfter","trigger","nodeBefore","nodeAfter","addComments","charMap","<",">","&","escapeChars","isVeryFirstChild","shouldAddLineBreak","shouldFormatInline","nodeCount","processTag","level","forceNl","shouldBreakChild","hasBlockSibling","shouldBreakInsideInline","isRoot","processSnippet","makeAttributesString","otherAttrs","attrQuote","rePad","reNl","tags","xsl:variable","xsl:with-param","langs","en","common","words","ru","randint","to","round","sample","arr","iterations","randIx","sentence","insertCommas","totalCommas","wordCound","lang","wordCount","startWithCommon","totalWords","paragraph","addLang","userData","locale","charset","indentation","newline","snippets","@i","@import","@m","@media","@f","@f+","@kf","anim","anim-","animdel","animdir","animdir:n","animdir:r","animdir:a","animdir:ar","animdur","animfm","animfm:f","animfm:b","animfm:bt","animfm:bh","animic","animic:i","animn","animps","animps:p","animps:r","animtf","animtf:e","animtf:ei","animtf:eo","animtf:eio","animtf:l","animtf:cb","ap","!","pos:s","pos:a","pos:r","pos:f","t:a","r:a","b:a","l:a","z","z:a","fl","fl:n","fl:l","fl:r","cl","cl:n","cl:l","cl:r","cl:b","colm","colmc","colmf","colmg","colmr","colmrc","colmrs","colmrw","colms","colmw","d","d:n","d:b","d:i","d:ib","d:ib+","d:li","d:ri","d:cp","d:tb","d:itb","d:tbcp","d:tbcl","d:tbclg","d:tbhg","d:tbfg","d:tbr","d:tbrg","d:tbc","d:rb","d:rbb","d:rbbg","d:rbt","d:rbtg","v:v","v:h","v:c","ov","ov:v","ov:h","ov:s","ov:a","ovx","ovx:v","ovx:h","ovx:s","ovx:a","ovy","ovy:v","ovy:h","ovy:s","ovy:a","ovs","ovs:a","ovs:s","ovs:p","ovs:m","ovs:mq","zoo","zm","cp","cp:a","cp:r","bxz","bxz:cb","bxz:bb","bxsh","bxsh:r","bxsh:ra","bxsh:n","m:a","mt","mt:a","mr","mr:a","mb","mb:a","ml","ml:a","pt","pr","pb","pl","w:a","h:a","maw","maw:n","mah","mah:n","miw","mih","mar","mir","ori","ori:l","ori:p","ol:n","olo","olw","olw:tn","olw:m","olw:tc","ols","ols:n","ols:dt","ols:ds","ols:s","ols:db","ols:g","ols:r","ols:i","ols:o","olc","olc:i","bd","bd+","bd:n","bdbk","bdbk:c","bdcl","bdcl:c","bdcl:s","bdc","bdc:t","bdi","bdi:n","bdti","bdti:n","bdri","bdri:n","bdbi","bdbi:n","bdli","bdli:n","bdci","bdci:n","bdci:c","bdtli","bdtli:n","bdtli:c","bdtri","bdtri:n","bdtri:c","bdbri","bdbri:n","bdbri:c","bdbli","bdbli:n","bdbli:c","bdf","bdf:c","bdf:r","bdf:sc","bdf:st","bdf:ow","bdf:of","bdf:sp","bdlen","bdlen:a","bdsp","bds","bds:n","bds:h","bds:dt","bds:ds","bds:s","bds:db","bds:dtds","bds:dtdtds","bds:w","bds:g","bds:r","bds:i","bds:o","bdw","bdtw","bdrw","bdbw","bdlw","bdt","bt","bdt+","bdt:n","bdts","bdts:n","bdtc","bdtc:t","bdr","br","bdr+","bdr:n","bdrst","bdrst:n","bdrc","bdrc:t","bdb","bb","bdb+","bdb:n","bdbs","bdbs:n","bdbc","bdbc:t","bdl","bl","bdl+","bdl:n","bdls","bdls:n","bdlc","bdlc:t","bdrs","bdtrrs","bdtlrs","bdbrrs","bdblrs","bg","bg+","bg:n","bg:ie","bgc","bgc:t","bgi","bgi:n","bgr","bgr:n","bgr:x","bgr:y","bgr:sp","bgr:rd","bga","bga:f","bga:s","bgp","bgpx","bgpy","bgbk","bgbk:bb","bgbk:eb","bgbk:c","bgcp","bgcp:bb","bgcp:pb","bgcp:cb","bgcp:nc","bgo","bgo:pb","bgo:bb","bgo:cb","bgsz","bgsz:a","bgsz:ct","bgsz:cv","c:r","c:ra","cm","cnt","cnt:n","cnt:oq","cnt:noq","cnt:cq","cnt:ncq","cnt:a","cnt:c","cnt:cs","tbl","tbl:a","tbl:f","cps","cps:t","cps:b","ec","ec:s","ec:h","lis","lis:n","lisp","lisp:i","lisp:o","list:n","list:d","list:c","list:s","list:dc","list:dclz","list:lr","list:ur","lisi","lisi:n","q:n","q:ru","q:en","ct","ct:n","ct:oq","ct:noq","ct:cq","ct:ncq","ct:a","ct:c","ct:cs","coi","cor","va","va:sup","va:t","va:tt","va:m","va:bl","va:b","va:tb","va:sub","ta","ta:l","ta:c","ta:r","ta:j","ta-lst","tal:a","tal:l","tal:c","tal:r","td","td:n","td:u","td:o","td:l","te","te:n","te:ac","te:dt","te:c","te:ds","te:b","te:a","th","th:a","th:f","th:t","th:m","ti","ti:-","tj","tj:a","tj:iw","tj:ii","tj:ic","tj:d","tj:k","tj:t","tov","tov:e","tov:c","to+","to:n","tr:n","tt","tt:n","tt:c","tt:u","tt:l","tw","tw:n","tw:no","tw:u","tw:s","tsh","tsh:r","tsh:ra","tsh+","tsh:n","trf","trf:skx","trf:sky","trf:sc","trf:scx","trf:scy","trf:r","trf:t","trf:tx","trf:ty","trfo","trfs","trs","trsde","trsdu","trsp","trstf","lh","whs","whs:n","whs:p","whs:nw","whs:pw","whs:pl","whsc","whsc:n","whsc:k","whsc:l","whsc:bs","whsc:ba","wob","wob:n","wob:k","wob:ba","wos","wow","wow:nm","wow:n","wow:u","wow:s","wow:b","wm","wm:lrt","wm:lrb","wm:rlt","wm:rlb","wm:tbr","wm:tbl","wm:btl","wm:btr","lts","lts-n","f+","fw","fw:n","fw:b","fw:br","fw:lr","fs","fs:n","fs:i","fs:o","fv","fv:n","fv:sc","fz","fza","fza:n","ff","ff:s","ff:ss","ff:c","ff:f","ff:m","ff:a","ff:t","ff:v","fef","fef:n","fef:eg","fef:eb","fef:o","fem","femp","femp:b","femp:a","fems","fems:n","fems:ac","fems:dt","fems:c","fems:ds","fsm","fsm:a","fsm:n","fsm:aw","fst","fst:n","fst:uc","fst:ec","fst:c","fst:sc","fst:se","fst:e","fst:ee","fst:ue","op+","op:ie","op:ms","rsz","rsz:n","rsz:b","rsz:h","rsz:v","cur","cur:a","cur:d","cur:c","cur:ha","cur:he","cur:m","cur:p","cur:t","pgbb","pgbb:au","pgbb:al","pgbb:l","pgbb:r","pgbi","pgbi:au","pgbi:av","pgba","pgba:au","pgba:al","pgba:l","pgba:r","orp","us","wid","wfsm","wfsm:a","wfsm:s","wfsm:sa","wfsm:n","!!!","!!!4t","!!!4s","!!!xt","!!!xs","!!!xxs","cc:ie6","cc:ie","cc:noie","abbreviations","a:link","a:mail","acronym","basefont","frame","hr","bdo","bdo:r","bdo:l","link","link:css","link:print","link:favicon","link:touch","link:rss","link:atom","meta","meta:utf","meta:win","meta:vp","meta:compat","script","script:src","img","iframe","embed","area","area:d","area:c","area:r","area:p","form","form:get","form:post","inp","input:hidden","input:h","input:text","input:t","input:search","input:email","input:url","input:password","input:p","input:datetime","input:date","input:datetime-local","input:month","input:week","input:time","input:number","input:color","input:checkbox","input:c","input:radio","input:r","input:range","input:file","input:f","input:submit","input:s","input:image","input:i","input:button","input:b","isindex","input:reset","select:disabled","select:d","option","textarea","marquee","menu:context","menu:c","menu:toolbar","menu:t","html:xml","keygen","command","button:submit","button:s","button:reset","button:r","button:disabled","button:d","fieldset:disabled","fieldset:d","bq","acr","fig","figc","ifr","emb","cap","colg","fst:d","btn","btn:b","btn:r","btn:s","btn:d","optg","opt","tarea","leg","sect","art","hdr","ftr","adr","dlg","prog","fset","fset:d","datag","datal","kg","out","det","cmd","doc","doc4","html:4t","html:4s","html:xt","html:xs","html:xxs","html:5","ol+","ul+","dl+","map+","table+","colgroup+","colg+","tr+","select+","optgroup+","optg+","extends","tm","tmatch","tn","tname","api","imp","xsl:when","wh","ot","if","par","pare","var","vare","wp","co","for","tex","com","msg","fall","nam","pres","strip","proc","choose+","haml","scss","sass","less","stylus","styl"],"mappings":"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","file":"static/js/0.5055a330bfd585cd57e7.js","sourcesContent":["//     Underscore.js 1.3.3\r\n//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.\r\n//     Underscore is freely distributable under the MIT license.\r\n//     Portions of Underscore are inspired or borrowed from Prototype,\r\n//     Oliver Steele's Functional, and John Resig's Micro-Templating.\r\n//     For all details and documentation:\r\n//     http://documentcloud.github.com/underscore\r\n\r\nvar _ = (function() {\r\n\r\n  // Baseline setup\r\n  // --------------\r\n\r\n  // Establish the root object, `window` in the browser, or `global` on the server.\r\n  var root = this;\r\n\r\n  // Save the previous value of the `_` variable.\r\n  var previousUnderscore = root._;\r\n\r\n  // Establish the object that gets returned to break out of a loop iteration.\r\n  var breaker = {};\r\n\r\n  // Save bytes in the minified (but not gzipped) version:\r\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\r\n\r\n  // Create quick reference variables for speed access to core prototypes.\r\n  var slice            = ArrayProto.slice,\r\n      unshift          = ArrayProto.unshift,\r\n      toString         = ObjProto.toString,\r\n      hasOwnProperty   = ObjProto.hasOwnProperty;\r\n\r\n  // All **ECMAScript 5** native function implementations that we hope to use\r\n  // are declared here.\r\n  var\r\n    nativeForEach      = ArrayProto.forEach,\r\n    nativeMap          = ArrayProto.map,\r\n    nativeReduce       = ArrayProto.reduce,\r\n    nativeReduceRight  = ArrayProto.reduceRight,\r\n    nativeFilter       = ArrayProto.filter,\r\n    nativeEvery        = ArrayProto.every,\r\n    nativeSome         = ArrayProto.some,\r\n    nativeIndexOf      = ArrayProto.indexOf,\r\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\r\n    nativeIsArray      = Array.isArray,\r\n    nativeKeys         = Object.keys,\r\n    nativeBind         = FuncProto.bind;\r\n\r\n  // Create a safe reference to the Underscore object for use below.\r\n  var _ = function(obj) { return new wrapper(obj); };\r\n\r\n  // Export the Underscore object for **Node.js**, with\r\n  // backwards-compatibility for the old `require()` API. If we're in\r\n  // the browser, add `_` as a global object via a string identifier,\r\n  // for Closure Compiler \"advanced\" mode.\r\n  if (typeof exports !== 'undefined') {\r\n    if (typeof module !== 'undefined' && module.exports) {\r\n      exports = module.exports = _;\r\n    }\r\n    exports._ = _;\r\n  } else {\r\n    root['_'] = _;\r\n  }\r\n\r\n  // Current version.\r\n  _.VERSION = '1.3.3';\r\n\r\n  // Collection Functions\r\n  // --------------------\r\n\r\n  // The cornerstone, an `each` implementation, aka `forEach`.\r\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\r\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\r\n  var each = _.each = _.forEach = function(obj, iterator, context) {\r\n    if (obj == null) return;\r\n    if (nativeForEach && obj.forEach === nativeForEach) {\r\n      obj.forEach(iterator, context);\r\n    } else if (obj.length === +obj.length) {\r\n      for (var i = 0, l = obj.length; i < l; i++) {\r\n        if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;\r\n      }\r\n    } else {\r\n      for (var key in obj) {\r\n        if (_.has(obj, key)) {\r\n          if (iterator.call(context, obj[key], key, obj) === breaker) return;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Return the results of applying the iterator to each element.\r\n  // Delegates to **ECMAScript 5**'s native `map` if available.\r\n  _.map = _.collect = function(obj, iterator, context) {\r\n    var results = [];\r\n    if (obj == null) return results;\r\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\r\n    each(obj, function(value, index, list) {\r\n      results[results.length] = iterator.call(context, value, index, list);\r\n    });\r\n    if (obj.length === +obj.length) results.length = obj.length;\r\n    return results;\r\n  };\r\n\r\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\r\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\r\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\r\n    var initial = arguments.length > 2;\r\n    if (obj == null) obj = [];\r\n    if (nativeReduce && obj.reduce === nativeReduce) {\r\n      if (context) iterator = _.bind(iterator, context);\r\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\r\n    }\r\n    each(obj, function(value, index, list) {\r\n      if (!initial) {\r\n        memo = value;\r\n        initial = true;\r\n      } else {\r\n        memo = iterator.call(context, memo, value, index, list);\r\n      }\r\n    });\r\n    if (!initial) throw new TypeError('Reduce of empty array with no initial value');\r\n    return memo;\r\n  };\r\n\r\n  // The right-associative version of reduce, also known as `foldr`.\r\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\r\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\r\n    var initial = arguments.length > 2;\r\n    if (obj == null) obj = [];\r\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\r\n      if (context) iterator = _.bind(iterator, context);\r\n      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\r\n    }\r\n    var reversed = _.toArray(obj).reverse();\r\n    if (context && !initial) iterator = _.bind(iterator, context);\r\n    return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);\r\n  };\r\n\r\n  // Return the first value which passes a truth test. Aliased as `detect`.\r\n  _.find = _.detect = function(obj, iterator, context) {\r\n    var result;\r\n    any(obj, function(value, index, list) {\r\n      if (iterator.call(context, value, index, list)) {\r\n        result = value;\r\n        return true;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  // Return all the elements that pass a truth test.\r\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\r\n  // Aliased as `select`.\r\n  _.filter = _.select = function(obj, iterator, context) {\r\n    var results = [];\r\n    if (obj == null) return results;\r\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\r\n    each(obj, function(value, index, list) {\r\n      if (iterator.call(context, value, index, list)) results[results.length] = value;\r\n    });\r\n    return results;\r\n  };\r\n\r\n  // Return all the elements for which a truth test fails.\r\n  _.reject = function(obj, iterator, context) {\r\n    var results = [];\r\n    if (obj == null) return results;\r\n    each(obj, function(value, index, list) {\r\n      if (!iterator.call(context, value, index, list)) results[results.length] = value;\r\n    });\r\n    return results;\r\n  };\r\n\r\n  // Determine whether all of the elements match a truth test.\r\n  // Delegates to **ECMAScript 5**'s native `every` if available.\r\n  // Aliased as `all`.\r\n  _.every = _.all = function(obj, iterator, context) {\r\n    var result = true;\r\n    if (obj == null) return result;\r\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\r\n    each(obj, function(value, index, list) {\r\n      if (!(result = result && iterator.call(context, value, index, list))) return breaker;\r\n    });\r\n    return !!result;\r\n  };\r\n\r\n  // Determine if at least one element in the object matches a truth test.\r\n  // Delegates to **ECMAScript 5**'s native `some` if available.\r\n  // Aliased as `any`.\r\n  var any = _.some = _.any = function(obj, iterator, context) {\r\n    iterator || (iterator = _.identity);\r\n    var result = false;\r\n    if (obj == null) return result;\r\n    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\r\n    each(obj, function(value, index, list) {\r\n      if (result || (result = iterator.call(context, value, index, list))) return breaker;\r\n    });\r\n    return !!result;\r\n  };\r\n\r\n  // Determine if a given value is included in the array or object using `===`.\r\n  // Aliased as `contains`.\r\n  _.include = _.contains = function(obj, target) {\r\n    var found = false;\r\n    if (obj == null) return found;\r\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\r\n    found = any(obj, function(value) {\r\n      return value === target;\r\n    });\r\n    return found;\r\n  };\r\n\r\n  // Invoke a method (with arguments) on every item in a collection.\r\n  _.invoke = function(obj, method) {\r\n    var args = slice.call(arguments, 2);\r\n    return _.map(obj, function(value) {\r\n      return (_.isFunction(method) ? method || value : value[method]).apply(value, args);\r\n    });\r\n  };\r\n\r\n  // Convenience version of a common use case of `map`: fetching a property.\r\n  _.pluck = function(obj, key) {\r\n    return _.map(obj, function(value){ return value[key]; });\r\n  };\r\n\r\n  // Return the maximum element or (element-based computation).\r\n  _.max = function(obj, iterator, context) {\r\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.max.apply(Math, obj);\r\n    if (!iterator && _.isEmpty(obj)) return -Infinity;\r\n    var result = {computed : -Infinity};\r\n    each(obj, function(value, index, list) {\r\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\r\n      computed >= result.computed && (result = {value : value, computed : computed});\r\n    });\r\n    return result.value;\r\n  };\r\n\r\n  // Return the minimum element (or element-based computation).\r\n  _.min = function(obj, iterator, context) {\r\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.min.apply(Math, obj);\r\n    if (!iterator && _.isEmpty(obj)) return Infinity;\r\n    var result = {computed : Infinity};\r\n    each(obj, function(value, index, list) {\r\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\r\n      computed < result.computed && (result = {value : value, computed : computed});\r\n    });\r\n    return result.value;\r\n  };\r\n\r\n  // Shuffle an array.\r\n  _.shuffle = function(obj) {\r\n    var shuffled = [], rand;\r\n    each(obj, function(value, index, list) {\r\n      rand = Math.floor(Math.random() * (index + 1));\r\n      shuffled[index] = shuffled[rand];\r\n      shuffled[rand] = value;\r\n    });\r\n    return shuffled;\r\n  };\r\n\r\n  // Sort the object's values by a criterion produced by an iterator.\r\n  _.sortBy = function(obj, val, context) {\r\n    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };\r\n    return _.pluck(_.map(obj, function(value, index, list) {\r\n      return {\r\n        value : value,\r\n        criteria : iterator.call(context, value, index, list)\r\n      };\r\n    }).sort(function(left, right) {\r\n      var a = left.criteria, b = right.criteria;\r\n      if (a === void 0) return 1;\r\n      if (b === void 0) return -1;\r\n      return a < b ? -1 : a > b ? 1 : 0;\r\n    }), 'value');\r\n  };\r\n\r\n  // Groups the object's values by a criterion. Pass either a string attribute\r\n  // to group by, or a function that returns the criterion.\r\n  _.groupBy = function(obj, val) {\r\n    var result = {};\r\n    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };\r\n    each(obj, function(value, index) {\r\n      var key = iterator(value, index);\r\n      (result[key] || (result[key] = [])).push(value);\r\n    });\r\n    return result;\r\n  };\r\n\r\n  // Use a comparator function to figure out at what index an object should\r\n  // be inserted so as to maintain order. Uses binary search.\r\n  _.sortedIndex = function(array, obj, iterator) {\r\n    iterator || (iterator = _.identity);\r\n    var low = 0, high = array.length;\r\n    while (low < high) {\r\n      var mid = (low + high) >> 1;\r\n      iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;\r\n    }\r\n    return low;\r\n  };\r\n\r\n  // Safely convert anything iterable into a real, live array.\r\n  _.toArray = function(obj) {\r\n    if (!obj)                                     return [];\r\n    if (_.isArray(obj))                           return slice.call(obj);\r\n    if (_.isArguments(obj))                       return slice.call(obj);\r\n    if (obj.toArray && _.isFunction(obj.toArray)) return obj.toArray();\r\n    return _.values(obj);\r\n  };\r\n\r\n  // Return the number of elements in an object.\r\n  _.size = function(obj) {\r\n    return _.isArray(obj) ? obj.length : _.keys(obj).length;\r\n  };\r\n\r\n  // Array Functions\r\n  // ---------------\r\n\r\n  // Get the first element of an array. Passing **n** will return the first N\r\n  // values in the array. Aliased as `head` and `take`. The **guard** check\r\n  // allows it to work with `_.map`.\r\n  _.first = _.head = _.take = function(array, n, guard) {\r\n    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];\r\n  };\r\n\r\n  // Returns everything but the last entry of the array. Especcialy useful on\r\n  // the arguments object. Passing **n** will return all the values in\r\n  // the array, excluding the last N. The **guard** check allows it to work with\r\n  // `_.map`.\r\n  _.initial = function(array, n, guard) {\r\n    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\r\n  };\r\n\r\n  // Get the last element of an array. Passing **n** will return the last N\r\n  // values in the array. The **guard** check allows it to work with `_.map`.\r\n  _.last = function(array, n, guard) {\r\n    if ((n != null) && !guard) {\r\n      return slice.call(array, Math.max(array.length - n, 0));\r\n    } else {\r\n      return array[array.length - 1];\r\n    }\r\n  };\r\n\r\n  // Returns everything but the first entry of the array. Aliased as `tail`.\r\n  // Especially useful on the arguments object. Passing an **index** will return\r\n  // the rest of the values in the array from that index onward. The **guard**\r\n  // check allows it to work with `_.map`.\r\n  _.rest = _.tail = function(array, index, guard) {\r\n    return slice.call(array, (index == null) || guard ? 1 : index);\r\n  };\r\n\r\n  // Trim out all falsy values from an array.\r\n  _.compact = function(array) {\r\n    return _.filter(array, function(value){ return !!value; });\r\n  };\r\n\r\n  // Return a completely flattened version of an array.\r\n  _.flatten = function(array, shallow) {\r\n    return _.reduce(array, function(memo, value) {\r\n      if (_.isArray(value)) return memo.concat(shallow ? value : _.flatten(value));\r\n      memo[memo.length] = value;\r\n      return memo;\r\n    }, []);\r\n  };\r\n\r\n  // Return a version of the array that does not contain the specified value(s).\r\n  _.without = function(array) {\r\n    return _.difference(array, slice.call(arguments, 1));\r\n  };\r\n\r\n  // Produce a duplicate-free version of the array. If the array has already\r\n  // been sorted, you have the option of using a faster algorithm.\r\n  // Aliased as `unique`.\r\n  _.uniq = _.unique = function(array, isSorted, iterator) {\r\n    var initial = iterator ? _.map(array, iterator) : array;\r\n    var results = [];\r\n    // The `isSorted` flag is irrelevant if the array only contains two elements.\r\n    if (array.length < 3) isSorted = true;\r\n    _.reduce(initial, function (memo, value, index) {\r\n      if (isSorted ? _.last(memo) !== value || !memo.length : !_.include(memo, value)) {\r\n        memo.push(value);\r\n        results.push(array[index]);\r\n      }\r\n      return memo;\r\n    }, []);\r\n    return results;\r\n  };\r\n\r\n  // Produce an array that contains the union: each distinct element from all of\r\n  // the passed-in arrays.\r\n  _.union = function() {\r\n    return _.uniq(_.flatten(arguments, true));\r\n  };\r\n\r\n  // Produce an array that contains every item shared between all the\r\n  // passed-in arrays. (Aliased as \"intersect\" for back-compat.)\r\n  _.intersection = _.intersect = function(array) {\r\n    var rest = slice.call(arguments, 1);\r\n    return _.filter(_.uniq(array), function(item) {\r\n      return _.every(rest, function(other) {\r\n        return _.indexOf(other, item) >= 0;\r\n      });\r\n    });\r\n  };\r\n\r\n  // Take the difference between one array and a number of other arrays.\r\n  // Only the elements present in just the first array will remain.\r\n  _.difference = function(array) {\r\n    var rest = _.flatten(slice.call(arguments, 1), true);\r\n    return _.filter(array, function(value){ return !_.include(rest, value); });\r\n  };\r\n\r\n  // Zip together multiple lists into a single array -- elements that share\r\n  // an index go together.\r\n  _.zip = function() {\r\n    var args = slice.call(arguments);\r\n    var length = _.max(_.pluck(args, 'length'));\r\n    var results = new Array(length);\r\n    for (var i = 0; i < length; i++) results[i] = _.pluck(args, \"\" + i);\r\n    return results;\r\n  };\r\n\r\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\r\n  // we need this function. Return the position of the first occurrence of an\r\n  // item in an array, or -1 if the item is not included in the array.\r\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\r\n  // If the array is large and already in sort order, pass `true`\r\n  // for **isSorted** to use binary search.\r\n  _.indexOf = function(array, item, isSorted) {\r\n    if (array == null) return -1;\r\n    var i, l;\r\n    if (isSorted) {\r\n      i = _.sortedIndex(array, item);\r\n      return array[i] === item ? i : -1;\r\n    }\r\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);\r\n    for (i = 0, l = array.length; i < l; i++) if (i in array && array[i] === item) return i;\r\n    return -1;\r\n  };\r\n\r\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\r\n  _.lastIndexOf = function(array, item) {\r\n    if (array == null) return -1;\r\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);\r\n    var i = array.length;\r\n    while (i--) if (i in array && array[i] === item) return i;\r\n    return -1;\r\n  };\r\n\r\n  // Generate an integer Array containing an arithmetic progression. A port of\r\n  // the native Python `range()` function. See\r\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\r\n  _.range = function(start, stop, step) {\r\n    if (arguments.length <= 1) {\r\n      stop = start || 0;\r\n      start = 0;\r\n    }\r\n    step = arguments[2] || 1;\r\n\r\n    var len = Math.max(Math.ceil((stop - start) / step), 0);\r\n    var idx = 0;\r\n    var range = new Array(len);\r\n\r\n    while(idx < len) {\r\n      range[idx++] = start;\r\n      start += step;\r\n    }\r\n\r\n    return range;\r\n  };\r\n\r\n  // Function (ahem) Functions\r\n  // ------------------\r\n\r\n  // Reusable constructor function for prototype setting.\r\n  var ctor = function(){};\r\n\r\n  // Create a function bound to a given object (assigning `this`, and arguments,\r\n  // optionally). Binding with arguments is also known as `curry`.\r\n  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.\r\n  // We check for `func.bind` first, to fail fast when `func` is undefined.\r\n  _.bind = function bind(func, context) {\r\n    var bound, args;\r\n    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\r\n    if (!_.isFunction(func)) throw new TypeError;\r\n    args = slice.call(arguments, 2);\r\n    return bound = function() {\r\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\r\n      ctor.prototype = func.prototype;\r\n      var self = new ctor;\r\n      var result = func.apply(self, args.concat(slice.call(arguments)));\r\n      if (Object(result) === result) return result;\r\n      return self;\r\n    };\r\n  };\r\n\r\n  // Bind all of an object's methods to that object. Useful for ensuring that\r\n  // all callbacks defined on an object belong to it.\r\n  _.bindAll = function(obj) {\r\n    var funcs = slice.call(arguments, 1);\r\n    if (funcs.length == 0) funcs = _.functions(obj);\r\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\r\n    return obj;\r\n  };\r\n\r\n  // Memoize an expensive function by storing its results.\r\n  _.memoize = function(func, hasher) {\r\n    var memo = {};\r\n    hasher || (hasher = _.identity);\r\n    return function() {\r\n      var key = hasher.apply(this, arguments);\r\n      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\r\n    };\r\n  };\r\n\r\n  // Delays a function for the given number of milliseconds, and then calls\r\n  // it with the arguments supplied.\r\n  _.delay = function(func, wait) {\r\n    var args = slice.call(arguments, 2);\r\n    return setTimeout(function(){ return func.apply(null, args); }, wait);\r\n  };\r\n\r\n  // Defers a function, scheduling it to run after the current call stack has\r\n  // cleared.\r\n  _.defer = function(func) {\r\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\r\n  };\r\n\r\n  // Returns a function, that, when invoked, will only be triggered at most once\r\n  // during a given window of time.\r\n  _.throttle = function(func, wait) {\r\n    var context, args, timeout, throttling, more, result;\r\n    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);\r\n    return function() {\r\n      context = this; args = arguments;\r\n      var later = function() {\r\n        timeout = null;\r\n        if (more) func.apply(context, args);\r\n        whenDone();\r\n      };\r\n      if (!timeout) timeout = setTimeout(later, wait);\r\n      if (throttling) {\r\n        more = true;\r\n      } else {\r\n        result = func.apply(context, args);\r\n      }\r\n      whenDone();\r\n      throttling = true;\r\n      return result;\r\n    };\r\n  };\r\n\r\n  // Returns a function, that, as long as it continues to be invoked, will not\r\n  // be triggered. The function will be called after it stops being called for\r\n  // N milliseconds. If `immediate` is passed, trigger the function on the\r\n  // leading edge, instead of the trailing.\r\n  _.debounce = function(func, wait, immediate) {\r\n    var timeout;\r\n    return function() {\r\n      var context = this, args = arguments;\r\n      var later = function() {\r\n        timeout = null;\r\n        if (!immediate) func.apply(context, args);\r\n      };\r\n      if (immediate && !timeout) func.apply(context, args);\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(later, wait);\r\n    };\r\n  };\r\n\r\n  // Returns a function that will be executed at most one time, no matter how\r\n  // often you call it. Useful for lazy initialization.\r\n  _.once = function(func) {\r\n    var ran = false, memo;\r\n    return function() {\r\n      if (ran) return memo;\r\n      ran = true;\r\n      return memo = func.apply(this, arguments);\r\n    };\r\n  };\r\n\r\n  // Returns the first function passed as an argument to the second,\r\n  // allowing you to adjust arguments, run code before and after, and\r\n  // conditionally execute the original function.\r\n  _.wrap = function(func, wrapper) {\r\n    return function() {\r\n      var args = [func].concat(slice.call(arguments, 0));\r\n      return wrapper.apply(this, args);\r\n    };\r\n  };\r\n\r\n  // Returns a function that is the composition of a list of functions, each\r\n  // consuming the return value of the function that follows.\r\n  _.compose = function() {\r\n    var funcs = arguments;\r\n    return function() {\r\n      var args = arguments;\r\n      for (var i = funcs.length - 1; i >= 0; i--) {\r\n        args = [funcs[i].apply(this, args)];\r\n      }\r\n      return args[0];\r\n    };\r\n  };\r\n\r\n  // Returns a function that will only be executed after being called N times.\r\n  _.after = function(times, func) {\r\n    if (times <= 0) return func();\r\n    return function() {\r\n      if (--times < 1) { return func.apply(this, arguments); }\r\n    };\r\n  };\r\n\r\n  // Object Functions\r\n  // ----------------\r\n\r\n  // Retrieve the names of an object's properties.\r\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\r\n  _.keys = nativeKeys || function(obj) {\r\n    if (obj !== Object(obj)) throw new TypeError('Invalid object');\r\n    var keys = [];\r\n    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;\r\n    return keys;\r\n  };\r\n\r\n  // Retrieve the values of an object's properties.\r\n  _.values = function(obj) {\r\n    return _.map(obj, _.identity);\r\n  };\r\n\r\n  // Return a sorted list of the function names available on the object.\r\n  // Aliased as `methods`\r\n  _.functions = _.methods = function(obj) {\r\n    var names = [];\r\n    for (var key in obj) {\r\n      if (_.isFunction(obj[key])) names.push(key);\r\n    }\r\n    return names.sort();\r\n  };\r\n\r\n  // Extend a given object with all the properties in passed-in object(s).\r\n  _.extend = function(obj) {\r\n    each(slice.call(arguments, 1), function(source) {\r\n      for (var prop in source) {\r\n        obj[prop] = source[prop];\r\n      }\r\n    });\r\n    return obj;\r\n  };\r\n\r\n  // Return a copy of the object only containing the whitelisted properties.\r\n  _.pick = function(obj) {\r\n    var result = {};\r\n    each(_.flatten(slice.call(arguments, 1)), function(key) {\r\n      if (key in obj) result[key] = obj[key];\r\n    });\r\n    return result;\r\n  };\r\n\r\n  // Fill in a given object with default properties.\r\n  _.defaults = function(obj) {\r\n    each(slice.call(arguments, 1), function(source) {\r\n      for (var prop in source) {\r\n        if (obj[prop] == null) obj[prop] = source[prop];\r\n      }\r\n    });\r\n    return obj;\r\n  };\r\n\r\n  // Create a (shallow-cloned) duplicate of an object.\r\n  _.clone = function(obj) {\r\n    if (!_.isObject(obj)) return obj;\r\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\r\n  };\r\n\r\n  // Invokes interceptor with the obj, and then returns obj.\r\n  // The primary purpose of this method is to \"tap into\" a method chain, in\r\n  // order to perform operations on intermediate results within the chain.\r\n  _.tap = function(obj, interceptor) {\r\n    interceptor(obj);\r\n    return obj;\r\n  };\r\n\r\n  // Internal recursive comparison function.\r\n  function eq(a, b, stack) {\r\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.\r\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\r\n    // A strict comparison is necessary because `null == undefined`.\r\n    if (a == null || b == null) return a === b;\r\n    // Unwrap any wrapped objects.\r\n    if (a._chain) a = a._wrapped;\r\n    if (b._chain) b = b._wrapped;\r\n    // Invoke a custom `isEqual` method if one is provided.\r\n    if (a.isEqual && _.isFunction(a.isEqual)) return a.isEqual(b);\r\n    if (b.isEqual && _.isFunction(b.isEqual)) return b.isEqual(a);\r\n    // Compare `[[Class]]` names.\r\n    var className = toString.call(a);\r\n    if (className != toString.call(b)) return false;\r\n    switch (className) {\r\n      // Strings, numbers, dates, and booleans are compared by value.\r\n      case '[object String]':\r\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n        // equivalent to `new String(\"5\")`.\r\n        return a == String(b);\r\n      case '[object Number]':\r\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\r\n        // other numeric values.\r\n        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\r\n      case '[object Date]':\r\n      case '[object Boolean]':\r\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n        // millisecond representations. Note that invalid dates with millisecond representations\r\n        // of `NaN` are not equivalent.\r\n        return +a == +b;\r\n      // RegExps are compared by their source patterns and flags.\r\n      case '[object RegExp]':\r\n        return a.source == b.source &&\r\n               a.global == b.global &&\r\n               a.multiline == b.multiline &&\r\n               a.ignoreCase == b.ignoreCase;\r\n    }\r\n    if (typeof a != 'object' || typeof b != 'object') return false;\r\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n    var length = stack.length;\r\n    while (length--) {\r\n      // Linear search. Performance is inversely proportional to the number of\r\n      // unique nested structures.\r\n      if (stack[length] == a) return true;\r\n    }\r\n    // Add the first object to the stack of traversed objects.\r\n    stack.push(a);\r\n    var size = 0, result = true;\r\n    // Recursively compare objects and arrays.\r\n    if (className == '[object Array]') {\r\n      // Compare array lengths to determine if a deep comparison is necessary.\r\n      size = a.length;\r\n      result = size == b.length;\r\n      if (result) {\r\n        // Deep compare the contents, ignoring non-numeric properties.\r\n        while (size--) {\r\n          // Ensure commutative equality for sparse arrays.\r\n          if (!(result = size in a == size in b && eq(a[size], b[size], stack))) break;\r\n        }\r\n      }\r\n    } else {\r\n      // Objects with different constructors are not equivalent.\r\n      if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) return false;\r\n      // Deep compare objects.\r\n      for (var key in a) {\r\n        if (_.has(a, key)) {\r\n          // Count the expected number of properties.\r\n          size++;\r\n          // Deep compare each member.\r\n          if (!(result = _.has(b, key) && eq(a[key], b[key], stack))) break;\r\n        }\r\n      }\r\n      // Ensure that both objects contain the same number of properties.\r\n      if (result) {\r\n        for (key in b) {\r\n          if (_.has(b, key) && !(size--)) break;\r\n        }\r\n        result = !size;\r\n      }\r\n    }\r\n    // Remove the first object from the stack of traversed objects.\r\n    stack.pop();\r\n    return result;\r\n  }\r\n\r\n  // Perform a deep comparison to check if two objects are equal.\r\n  _.isEqual = function(a, b) {\r\n    return eq(a, b, []);\r\n  };\r\n\r\n  // Is a given array, string, or object empty?\r\n  // An \"empty\" object has no enumerable own-properties.\r\n  _.isEmpty = function(obj) {\r\n    if (obj == null) return true;\r\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\r\n    for (var key in obj) if (_.has(obj, key)) return false;\r\n    return true;\r\n  };\r\n\r\n  // Is a given value a DOM element?\r\n  _.isElement = function(obj) {\r\n    return !!(obj && obj.nodeType == 1);\r\n  };\r\n\r\n  // Is a given value an array?\r\n  // Delegates to ECMA5's native Array.isArray\r\n  _.isArray = nativeIsArray || function(obj) {\r\n    return toString.call(obj) == '[object Array]';\r\n  };\r\n\r\n  // Is a given variable an object?\r\n  _.isObject = function(obj) {\r\n    return obj === Object(obj);\r\n  };\r\n\r\n  // Is a given variable an arguments object?\r\n  _.isArguments = function(obj) {\r\n    return toString.call(obj) == '[object Arguments]';\r\n  };\r\n  if (!_.isArguments(arguments)) {\r\n    _.isArguments = function(obj) {\r\n      return !!(obj && _.has(obj, 'callee'));\r\n    };\r\n  }\r\n\r\n  // Is a given value a function?\r\n  _.isFunction = function(obj) {\r\n    return toString.call(obj) == '[object Function]';\r\n  };\r\n\r\n  // Is a given value a string?\r\n  _.isString = function(obj) {\r\n    return toString.call(obj) == '[object String]';\r\n  };\r\n\r\n  // Is a given value a number?\r\n  _.isNumber = function(obj) {\r\n    return toString.call(obj) == '[object Number]';\r\n  };\r\n\r\n  // Is a given object a finite number?\r\n  _.isFinite = function(obj) {\r\n    return _.isNumber(obj) && isFinite(obj);\r\n  };\r\n\r\n  // Is the given value `NaN`?\r\n  _.isNaN = function(obj) {\r\n    // `NaN` is the only value for which `===` is not reflexive.\r\n    return obj !== obj;\r\n  };\r\n\r\n  // Is a given value a boolean?\r\n  _.isBoolean = function(obj) {\r\n    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\r\n  };\r\n\r\n  // Is a given value a date?\r\n  _.isDate = function(obj) {\r\n    return toString.call(obj) == '[object Date]';\r\n  };\r\n\r\n  // Is the given value a regular expression?\r\n  _.isRegExp = function(obj) {\r\n    return toString.call(obj) == '[object RegExp]';\r\n  };\r\n\r\n  // Is a given value equal to null?\r\n  _.isNull = function(obj) {\r\n    return obj === null;\r\n  };\r\n\r\n  // Is a given variable undefined?\r\n  _.isUndefined = function(obj) {\r\n    return obj === void 0;\r\n  };\r\n\r\n  // Has own property?\r\n  _.has = function(obj, key) {\r\n    return hasOwnProperty.call(obj, key);\r\n  };\r\n\r\n  // Utility Functions\r\n  // -----------------\r\n\r\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\r\n  // previous owner. Returns a reference to the Underscore object.\r\n  _.noConflict = function() {\r\n    root._ = previousUnderscore;\r\n    return this;\r\n  };\r\n\r\n  // Keep the identity function around for default iterators.\r\n  _.identity = function(value) {\r\n    return value;\r\n  };\r\n\r\n  // Run a function **n** times.\r\n  _.times = function (n, iterator, context) {\r\n    for (var i = 0; i < n; i++) iterator.call(context, i);\r\n  };\r\n\r\n  // Escape a string for HTML interpolation.\r\n  _.escape = function(string) {\r\n    return (''+string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\\//g,'&#x2F;');\r\n  };\r\n\r\n  // If the value of the named property is a function then invoke it;\r\n  // otherwise, return it.\r\n  _.result = function(object, property) {\r\n    if (object == null) return null;\r\n    var value = object[property];\r\n    return _.isFunction(value) ? value.call(object) : value;\r\n  };\r\n\r\n  // Add your own custom functions to the Underscore object, ensuring that\r\n  // they're correctly added to the OOP wrapper as well.\r\n  _.mixin = function(obj) {\r\n    each(_.functions(obj), function(name){\r\n      addToWrapper(name, _[name] = obj[name]);\r\n    });\r\n  };\r\n\r\n  // Generate a unique integer id (unique within the entire client session).\r\n  // Useful for temporary DOM ids.\r\n  var idCounter = 0;\r\n  _.uniqueId = function(prefix) {\r\n    var id = idCounter++;\r\n    return prefix ? prefix + id : id;\r\n  };\r\n\r\n  // By default, Underscore uses ERB-style template delimiters, change the\r\n  // following template settings to use alternative delimiters.\r\n  _.templateSettings = {\r\n    evaluate    : /<%([\\s\\S]+?)%>/g,\r\n    interpolate : /<%=([\\s\\S]+?)%>/g,\r\n    escape      : /<%-([\\s\\S]+?)%>/g\r\n  };\r\n\r\n  // When customizing `templateSettings`, if you don't want to define an\r\n  // interpolation, evaluation or escaping regex, we need one that is\r\n  // guaranteed not to match.\r\n  var noMatch = /.^/;\r\n\r\n  // Certain characters need to be escaped so that they can be put into a\r\n  // string literal.\r\n  var escapes = {\r\n    '\\\\': '\\\\',\r\n    \"'\": \"'\",\r\n    'r': '\\r',\r\n    'n': '\\n',\r\n    't': '\\t',\r\n    'u2028': '\\u2028',\r\n    'u2029': '\\u2029'\r\n  };\r\n\r\n  for (var p in escapes) escapes[escapes[p]] = p;\r\n  var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\r\n  var unescaper = /\\\\(\\\\|'|r|n|t|u2028|u2029)/g;\r\n\r\n  // Within an interpolation, evaluation, or escaping, remove HTML escaping\r\n  // that had been previously added.\r\n  var unescape = function(code) {\r\n    return code.replace(unescaper, function(match, escape) {\r\n      return escapes[escape];\r\n    });\r\n  };\r\n\r\n  // JavaScript micro-templating, similar to John Resig's implementation.\r\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\r\n  // and correctly escapes quotes within interpolated code.\r\n  _.template = function(text, data, settings) {\r\n    settings = _.defaults(settings || {}, _.templateSettings);\r\n\r\n    // Compile the template source, taking care to escape characters that\r\n    // cannot be included in a string literal and then unescape them in code\r\n    // blocks.\r\n    var source = \"__p+='\" + text\r\n      .replace(escaper, function(match) {\r\n        return '\\\\' + escapes[match];\r\n      })\r\n      .replace(settings.escape || noMatch, function(match, code) {\r\n        return \"'+\\n_.escape(\" + unescape(code) + \")+\\n'\";\r\n      })\r\n      .replace(settings.interpolate || noMatch, function(match, code) {\r\n        return \"'+\\n(\" + unescape(code) + \")+\\n'\";\r\n      })\r\n      .replace(settings.evaluate || noMatch, function(match, code) {\r\n        return \"';\\n\" + unescape(code) + \"\\n;__p+='\";\r\n      }) + \"';\\n\";\r\n\r\n    // If a variable is not specified, place data values in local scope.\r\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\r\n\r\n    source = \"var __p='';\" +\r\n      \"var print=function(){__p+=Array.prototype.join.call(arguments, '')};\\n\" +\r\n      source + \"return __p;\\n\";\r\n\r\n    var render = new Function(settings.variable || 'obj', '_', source);\r\n    if (data) return render(data, _);\r\n    var template = function(data) {\r\n      return render.call(this, data, _);\r\n    };\r\n\r\n    // Provide the compiled function source as a convenience for build time\r\n    // precompilation.\r\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' +\r\n      source + '}';\r\n\r\n    return template;\r\n  };\r\n\r\n  // Add a \"chain\" function, which will delegate to the wrapper.\r\n  _.chain = function(obj) {\r\n    return _(obj).chain();\r\n  };\r\n\r\n  // The OOP Wrapper\r\n  // ---------------\r\n\r\n  // If Underscore is called as a function, it returns a wrapped object that\r\n  // can be used OO-style. This wrapper holds altered versions of all the\r\n  // underscore functions. Wrapped objects may be chained.\r\n  var wrapper = function(obj) { this._wrapped = obj; };\r\n\r\n  // Expose `wrapper.prototype` as `_.prototype`\r\n  _.prototype = wrapper.prototype;\r\n\r\n  // Helper function to continue chaining intermediate results.\r\n  var result = function(obj, chain) {\r\n    return chain ? _(obj).chain() : obj;\r\n  };\r\n\r\n  // A method to easily add functions to the OOP wrapper.\r\n  var addToWrapper = function(name, func) {\r\n    wrapper.prototype[name] = function() {\r\n      var args = slice.call(arguments);\r\n      unshift.call(args, this._wrapped);\r\n      return result(func.apply(_, args), this._chain);\r\n    };\r\n  };\r\n\r\n  // Add all of the Underscore functions to the wrapper object.\r\n  _.mixin(_);\r\n\r\n  // Add all mutator Array functions to the wrapper.\r\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\r\n    var method = ArrayProto[name];\r\n    wrapper.prototype[name] = function() {\r\n      var wrapped = this._wrapped;\r\n      method.apply(wrapped, arguments);\r\n      var length = wrapped.length;\r\n      if ((name == 'shift' || name == 'splice') && length === 0) delete wrapped[0];\r\n      return result(wrapped, this._chain);\r\n    };\r\n  });\r\n\r\n  // Add all accessor Array functions to the wrapper.\r\n  each(['concat', 'join', 'slice'], function(name) {\r\n    var method = ArrayProto[name];\r\n    wrapper.prototype[name] = function() {\r\n      return result(method.apply(this._wrapped, arguments), this._chain);\r\n    };\r\n  });\r\n\r\n  // Start chaining a wrapped Underscore object.\r\n  wrapper.prototype.chain = function() {\r\n    this._chain = true;\r\n    return this;\r\n  };\r\n\r\n  // Extracts the result from a wrapped and chained object.\r\n  wrapper.prototype.value = function() {\r\n    return this._wrapped;\r\n  };\r\n  return _;\r\n}).call({});\r\n/**\r\n * Core Emmet object, available in global scope\r\n */\r\nvar emmet = (function(global) {\r\n\tvar defaultSyntax = 'html';\r\n\tvar defaultProfile = 'plain';\r\n\t\r\n\tif (typeof _ == 'undefined') {\r\n\t\ttry {\r\n\t\t\t// avoid collisions with RequireJS loader\r\n\t\t\t// also, JS obfuscators tends to translate\r\n\t\t\t// a[\"name\"] to a.name, which also breaks RequireJS\r\n\t\t\t_ = global[['require'][0]]('underscore'); // node.js\r\n\t\t} catch (e) {}\r\n\t}\r\n\r\n\tif (typeof _ == 'undefined') {\r\n\t\tthrow 'Cannot access to Underscore.js lib';\r\n\t}\r\n\r\n\t/** List of registered modules */\r\n\tvar modules = {\r\n\t\t_ : _\r\n\t};\r\n\t\r\n\t/**\r\n\t * Shared empty constructor function to aid in prototype-chain creation.\r\n\t */\r\n\tvar ctor = function(){};\r\n\t\r\n\t/**\r\n\t * Helper function to correctly set up the prototype chain, for subclasses.\r\n\t * Similar to `goog.inherits`, but uses a hash of prototype properties and\r\n\t * class properties to be extended.\r\n\t * Took it from Backbone.\r\n\t * @param {Object} parent\r\n\t * @param {Object} protoProps\r\n\t * @param {Object} staticProps\r\n\t * @returns {Object}\r\n\t */\r\n\tfunction inherits(parent, protoProps, staticProps) {\r\n\t\tvar child;\r\n\r\n\t\t// The constructor function for the new subclass is either defined by\r\n\t\t// you (the \"constructor\" property in your `extend` definition), or\r\n\t\t// defaulted by us to simply call the parent's constructor.\r\n\t\tif (protoProps && protoProps.hasOwnProperty('constructor')) {\r\n\t\t\tchild = protoProps.constructor;\r\n\t\t} else {\r\n\t\t\tchild = function() {\r\n\t\t\t\tparent.apply(this, arguments);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Inherit class (static) properties from parent.\r\n\t\t_.extend(child, parent);\r\n\r\n\t\t// Set the prototype chain to inherit from `parent`, without calling\r\n\t\t// `parent`'s constructor function.\r\n\t\tctor.prototype = parent.prototype;\r\n\t\tchild.prototype = new ctor();\r\n\r\n\t\t// Add prototype properties (instance properties) to the subclass,\r\n\t\t// if supplied.\r\n\t\tif (protoProps)\r\n\t\t\t_.extend(child.prototype, protoProps);\r\n\r\n\t\t// Add static properties to the constructor function, if supplied.\r\n\t\tif (staticProps)\r\n\t\t\t_.extend(child, staticProps);\r\n\r\n\t\t// Correctly set child's `prototype.constructor`.\r\n\t\tchild.prototype.constructor = child;\r\n\r\n\t\t// Set a convenience property in case the parent's prototype is needed\r\n\t\t// later.\r\n\t\tchild.__super__ = parent.prototype;\r\n\r\n\t\treturn child;\r\n\t};\r\n\t\r\n\t/**\r\n\t * @type Function Function that loads module definition if it's not defined\r\n\t */\r\n\tvar moduleLoader = null;\r\n\t\r\n\t/**\r\n\t * Generic Emmet module loader (actually, it doesn’t load anything, just \r\n\t * returns module reference). Not using `require` name to avoid conflicts\r\n\t * with Node.js and RequireJS\r\n\t */\r\n\tfunction r(name) {\r\n\t\tif (!(name in modules) && moduleLoader)\r\n\t\t\tmoduleLoader(name);\r\n\t\t\r\n\t\treturn modules[name];\r\n\t}\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Simple, AMD-like module definition. The module will be added into\r\n\t\t * <code>emmet</code> object and will be available via\r\n\t\t * <code>emmet.require(name)</code> or <code>emmet[name]</code>\r\n\t\t * @param {String} name\r\n\t\t * @param {Function} factory\r\n\t\t * @memberOf emmet\r\n\t\t */\r\n\t\tdefine: function(name, factory) {\r\n\t\t\t// do not let redefine existing properties\r\n\t\t\tif (!(name in modules)) {\r\n\t\t\t\tmodules[name] = _.isFunction(factory) \r\n\t\t\t\t\t? this.exec(factory)\r\n\t\t\t\t\t: factory;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns reference to Emmet module\r\n\t\t * @param {String} name Module name\r\n\t\t */\r\n\t\trequire: r,\r\n\t\t\r\n\t\t/**\r\n\t\t * Helper method that just executes passed function but with all \r\n\t\t * important arguments like 'require' and '_'\r\n\t\t * @param {Function} fn\r\n\t\t * @param {Object} context Execution context\r\n\t\t */\r\n\t\texec: function(fn, context) {\r\n\t\t\treturn fn.call(context || global, _.bind(r, this), _, this);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * The self-propagating extend function for classes.\r\n\t\t * Took it from Backbone \r\n\t\t * @param {Object} protoProps\r\n\t\t * @param {Object} classProps\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\textend: function(protoProps, classProps) {\r\n\t\t\tvar child = inherits(this, protoProps, classProps);\r\n\t\t\tchild.extend = this.extend;\r\n\t\t\t// a hack required to WSH inherit `toString` method\r\n\t\t\tif (protoProps.hasOwnProperty('toString'))\r\n\t\t\t\tchild.prototype.toString = protoProps.toString;\r\n\t\t\treturn child;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * The essential function that expands Emmet abbreviation\r\n\t\t * @param {String} abbr Abbreviation to parse\r\n\t\t * @param {String} syntax Abbreviation's context syntax\r\n\t\t * @param {String} profile Output profile (or its name)\r\n\t\t * @param {Object} contextNode Contextual node where abbreviation is\r\n\t\t * written\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\texpandAbbreviation: function(abbr, syntax, profile, contextNode) {\r\n\t\t\tif (!abbr) return '';\r\n\t\t\t\r\n\t\t\tsyntax = syntax || defaultSyntax;\r\n//\t\t\tprofile = profile || defaultProfile;\r\n\t\t\t\r\n\t\t\tvar filters = r('filters');\r\n\t\t\tvar parser = r('abbreviationParser');\r\n\t\t\t\r\n\t\t\tprofile = r('profile').get(profile, syntax);\r\n\t\t\tr('tabStops').resetTabstopIndex();\r\n\t\t\t\r\n\t\t\tvar data = filters.extractFromAbbreviation(abbr);\r\n\t\t\tvar outputTree = parser.parse(data[0], {\r\n\t\t\t\tsyntax: syntax, \r\n\t\t\t\tcontextNode: contextNode\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar filtersList = filters.composeList(syntax, profile, data[1]);\r\n\t\t\tfilters.apply(outputTree, filtersList, profile);\r\n\t\t\treturn outputTree.toString();\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns default syntax name used in abbreviation engine\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tdefaultSyntax: function() {\r\n\t\t\treturn defaultSyntax;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns default profile name used in abbreviation engine\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tdefaultProfile: function() {\r\n\t\t\treturn defaultProfile;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Log message into console if it exists\r\n\t\t */\r\n\t\tlog: function() {\r\n\t\t\tif (global.console && global.console.log)\r\n\t\t\t\tglobal.console.log.apply(global.console, arguments);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Setups function that should synchronously load undefined modules\r\n\t\t * @param {Function} fn\r\n\t\t */\r\n\t\tsetModuleLoader: function(fn) {\r\n\t\t\tmoduleLoader = fn;\r\n\t\t}\r\n\t};\r\n})(this);\r\n\r\n// export core for Node.JS\r\nif (typeof exports !== 'undefined') {\r\n\tif (typeof module !== 'undefined' && module.exports) {\r\n\t\texports = module.exports = emmet;\r\n\t}\r\n\texports.emmet = emmet;\r\n}\r\n\r\n// export as Require.js module\r\nif (typeof define !== 'undefined') {\r\n\tdefine('emmet', [], emmet);\r\n}/**\r\n * Emmet abbreviation parser.\r\n * Takes string abbreviation and recursively parses it into a tree. The parsed \r\n * tree can be transformed into a string representation with \r\n * <code>toString()</code> method. Note that string representation is defined\r\n * by custom processors (called <i>filters</i>), not by abbreviation parser \r\n * itself.\r\n * \r\n * This module can be extended with custom pre-/post-processors to shape-up\r\n * final tree or its representation. Actually, many features of abbreviation \r\n * engine are defined in other modules as tree processors\r\n * \r\n * \r\n * @author Sergey Chikuyonok (serge.che@gmail.com)\r\n * @link http://chikuyonok.ru\r\n * @memberOf __abbreviationParser\r\n * @constructor\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('abbreviationParser', function(require, _) {\r\n\tvar reValidName = /^[\\w\\-\\$\\:@\\!%]+\\+?$/i;\r\n\tvar reWord = /[\\w\\-:\\$@]/;\r\n\t\r\n\tvar pairs = {\r\n\t\t'[': ']',\r\n\t\t'(': ')',\r\n\t\t'{': '}'\r\n\t};\r\n\t\r\n\tvar spliceFn = Array.prototype.splice;\r\n\t\r\n\tvar preprocessors = [];\r\n\tvar postprocessors = [];\r\n\tvar outputProcessors = [];\r\n\t\r\n\t/**\r\n\t * @type AbbreviationNode\r\n\t */\r\n\tfunction AbbreviationNode(parent) {\r\n\t\t/** @type AbbreviationNode */\r\n\t\tthis.parent = null;\r\n\t\tthis.children = [];\r\n\t\tthis._attributes = [];\r\n\t\t\r\n\t\t/** @type String Raw abbreviation for current node */\r\n\t\tthis.abbreviation = '';\r\n\t\tthis.counter = 1;\r\n\t\tthis._name = null;\r\n\t\tthis._text = '';\r\n\t\tthis.repeatCount = 1;\r\n\t\tthis.hasImplicitRepeat = false;\r\n\t\t\r\n\t\t/** Custom data dictionary */\r\n\t\tthis._data = {};\r\n\t\t\r\n\t\t// output properties\r\n\t\tthis.start = '';\r\n\t\tthis.end = '';\r\n\t\tthis.content = '';\r\n\t\tthis.padding = '';\r\n\t}\r\n\t\r\n\tAbbreviationNode.prototype = {\r\n\t\t/**\r\n\t\t * Adds passed node as child or creates new child\r\n\t\t * @param {AbbreviationNode} child\r\n\t\t * @param {Number} position Index in children array where child should \r\n\t\t * be inserted\r\n\t\t * @return {AbbreviationNode}\r\n\t\t */\r\n\t\taddChild: function(child, position) {\r\n\t\t\tchild = child || new AbbreviationNode;\r\n\t\t\tchild.parent = this;\r\n\t\t\t\r\n\t\t\tif (_.isUndefined(position)) {\r\n\t\t\t\tthis.children.push(child);\r\n\t\t\t} else {\r\n\t\t\t\tthis.children.splice(position, 0, child);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn child;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Creates a deep copy of current node\r\n\t\t * @returns {AbbreviationNode}\r\n\t\t */\r\n\t\tclone: function() {\r\n\t\t\tvar node = new AbbreviationNode();\r\n\t\t\tvar attrs = ['abbreviation', 'counter', '_name', '_text', 'repeatCount', 'hasImplicitRepeat', 'start', 'end', 'content', 'padding'];\r\n\t\t\t_.each(attrs, function(a) {\r\n\t\t\t\tnode[a] = this[a];\r\n\t\t\t}, this);\r\n\t\t\t\r\n\t\t\t// clone attributes\r\n\t\t\tnode._attributes = _.map(this._attributes, function(attr) {\r\n\t\t\t\treturn _.clone(attr);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tnode._data = _.clone(this._data);\r\n\t\t\t\r\n\t\t\t// clone children\r\n\t\t\tnode.children = _.map(this.children, function(child) {\r\n\t\t\t\tchild = child.clone();\r\n\t\t\t\tchild.parent = node;\r\n\t\t\t\treturn child;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn node;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes current node from parent‘s child list\r\n\t\t * @returns {AbbreviationNode} Current node itself\r\n\t\t */\r\n\t\tremove: function() {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tthis.parent.children = _.without(this.parent.children, this);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Replaces current node in parent‘s children list with passed nodes\r\n\t\t * @param {AbbreviationNode} node Replacement node or array of nodes\r\n\t\t */\r\n\t\treplace: function() {\r\n\t\t\tvar parent = this.parent;\r\n\t\t\tvar ix = _.indexOf(parent.children, this);\r\n\t\t\tvar items = _.flatten(arguments);\r\n\t\t\tspliceFn.apply(parent.children, [ix, 1].concat(items));\r\n\t\t\t\r\n\t\t\t// update parent\r\n\t\t\t_.each(items, function(item) {\r\n\t\t\t\titem.parent = parent;\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Recursively sets <code>property</code> to <code>value</code> of current\r\n\t\t * node and its children \r\n\t\t * @param {String} name Property to update\r\n\t\t * @param {Object} value New property value\r\n\t\t */\r\n\t\tupdateProperty: function(name, value) {\r\n\t\t\tthis[name] = value;\r\n\t\t\t_.each(this.children, function(child) {\r\n\t\t\t\tchild.updateProperty(name, value);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Finds first child node that matches truth test for passed \r\n\t\t * <code>fn</code> function\r\n\t\t * @param {Function} fn\r\n\t\t * @returns {AbbreviationNode}\r\n\t\t */\r\n\t\tfind: function(fn) {\r\n\t\t\treturn this.findAll(fn)[0];\r\n//\t\t\tif (!_.isFunction(fn)) {\r\n//\t\t\t\tvar elemName = fn.toLowerCase();\r\n//\t\t\t\tfn = function(item) {return item.name().toLowerCase() == elemName;};\r\n//\t\t\t}\r\n//\t\t\t\r\n//\t\t\tvar result = null;\r\n//\t\t\t_.find(this.children, function(child) {\r\n//\t\t\t\tif (fn(child)) {\r\n//\t\t\t\t\treturn result = child;\r\n//\t\t\t\t}\r\n//\t\t\t\t\r\n//\t\t\t\treturn result = child.find(fn);\r\n//\t\t\t});\r\n//\t\t\t\r\n//\t\t\treturn result;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Finds all child nodes that matches truth test for passed \r\n\t\t * <code>fn</code> function\r\n\t\t * @param {Function} fn\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tfindAll: function(fn) {\r\n\t\t\tif (!_.isFunction(fn)) {\r\n\t\t\t\tvar elemName = fn.toLowerCase();\r\n\t\t\t\tfn = function(item) {return item.name().toLowerCase() == elemName;};\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\tvar result = [];\r\n\t\t\t_.each(this.children, function(child) {\r\n\t\t\t\tif (fn(child))\r\n\t\t\t\t\tresult.push(child);\r\n\t\t\t\t\r\n\t\t\t\tresult = result.concat(child.findAll(fn));\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn _.compact(result);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Sets/gets custom data\r\n\t\t * @param {String} name\r\n\t\t * @param {Object} value\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tdata: function(name, value) {\r\n\t\t\tif (arguments.length == 2) {\r\n\t\t\t\tthis._data[name] = value;\r\n\t\t\t\t\r\n\t\t\t\tif (name == 'resource' && require('elements').is(value, 'snippet')) {\r\n\t\t\t\t\t// setting snippet as matched resource: update `content`\r\n\t\t\t\t\t// property with snippet value\r\n\t\t\t\t\tthis.content = value.data;\r\n\t\t\t\t\tif (this._text) {\r\n\t\t\t\t\t\tthis.content = require('abbreviationUtils')\r\n\t\t\t\t\t\t\t.insertChildContent(value.data, this._text);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this._data[name];\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns name of current node\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tname: function() {\r\n\t\t\tvar res = this.matchedResource();\r\n\t\t\tif (require('elements').is(res, 'element')) {\r\n\t\t\t\treturn res.name;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this._name;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns list of attributes for current node\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tattributeList: function() {\r\n\t\t\tvar attrs = [];\r\n\t\t\t\r\n\t\t\tvar res = this.matchedResource();\r\n\t\t\tif (require('elements').is(res, 'element') && _.isArray(res.attributes)) {\r\n\t\t\t\tattrs = attrs.concat(res.attributes);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn optimizeAttributes(attrs.concat(this._attributes));\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns or sets attribute value\r\n\t\t * @param {String} name Attribute name\r\n\t\t * @param {String} value New attribute value\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tattribute: function(name, value) {\r\n\t\t\tif (arguments.length == 2) {\r\n\t\t\t\t// modifying attribute\r\n\t\t\t\tvar ix = _.indexOf(_.pluck(this._attributes, 'name'), name.toLowerCase());\r\n\t\t\t\tif (~ix) {\r\n\t\t\t\t\tthis._attributes[ix].value = value;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._attributes.push({\r\n\t\t\t\t\t\tname: name,\r\n\t\t\t\t\t\tvalue: value\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (_.find(this.attributeList(), function(attr) {\r\n\t\t\t\treturn attr.name == name;\r\n\t\t\t}) || {}).value;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns reference to the matched <code>element</code>, if any.\r\n\t\t * See {@link elements} module for a list of available elements\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tmatchedResource: function() {\r\n\t\t\treturn this.data('resource');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns index of current node in parent‘s children list\r\n\t\t * @returns {Number}\r\n\t\t */\r\n\t\tindex: function() {\r\n\t\t\treturn this.parent ? _.indexOf(this.parent.children, this) : -1;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Sets how many times current element should be repeated\r\n\t\t * @private\r\n\t\t */\r\n\t\t_setRepeat: function(count) {\r\n\t\t\tif (count) {\r\n\t\t\t\tthis.repeatCount = parseInt(count, 10) || 1;\r\n\t\t\t} else {\r\n\t\t\t\tthis.hasImplicitRepeat = true;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Sets abbreviation that belongs to current node\r\n\t\t * @param {String} abbr\r\n\t\t */\r\n\t\tsetAbbreviation: function(abbr) {\r\n\t\t\tabbr = abbr || '';\r\n\t\t\t\r\n\t\t\tvar that = this;\r\n\t\t\t\r\n\t\t\t// find multiplier\r\n\t\t\tabbr = abbr.replace(/\\*(\\d+)?$/, function(str, repeatCount) {\r\n\t\t\t\tthat._setRepeat(repeatCount);\r\n\t\t\t\treturn '';\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tthis.abbreviation = abbr;\r\n\t\t\t\r\n\t\t\tvar abbrText = extractText(abbr);\r\n\t\t\tif (abbrText) {\r\n\t\t\t\tabbr = abbrText.element;\r\n\t\t\t\tthis.content = this._text = abbrText.text;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar abbrAttrs = parseAttributes(abbr);\r\n\t\t\tif (abbrAttrs) {\r\n\t\t\t\tabbr = abbrAttrs.element;\r\n\t\t\t\tthis._attributes = abbrAttrs.attributes;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._name = abbr;\r\n\t\t\t\r\n\t\t\t// validate name\r\n\t\t\tif (this._name && !reValidName.test(this._name)) {\r\n\t\t\t\tthrow 'Invalid abbreviation';\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns string representation of current node\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\ttoString: function() {\r\n\t\t\tvar utils = require('utils');\r\n\t\t\t\r\n\t\t\tvar start = this.start;\r\n\t\t\tvar end = this.end;\r\n\t\t\tvar content = this.content;\r\n\t\t\t\r\n\t\t\t// apply output processors\r\n\t\t\tvar node = this;\r\n\t\t\t_.each(outputProcessors, function(fn) {\r\n\t\t\t\tstart = fn(start, node, 'start');\r\n\t\t\t\tcontent = fn(content, node, 'content');\r\n\t\t\t\tend = fn(end, node, 'end');\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tvar innerContent = _.map(this.children, function(child) {\r\n\t\t\t\treturn child.toString();\r\n\t\t\t}).join('');\r\n\t\t\t\r\n\t\t\tcontent = require('abbreviationUtils').insertChildContent(content, innerContent, {\r\n\t\t\t\tkeepVariable: false\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn start + utils.padString(content, this.padding) + end;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if current node contains children with empty <code>expr</code>\r\n\t\t * property\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\thasEmptyChildren: function() {\r\n\t\t\treturn !!_.find(this.children, function(child) {\r\n\t\t\t\treturn child.isEmpty();\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if current node has implied name that should be resolved\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\thasImplicitName: function() {\r\n\t\t\treturn !this._name && !this.isTextNode();\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Indicates that current element is a grouping one, e.g. has no \r\n\t\t * representation but serves as a container for other nodes\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisGroup: function() {\r\n\t\t\treturn !this.abbreviation;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Indicates empty node (i.e. without abbreviation). It may be a \r\n\t\t * grouping node and should not be outputted\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tisEmpty: function() {\r\n\t\t\treturn !this.abbreviation && !this.children.length;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Indicates that current node should be repeated\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisRepeating: function() {\r\n\t\t\treturn this.repeatCount > 1 || this.hasImplicitRepeat;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if current node is a text-only node\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tisTextNode: function() {\r\n\t\t\treturn !this.name() && !this.attributeList().length;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Indicates whether this node may be used to build elements or snippets\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisElement: function() {\r\n\t\t\treturn !this.isEmpty() && !this.isTextNode();\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns latest and deepest child of current tree\r\n\t\t * @returns {AbbreviationNode}\r\n\t\t */\r\n\t\tdeepestChild: function() {\r\n\t\t\tif (!this.children.length)\r\n\t\t\t\treturn null;\r\n\t\t\t\t\r\n\t\t\tvar deepestChild = this;\r\n\t\t\twhile (deepestChild.children.length) {\r\n\t\t\t\tdeepestChild = _.last(deepestChild.children);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn deepestChild;\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * Returns stripped string: a string without first and last character.\r\n\t * Used for “unquoting” strings\r\n\t * @param {String} str\r\n\t * @returns {String}\r\n\t */\r\n\tfunction stripped(str) {\r\n\t\treturn str.substring(1, str.length - 1);\r\n\t}\r\n\t\r\n\tfunction consumeQuotedValue(stream, quote) {\r\n\t\tvar ch;\r\n\t\twhile (ch = stream.next()) {\r\n\t\t\tif (ch === quote)\r\n\t\t\t\treturn true;\r\n\t\t\t\r\n\t\t\tif (ch == '\\\\')\r\n\t\t\t\tcontinue;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parses abbreviation into a tree\r\n\t * @param {String} abbr\r\n\t * @returns {AbbreviationNode}\r\n\t */\r\n\tfunction parseAbbreviation(abbr) {\r\n\t\tabbr = require('utils').trim(abbr);\r\n\t\t\r\n\t\tvar root = new AbbreviationNode;\r\n\t\tvar context = root.addChild(), ch;\r\n\t\t\r\n\t\t/** @type StringStream */\r\n\t\tvar stream = require('stringStream').create(abbr);\r\n\t\tvar loopProtector = 1000, multiplier;\r\n\t\t\r\n\t\twhile (!stream.eol() && --loopProtector > 0) {\r\n\t\t\tch = stream.peek();\r\n\t\t\t\r\n\t\t\tswitch (ch) {\r\n\t\t\t\tcase '(': // abbreviation group\r\n\t\t\t\t\tstream.start = stream.pos;\r\n\t\t\t\t\tif (stream.skipToPair('(', ')')) {\r\n\t\t\t\t\t\tvar inner = parseAbbreviation(stripped(stream.current()));\r\n\t\t\t\t\t\tif (multiplier = stream.match(/^\\*(\\d+)?/, true)) {\r\n\t\t\t\t\t\t\tcontext._setRepeat(multiplier[1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t_.each(inner.children, function(child) {\r\n\t\t\t\t\t\t\tcontext.addChild(child);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow 'Invalid abbreviation: mo matching \")\" found for character at ' + stream.pos;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tcase '>': // child operator\r\n\t\t\t\t\tcontext = context.addChild();\r\n\t\t\t\t\tstream.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tcase '+': // sibling operator\r\n\t\t\t\t\tcontext = context.parent.addChild();\r\n\t\t\t\t\tstream.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tcase '^': // climb up operator\r\n\t\t\t\t\tvar parent = context.parent || context;\r\n\t\t\t\t\tcontext = (parent.parent || parent).addChild();\r\n\t\t\t\t\tstream.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tdefault: // consume abbreviation\r\n\t\t\t\t\tstream.start = stream.pos;\r\n\t\t\t\t\tstream.eatWhile(function(c) {\r\n\t\t\t\t\t\tif (c == '[' || c == '{') {\r\n\t\t\t\t\t\t\tif (stream.skipToPair(c, pairs[c])) {\r\n\t\t\t\t\t\t\t\tstream.backUp(1);\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tthrow 'Invalid abbreviation: mo matching \"' + pairs[c] + '\" found for character at ' + stream.pos;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (c == '+') {\r\n\t\t\t\t\t\t\t// let's see if this is an expando marker\r\n\t\t\t\t\t\t\tstream.next();\r\n\t\t\t\t\t\t\tvar isMarker = stream.eol() ||  ~'+>^*'.indexOf(stream.peek());\r\n\t\t\t\t\t\t\tstream.backUp(1);\r\n\t\t\t\t\t\t\treturn isMarker;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn c != '(' && isAllowedChar(c);\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tcontext.setAbbreviation(stream.current());\r\n\t\t\t\t\tstream.start = stream.pos;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (loopProtector < 1)\r\n\t\t\tthrow 'Endless loop detected';\r\n\t\t\r\n\t\treturn root;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Extract attributes and their values from attribute set: \r\n\t * <code>[attr col=3 title=\"Quoted string\"]</code>\r\n\t * @param {String} attrSet\r\n\t * @returns {Array}\r\n\t */\r\n\tfunction extractAttributes(attrSet, attrs) {\r\n\t\tattrSet = require('utils').trim(attrSet);\r\n\t\tvar result = [];\r\n\t\t\r\n\t\t/** @type StringStream */\r\n\t\tvar stream = require('stringStream').create(attrSet);\r\n\t\tstream.eatSpace();\r\n\t\t\r\n\t\twhile (!stream.eol()) {\r\n\t\t\tstream.start = stream.pos;\r\n\t\t\tif (stream.eatWhile(reWord)) {\r\n\t\t\t\tvar attrName = stream.current();\r\n\t\t\t\tvar attrValue = '';\r\n\t\t\t\tif (stream.peek() == '=') {\r\n\t\t\t\t\tstream.next();\r\n\t\t\t\t\tstream.start = stream.pos;\r\n\t\t\t\t\tvar quote = stream.peek();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (quote == '\"' || quote == \"'\") {\r\n\t\t\t\t\t\tstream.next();\r\n\t\t\t\t\t\tif (consumeQuotedValue(stream, quote)) {\r\n\t\t\t\t\t\t\tattrValue = stream.current();\r\n\t\t\t\t\t\t\t// strip quotes\r\n\t\t\t\t\t\t\tattrValue = attrValue.substring(1, attrValue.length - 1);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow 'Invalid attribute value';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (stream.eatWhile(/[^\\s\\]]/)) {\r\n\t\t\t\t\t\tattrValue = stream.current();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow 'Invalid attribute value';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tresult.push({\r\n\t\t\t\t\tname: attrName, \r\n\t\t\t\t\tvalue: attrValue\r\n\t\t\t\t});\r\n\t\t\t\tstream.eatSpace();\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parses tag attributes extracted from abbreviation. If attributes found, \r\n\t * returns object with <code>element</code> and <code>attributes</code>\r\n\t * properties\r\n\t * @param {String} abbr\r\n\t * @returns {Object} Returns <code>null</code> if no attributes found in \r\n\t * abbreviation\r\n\t */\r\n\tfunction parseAttributes(abbr) {\r\n\t\t/*\r\n\t\t * Example of incoming data:\r\n\t\t * #header\r\n\t\t * .some.data\r\n\t\t * .some.data#header\r\n\t\t * [attr]\r\n\t\t * #item[attr=Hello other=\"World\"].class\r\n\t\t */\r\n\t\tvar result = [];\r\n\t\tvar attrMap = {'#': 'id', '.': 'class'};\r\n\t\tvar nameEnd = null;\r\n\t\t\r\n\t\t/** @type StringStream */\r\n\t\tvar stream = require('stringStream').create(abbr);\r\n\t\twhile (!stream.eol()) {\r\n\t\t\tswitch (stream.peek()) {\r\n\t\t\t\tcase '#': // id\r\n\t\t\t\tcase '.': // class\r\n\t\t\t\t\tif (nameEnd === null)\r\n\t\t\t\t\t\tnameEnd = stream.pos;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar attrName = attrMap[stream.peek()];\r\n\t\t\t\t\t\r\n\t\t\t\t\tstream.next();\r\n\t\t\t\t\tstream.start = stream.pos;\r\n\t\t\t\t\tstream.eatWhile(reWord);\r\n\t\t\t\t\tresult.push({\r\n\t\t\t\t\t\tname: attrName, \r\n\t\t\t\t\t\tvalue: stream.current()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '[': //begin attribute set\r\n\t\t\t\t\tif (nameEnd === null)\r\n\t\t\t\t\t\tnameEnd = stream.pos;\r\n\t\t\t\t\t\r\n\t\t\t\t\tstream.start = stream.pos;\r\n\t\t\t\t\tif (!stream.skipToPair('[', ']')) \r\n\t\t\t\t\t\tthrow 'Invalid attribute set definition';\r\n\t\t\t\t\t\r\n\t\t\t\t\tresult = result.concat(\r\n\t\t\t\t\t\textractAttributes(stripped(stream.current()))\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tstream.next();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (!result.length)\r\n\t\t\treturn null;\r\n\t\t\r\n\t\treturn {\r\n\t\t\telement: abbr.substring(0, nameEnd),\r\n\t\t\tattributes: optimizeAttributes(result)\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**\r\n\t * Optimize attribute set: remove duplicates and merge class attributes\r\n\t * @param attrs\r\n\t */\r\n\tfunction optimizeAttributes(attrs) {\r\n\t\t// clone all attributes to make sure that original objects are \r\n\t\t// not modified\r\n\t\tattrs  = _.map(attrs, function(attr) {\r\n\t\t\treturn _.clone(attr);\r\n\t\t});\r\n\t\t\r\n\t\tvar lookup = {};\r\n\t\treturn _.filter(attrs, function(attr) {\r\n\t\t\tif (!(attr.name in lookup)) {\r\n\t\t\t\treturn lookup[attr.name] = attr;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar la = lookup[attr.name];\r\n\t\t\t\r\n\t\t\tif (attr.name.toLowerCase() == 'class') {\r\n\t\t\t\tla.value += (la.value.length ? ' ' : '') + attr.value;\r\n\t\t\t} else {\r\n\t\t\t\tla.value = attr.value;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Extract text data from abbreviation: if <code>a{hello}</code> abbreviation\r\n\t * is passed, returns object <code>{element: 'a', text: 'hello'}</code>.\r\n\t * If nothing found, returns <code>null</code>\r\n\t * @param {String} abbr\r\n\t * \r\n\t */\r\n\tfunction extractText(abbr) {\r\n\t\tif (!~abbr.indexOf('{'))\r\n\t\t\treturn null;\r\n\t\t\r\n\t\t/** @type StringStream */\r\n\t\tvar stream = require('stringStream').create(abbr);\r\n\t\twhile (!stream.eol()) {\r\n\t\t\tswitch (stream.peek()) {\r\n\t\t\t\tcase '[':\r\n\t\t\t\tcase '(':\r\n\t\t\t\t\tstream.skipToPair(stream.peek(), pairs[stream.peek()]); break;\r\n\t\t\t\t\t\r\n\t\t\t\tcase '{':\r\n\t\t\t\t\tstream.start = stream.pos;\r\n\t\t\t\t\tstream.skipToPair('{', '}');\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\telement: abbr.substring(0, stream.start),\r\n\t\t\t\t\t\ttext: stripped(stream.current())\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tstream.next();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * “Un-rolls“ contents of current node: recursively replaces all repeating \r\n\t * children with their repeated clones\r\n\t * @param {AbbreviationNode} node\r\n\t * @returns {AbbreviationNode}\r\n\t */\r\n\tfunction unroll(node) {\r\n\t\tfor (var i = node.children.length - 1, j, child, maxCount; i >= 0; i--) {\r\n\t\t\tchild = node.children[i];\r\n\t\t\t\r\n\t\t\tif (child.isRepeating()) {\r\n\t\t\t\tmaxCount = j = child.repeatCount;\r\n\t\t\t\tchild.repeatCount = 1;\r\n\t\t\t\tchild.updateProperty('counter', 1);\r\n\t\t\t\tchild.updateProperty('maxCount', maxCount);\r\n\t\t\t\twhile (--j > 0) {\r\n\t\t\t\t\tchild.parent.addChild(child.clone(), i + 1)\r\n\t\t\t\t\t\t.updateProperty('counter', j + 1)\r\n\t\t\t\t\t\t.updateProperty('maxCount', maxCount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// to keep proper 'counter' property, we need to walk\r\n\t\t// on children once again\r\n\t\t_.each(node.children, unroll);\r\n\t\t\r\n\t\treturn node;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Optimizes tree node: replaces empty nodes with their children\r\n\t * @param {AbbreviationNode} node\r\n\t * @return {AbbreviationNode}\r\n\t */\r\n\tfunction squash(node) {\r\n\t\tfor (var i = node.children.length - 1; i >= 0; i--) {\r\n\t\t\t/** @type AbbreviationNode */\r\n\t\t\tvar n = node.children[i];\r\n\t\t\tif (n.isGroup()) {\r\n\t\t\t\tn.replace(squash(n).children);\r\n\t\t\t} else if (n.isEmpty()) {\r\n\t\t\t\tn.remove();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t_.each(node.children, squash);\r\n\t\t\r\n\t\treturn node;\r\n\t}\r\n\t\r\n\tfunction isAllowedChar(ch) {\r\n\t\tvar charCode = ch.charCodeAt(0);\r\n\t\tvar specialChars = '#.*:$-_!@|%';\r\n\t\t\r\n\t\treturn (charCode > 64 && charCode < 91)       // uppercase letter\r\n\t\t\t\t|| (charCode > 96 && charCode < 123)  // lowercase letter\r\n\t\t\t\t|| (charCode > 47 && charCode < 58)   // number\r\n\t\t\t\t|| specialChars.indexOf(ch) != -1;    // special character\r\n\t}\r\n\t\r\n\t// XXX add counter replacer function as output processor\r\n\toutputProcessors.push(function(text, node) {\r\n\t\treturn require('utils').replaceCounter(text, node.counter, node.maxCount);\r\n\t});\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Parses abbreviation into tree with respect of groups, \r\n\t\t * text nodes and attributes. Each node of the tree is a single \r\n\t\t * abbreviation. Tree represents actual structure of the outputted \r\n\t\t * result\r\n\t\t * @memberOf abbreviationParser\r\n\t\t * @param {String} abbr Abbreviation to parse\r\n\t\t * @param {Object} options Additional options for parser and processors\r\n\t\t * \r\n\t\t * @return {AbbreviationNode}\r\n\t\t */\r\n\t\tparse: function(abbr, options) {\r\n\t\t\toptions = options || {};\r\n\t\t\t\r\n\t\t\tvar tree = parseAbbreviation(abbr);\r\n\t\t\t\r\n\t\t\tif (options.contextNode) {\r\n\t\t\t\t// add info about context node –\r\n\t\t\t\t// a parent XHTML node in editor inside which abbreviation is \r\n\t\t\t\t// expanded\r\n\t\t\t\ttree._name = options.contextNode.name;\r\n\t\t\t\tvar attrLookup = {};\r\n\t\t\t\t_.each(tree._attributes, function(attr) {\r\n\t\t\t\t\tattrLookup[attr.name] = attr;\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t_.each(options.contextNode.attributes, function(attr) {\r\n\t\t\t\t\tif (attr.name in attrLookup) {\r\n\t\t\t\t\t\tattrLookup[attr.name].value = attr.value;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tattr = _.clone(attr);\r\n\t\t\t\t\t\ttree._attributes.push(attr);\r\n\t\t\t\t\t\tattrLookup[attr.name] = attr;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// apply preprocessors\r\n\t\t\t_.each(preprocessors, function(fn) {\r\n\t\t\t\tfn(tree, options);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\ttree = squash(unroll(tree));\r\n\t\t\t\r\n\t\t\t// apply postprocessors\r\n\t\t\t_.each(postprocessors, function(fn) {\r\n\t\t\t\tfn(tree, options);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn tree;\r\n\t\t},\r\n\t\t\r\n\t\tAbbreviationNode: AbbreviationNode,\r\n\t\t\r\n\t\t/**\r\n\t\t * Add new abbreviation preprocessor. <i>Preprocessor</i> is a function\r\n\t\t * that applies to a parsed abbreviation tree right after it get parsed.\r\n\t\t * The passed tree is in unoptimized state.\r\n\t\t * @param {Function} fn Preprocessor function. This function receives\r\n\t\t * two arguments: parsed abbreviation tree (<code>AbbreviationNode</code>)\r\n\t\t * and <code>options</code> hash that was passed to <code>parse</code>\r\n\t\t * method\r\n\t\t */\r\n\t\taddPreprocessor: function(fn) {\r\n\t\t\tif (!_.include(preprocessors, fn))\r\n\t\t\t\tpreprocessors.push(fn);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes registered preprocessor\r\n\t\t */\r\n\t\tremoveFilter: function(fn) {\r\n\t\t\tpreprocessor = _.without(preprocessors, fn);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Adds new abbreviation postprocessor. <i>Postprocessor</i> is a \r\n\t\t * functinon that applies to <i>optimized</i> parsed abbreviation tree\r\n\t\t * right before it returns from <code>parse()</code> method\r\n\t\t * @param {Function} fn Postprocessor function. This function receives\r\n\t\t * two arguments: parsed abbreviation tree (<code>AbbreviationNode</code>)\r\n\t\t * and <code>options</code> hash that was passed to <code>parse</code>\r\n\t\t * method\r\n\t\t */\r\n\t\taddPostprocessor: function(fn) {\r\n\t\t\tif (!_.include(postprocessors, fn))\r\n\t\t\t\tpostprocessors.push(fn);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes registered postprocessor function\r\n\t\t */\r\n\t\tremovePostprocessor: function(fn) {\r\n\t\t\tpostprocessors = _.without(postprocessors, fn);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Registers output postprocessor. <i>Output processor</i> is a \r\n\t\t * function that applies to output part (<code>start</code>, \r\n\t\t * <code>end</code> and <code>content</code>) when \r\n\t\t * <code>AbbreviationNode.toString()</code> method is called\r\n\t\t */\r\n\t\taddOutputProcessor: function(fn) {\r\n\t\t\tif (!_.include(outputProcessors, fn))\r\n\t\t\t\toutputProcessors.push(fn);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes registered output processor\r\n\t\t */\r\n\t\tremoveOutputProcessor: function(fn) {\r\n\t\t\toutputProcessors = _.without(outputProcessors, fn);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if passed symbol is valid symbol for abbreviation expression\r\n\t\t * @param {String} ch\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tisAllowedChar: function(ch) {\r\n\t\t\tch = String(ch); // convert Java object to JS\r\n\t\t\treturn isAllowedChar(ch) || ~'>+^[](){}'.indexOf(ch);\r\n\t\t}\r\n\t};\r\n});/**\r\n * Processor function that matches parsed <code>AbbreviationNode</code>\r\n * against resources defined in <code>resource</code> module\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */ \r\nemmet.exec(function(require, _) {\r\n\t/**\r\n\t * Finds matched resources for child nodes of passed <code>node</code> \r\n\t * element. A matched resource is a reference to <i>snippets.json</i> entry\r\n\t * that describes output of parsed node \r\n\t * @param {AbbreviationNode} node\r\n\t * @param {String} syntax\r\n\t */\r\n\tfunction matchResources(node, syntax) {\r\n\t\tvar resources = require('resources');\r\n\t\tvar elements = require('elements');\r\n\t\tvar parser = require('abbreviationParser');\r\n\t\t\r\n\t\t// do a shallow copy because the children list can be modified during\r\n\t\t// resource matching\r\n\t\t_.each(_.clone(node.children), /** @param {AbbreviationNode} child */ function(child) {\r\n\t\t\tvar r = resources.getMatchedResource(child, syntax);\r\n\t\t\tif (_.isString(r)) {\r\n\t\t\t\tchild.data('resource', elements.create('snippet', r));\r\n\t\t\t} else if (elements.is(r, 'reference')) {\r\n\t\t\t\t// it’s a reference to another abbreviation:\r\n\t\t\t\t// parse it and insert instead of current child\r\n\t\t\t\t/** @type AbbreviationNode */\r\n\t\t\t\tvar subtree = parser.parse(r.data, {\r\n\t\t\t\t\tsyntax: syntax\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t// if context element should be repeated, check if we need to \r\n\t\t\t\t// transfer repeated element to specific child node\r\n\t\t\t\tif (child.repeatCount > 1) {\r\n\t\t\t\t\tvar repeatedChildren = subtree.findAll(function(node) {\r\n\t\t\t\t\t\treturn node.hasImplicitRepeat;\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\t_.each(repeatedChildren, function(node) {\r\n\t\t\t\t\t\tnode.repeatCount = child.repeatCount;\r\n\t\t\t\t\t\tnode.hasImplicitRepeat = false;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// move child‘s children into the deepest child of new subtree\r\n\t\t\t\tvar deepestChild = subtree.deepestChild();\r\n\t\t\t\tif (deepestChild) {\r\n\t\t\t\t\t_.each(child.children, function(c) {\r\n\t\t\t\t\t\tdeepestChild.addChild(c);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// copy current attributes to children\r\n\t\t\t\t_.each(subtree.children, function(node) {\r\n\t\t\t\t\t_.each(child.attributeList(), function(attr) {\r\n\t\t\t\t\t\tnode.attribute(attr.name, attr.value);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tchild.replace(subtree.children);\r\n\t\t\t} else {\r\n\t\t\t\tchild.data('resource', r);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmatchResources(child, syntax);\r\n\t\t});\r\n\t}\r\n\t\r\n\t// XXX register abbreviation filter that creates references to resources\r\n\t// on abbreviation nodes\r\n\t/**\r\n\t * @param {AbbreviationNode} tree\r\n\t */\r\n\trequire('abbreviationParser').addPreprocessor(function(tree, options) {\r\n\t\tvar syntax = options.syntax || emmet.defaultSyntax();\r\n\t\tmatchResources(tree, syntax);\r\n\t});\r\n\t\r\n});/**\r\n * Pasted content abbreviation processor. A pasted content is a content that\r\n * should be inserted into implicitly repeated abbreviation nodes.\r\n * This processor powers “Wrap With Abbreviation” action\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\tvar parser = require('abbreviationParser');\r\n\tvar outputPlaceholder = '$#';\r\n\t\r\n\t/**\r\n\t * Locates output placeholders inside text\r\n\t * @param {String} text\r\n\t * @returns {Array} Array of ranges of output placeholder in text\r\n\t */\r\n\tfunction locateOutputPlaceholder(text) {\r\n\t\tvar range = require('range');\r\n\t\tvar result = [];\r\n\t\t\r\n\t\t/** @type StringStream */\r\n\t\tvar stream = require('stringStream').create(text);\r\n\t\t\r\n\t\twhile (!stream.eol()) {\r\n\t\t\tif (stream.peek() == '\\\\') {\r\n\t\t\t\tstream.next();\r\n\t\t\t} else {\r\n\t\t\t\tstream.start = stream.pos;\r\n\t\t\t\tif (stream.match(outputPlaceholder, true)) {\r\n\t\t\t\t\tresult.push(range.create(stream.start, outputPlaceholder));\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstream.next();\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Replaces output placeholders inside <code>source</code> with \r\n\t * <code>value</code>\r\n\t * @param {String} source\r\n\t * @param {String} value\r\n\t * @returns {String}\r\n\t */\r\n\tfunction replaceOutputPlaceholders(source, value) {\r\n\t\tvar utils = require('utils');\r\n\t\tvar ranges = locateOutputPlaceholder(source);\r\n\t\t\r\n\t\tranges.reverse();\r\n\t\t_.each(ranges, function(r) {\r\n\t\t\tsource = utils.replaceSubstring(source, value, r);\r\n\t\t});\r\n\t\t\r\n\t\treturn source;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if parsed node contains output placeholder – a target where\r\n\t * pasted content should be inserted\r\n\t * @param {AbbreviationNode} node\r\n\t * @returns {Boolean}\r\n\t */\r\n\tfunction hasOutputPlaceholder(node) {\r\n\t\tif (locateOutputPlaceholder(node.content).length)\r\n\t\t\treturn true;\r\n\t\t\r\n\t\t// check if attributes contains placeholder\r\n\t\treturn !!_.find(node.attributeList(), function(attr) {\r\n\t\t\treturn !!locateOutputPlaceholder(attr.value).length;\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Insert pasted content into correct positions of parsed node\r\n\t * @param {AbbreviationNode} node\r\n\t * @param {String} content\r\n\t * @param {Boolean} overwrite Overwrite node content if no value placeholders\r\n\t * found instead of appending to existing content\r\n\t */\r\n\tfunction insertPastedContent(node, content, overwrite) {\r\n\t\tvar nodesWithPlaceholders = node.findAll(function(item) {\r\n\t\t\treturn hasOutputPlaceholder(item);\r\n\t\t});\r\n\t\t\r\n\t\tif (hasOutputPlaceholder(node))\r\n\t\t\tnodesWithPlaceholders.unshift(node);\r\n\t\t\r\n\t\tif (nodesWithPlaceholders.length) {\r\n\t\t\t_.each(nodesWithPlaceholders, function(item) {\r\n\t\t\t\titem.content = replaceOutputPlaceholders(item.content, content);\r\n\t\t\t\t_.each(item._attributes, function(attr) {\r\n\t\t\t\t\tattr.value = replaceOutputPlaceholders(attr.value, content);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// on output placeholders in subtree, insert content in the deepest\r\n\t\t\t// child node\r\n\t\t\tvar deepest = node.deepestChild() || node;\r\n\t\t\tif (overwrite) {\r\n\t\t\t\tdeepest.content = content;\r\n\t\t\t} else {\r\n\t\t\t\tdeepest.content = require('abbreviationUtils').insertChildContent(deepest.content, content);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {AbbreviationNode} tree\r\n\t * @param {Object} options\r\n\t */\r\n\tparser.addPreprocessor(function(tree, options) {\r\n\t\tif (options.pastedContent) {\r\n\t\t\tvar utils = require('utils');\r\n\t\t\tvar lines = _.map(utils.splitByLines(options.pastedContent, true), utils.trim);\r\n\t\t\t\r\n\t\t\t// set repeat count for implicitly repeated elements before\r\n\t\t\t// tree is unrolled\r\n\t\t\ttree.findAll(function(item) {\r\n\t\t\t\tif (item.hasImplicitRepeat) {\r\n\t\t\t\t\titem.data('paste', lines);\r\n\t\t\t\t\treturn item.repeatCount = lines.length;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\t\r\n\t/**\r\n\t * @param {AbbreviationNode} tree\r\n\t * @param {Object} options\r\n\t */\r\n\tparser.addPostprocessor(function(tree, options) {\r\n\t\t// for each node with pasted content, update text data\r\n\t\tvar targets = tree.findAll(function(item) {\r\n\t\t\tvar pastedContentObj = item.data('paste');\r\n\t\t\tvar pastedContent = '';\r\n\t\t\tif (_.isArray(pastedContentObj)) {\r\n\t\t\t\tpastedContent = pastedContentObj[item.counter - 1];\r\n\t\t\t} else if (_.isFunction(pastedContentObj)) {\r\n\t\t\t\tpastedContent = pastedContentObj(item.counter - 1, item.content);\r\n\t\t\t} else if (pastedContentObj) {\r\n\t\t\t\tpastedContent = pastedContentObj;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (pastedContent) {\r\n\t\t\t\tinsertPastedContent(item, pastedContent, !!item.data('pasteOverwrites'));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\titem.data('paste', null);\r\n\t\t\treturn !!pastedContentObj;\r\n\t\t});\r\n\t\t\r\n\t\tif (!targets.length && options.pastedContent) {\r\n\t\t\t// no implicitly repeated elements, put pasted content in\r\n\t\t\t// the deepest child\r\n\t\t\tinsertPastedContent(tree, options.pastedContent);\r\n\t\t}\r\n\t});\r\n});/**\r\n * Resolves tag names in abbreviations with implied name\r\n */\r\nemmet.exec(function(require, _) {\r\n\t/**\r\n\t * Resolves implicit node names in parsed tree\r\n\t * @param {AbbreviationNode} tree\r\n\t */\r\n\tfunction resolveNodeNames(tree) {\r\n\t\tvar tagName = require('tagName');\r\n\t\t_.each(tree.children, function(node) {\r\n\t\t\tif (node.hasImplicitName() || node.data('forceNameResolving')) {\r\n\t\t\t\tnode._name = tagName.resolve(node.parent.name());\r\n\t\t\t}\r\n\t\t\tresolveNodeNames(node);\r\n\t\t});\r\n\t\t\r\n\t\treturn tree;\r\n\t}\r\n\t\r\n\trequire('abbreviationParser').addPostprocessor(resolveNodeNames);\r\n});/**\r\n * @author Stoyan Stefanov\r\n * @link https://github.com/stoyan/etc/tree/master/cssex\r\n */\r\n\r\nemmet.define('cssParser', function(require, _) {\r\nvar walker, tokens = [], isOp, isNameChar, isDigit;\r\n    \r\n    // walks around the source\r\n    walker = {\r\n        lines: null,\r\n        total_lines: 0,\r\n        linenum: -1,\r\n        line: '',\r\n        ch: '',\r\n        chnum: -1,\r\n        init: function (source) {\r\n            var me = walker;\r\n        \r\n            // source, yumm\r\n            me.lines = source\r\n                .replace(/\\r\\n/g, '\\n')\r\n                .replace(/\\r/g, '\\n')\r\n                .split('\\n');\r\n            me.total_lines = me.lines.length;\r\n        \r\n            // reset\r\n            me.chnum = -1;\r\n            me.linenum = -1;\r\n            me.ch = '';\r\n            me.line = '';\r\n        \r\n            // advance\r\n            me.nextLine();\r\n            me.nextChar();\r\n        },\r\n        nextLine: function () {\r\n            var me = this;\r\n            me.linenum += 1;\r\n            if (me.total_lines <= me.linenum) {\r\n                me.line = false;\r\n            } else {\r\n                me.line = me.lines[me.linenum];\r\n            }\r\n            if (me.chnum !== -1) {\r\n                me.chnum = 0;\r\n            }\r\n            return me.line;\r\n        }, \r\n        nextChar: function () {\r\n            var me = this;\r\n            me.chnum += 1;\r\n            while (me.line.charAt(me.chnum) === '') {\r\n                if (this.nextLine() === false) {\r\n                    me.ch = false;\r\n                    return false; // end of source\r\n                }\r\n                me.chnum = -1;\r\n                me.ch = '\\n';\r\n                return '\\n';\r\n            }\r\n            me.ch = me.line.charAt(me.chnum);\r\n            return me.ch;\r\n        },\r\n        peek: function() {\r\n            return this.line.charAt(this.chnum + 1);\r\n        }\r\n    };\r\n\r\n    // utility helpers\r\n    isNameChar = function (c) {\r\n    \t// be more tolerate for name tokens: allow & character for LESS syntax\r\n        return (c == '&' || c === '_' || c === '-' || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));\r\n    };\r\n\r\n    isDigit = function (ch) {\r\n        return (ch !== false && ch >= '0' && ch <= '9');\r\n    };  \r\n\r\n    isOp = (function () {\r\n        var opsa = \"{}[]()+*=.,;:>~|\\\\%$#@^!\".split(''),\r\n            opsmatcha = \"*^|$~\".split(''),\r\n            ops = {},\r\n            opsmatch = {},\r\n            i = 0;\r\n        for (; i < opsa.length; i += 1) {\r\n            ops[opsa[i]] = true;\r\n        }\r\n        for (i = 0; i < opsmatcha.length; i += 1) {\r\n            opsmatch[opsmatcha[i]] = true;\r\n        }\r\n        return function (ch, matchattr) {\r\n            if (matchattr) {\r\n                return !!opsmatch[ch];\r\n            }\r\n            return !!ops[ch];\r\n        };\r\n    }());\r\n    \r\n    // shorthands\r\n    function isset(v) {\r\n        return typeof v !== 'undefined';\r\n    }\r\n    function getConf() {\r\n        return {\r\n            'char': walker.chnum,\r\n            line: walker.linenum\r\n        };\r\n    }\r\n\r\n\r\n    // creates token objects and pushes them to a list\r\n    function tokener(value, type, conf) {\r\n        var w = walker, c = conf || {};\r\n        tokens.push({\r\n            charstart: isset(c['char']) ? c['char'] : w.chnum,\r\n            charend:   isset(c.charend) ? c.charend : w.chnum,\r\n            linestart: isset(c.line)    ? c.line    : w.linenum,\r\n            lineend:   isset(c.lineend) ? c.lineend : w.linenum,\r\n            value:     value,\r\n            type:      type || value\r\n        });\r\n    }\r\n    \r\n    // oops\r\n    function error(m, config) { \r\n        var w = walker,\r\n            conf = config || {},\r\n            c = isset(conf['char']) ? conf['char'] : w.chnum,\r\n            l = isset(conf.line) ? conf.line : w.linenum;\r\n        return {\r\n            name: \"ParseError\",\r\n            message: m + \" at line \" + (l + 1) + ' char ' + (c + 1),\r\n            walker: w,\r\n            tokens: tokens\r\n        };\r\n    }\r\n\r\n\r\n    // token handlers follow for:\r\n    // white space, comment, string, identifier, number, operator\r\n    function white() {\r\n    \r\n        var c = walker.ch,\r\n            token = '',\r\n            conf = getConf();\r\n    \r\n        while (c === \" \" || c === \"\\t\") {\r\n            token += c;\r\n            c = walker.nextChar();\r\n        }\r\n    \r\n        tokener(token, 'white', conf);\r\n    \r\n    }\r\n\r\n    function comment() {\r\n    \r\n        var w = walker,\r\n            c = w.ch,\r\n            token = c,\r\n            cnext,\r\n            conf = getConf();    \r\n     \r\n        cnext = w.nextChar();\r\n\r\n        if (cnext === '/') {\r\n            // inline comment in SCSS and such\r\n            token += cnext;\r\n            var pk = w.peek();\r\n            while (pk && pk !== '\\n') {\r\n                token += cnext;\r\n                cnext = w.nextChar();\r\n                pk = w.peek();\r\n            }\r\n        } else if (cnext === '*') {\r\n            // multiline CSS commment\r\n            while (!(c === \"*\" && cnext === \"/\")) {\r\n                token += cnext;\r\n                c = cnext;\r\n                cnext = w.nextChar();        \r\n            }            \r\n        } else {\r\n            // oops, not a comment, just a /\r\n            conf.charend = conf['char'];\r\n            conf.lineend = conf.line;\r\n            return tokener(token, token, conf);\r\n        }\r\n        \r\n        token += cnext;\r\n        w.nextChar();\r\n        tokener(token, 'comment', conf);\r\n    }\r\n\r\n    function str() {\r\n        var w = walker,\r\n            c = w.ch,\r\n            q = c,\r\n            token = c,\r\n            cnext,\r\n            conf = getConf();\r\n    \r\n        c = w.nextChar();\r\n    \r\n        while (c !== q) {\r\n            \r\n            if (c === '\\n') {\r\n                cnext = w.nextChar();\r\n                if (cnext === \"\\\\\") {\r\n                    token += c + cnext;\r\n                } else {\r\n                    // end of line with no \\ escape = bad\r\n                    throw error(\"Unterminated string\", conf);\r\n                }\r\n            } else {\r\n                if (c === \"\\\\\") {\r\n                    token += c + w.nextChar();\r\n                } else {\r\n                    token += c;\r\n                }\r\n            }\r\n        \r\n            c = w.nextChar();\r\n        \r\n        }\r\n        token += c;\r\n        w.nextChar();\r\n        tokener(token, 'string', conf);\r\n    }\r\n    \r\n    function brace() {\r\n        var w = walker,\r\n            c = w.ch,\r\n            depth = 0,\r\n            token = c,\r\n            conf = getConf();\r\n    \r\n        c = w.nextChar();\r\n    \r\n        while (c !== ')' && !depth) {\r\n        \tif (c === '(') {\r\n        \t\tdepth++;\r\n        \t} else if (c === ')') {\r\n        \t\tdepth--;\r\n        \t} else if (c === false) {\r\n        \t\tthrow error(\"Unterminated brace\", conf);\r\n        \t}\r\n        \t\r\n        \ttoken += c;\r\n            c = w.nextChar();\r\n        }\r\n        \r\n        token += c;\r\n        w.nextChar();\r\n        tokener(token, 'brace', conf);\r\n    }\r\n\r\n    function identifier(pre) {\r\n        var w = walker,\r\n            c = w.ch,\r\n            conf = getConf(),\r\n            token = (pre) ? pre + c : c;\r\n            \r\n        c = w.nextChar();\r\n    \r\n        if (pre) { // adjust token position\r\n        \tconf['char'] -= pre.length;\r\n        }\r\n        \r\n        while (isNameChar(c) || isDigit(c)) {\r\n            token += c;\r\n            c = w.nextChar();\r\n        }\r\n    \r\n        tokener(token, 'identifier', conf);    \r\n    }\r\n\r\n    function num() {\r\n        var w = walker,\r\n            c = w.ch,\r\n            conf = getConf(),\r\n            token = c,\r\n            point = token === '.',\r\n            nondigit;\r\n        \r\n        c = w.nextChar();\r\n        nondigit = !isDigit(c);\r\n    \r\n        // .2px or .classname?\r\n        if (point && nondigit) {\r\n            // meh, NaN, could be a class name, so it's an operator for now\r\n            conf.charend = conf['char'];\r\n            conf.lineend = conf.line;\r\n            return tokener(token, '.', conf);    \r\n        }\r\n        \r\n        // -2px or -moz-something\r\n        if (token === '-' && nondigit) {\r\n            return identifier('-');\r\n        }\r\n    \r\n        while (c !== false && (isDigit(c) || (!point && c === '.'))) { // not end of source && digit or first instance of .\r\n            if (c === '.') {\r\n                point = true;\r\n            }\r\n            token += c;\r\n            c = w.nextChar();\r\n        }\r\n\r\n        tokener(token, 'number', conf);    \r\n    \r\n    }\r\n\r\n    function op() {\r\n        var w = walker,\r\n            c = w.ch,\r\n            conf = getConf(),\r\n            token = c,\r\n            next = w.nextChar();\r\n            \r\n        if (next === \"=\" && isOp(token, true)) {\r\n            token += next;\r\n            tokener(token, 'match', conf);\r\n            w.nextChar();\r\n            return;\r\n        } \r\n        \r\n        conf.charend = conf['char'] + 1;\r\n        conf.lineend = conf.line;    \r\n        tokener(token, token, conf);\r\n    }\r\n\r\n\r\n    // call the appropriate handler based on the first character in a token suspect\r\n    function tokenize() {\r\n\r\n        var ch = walker.ch;\r\n    \r\n        if (ch === \" \" || ch === \"\\t\") {\r\n            return white();\r\n        }\r\n\r\n        if (ch === '/') {\r\n            return comment();\r\n        } \r\n\r\n        if (ch === '\"' || ch === \"'\") {\r\n            return str();\r\n        }\r\n        \r\n        if (ch === '(') {\r\n            return brace();\r\n        }\r\n    \r\n        if (ch === '-' || ch === '.' || isDigit(ch)) { // tricky - char: minus (-1px) or dash (-moz-stuff)\r\n            return num();\r\n        }\r\n    \r\n        if (isNameChar(ch)) {\r\n            return identifier();\r\n        }\r\n\r\n        if (isOp(ch)) {\r\n            return op();\r\n        }\r\n        \r\n        if (ch === \"\\n\") {\r\n            tokener(\"line\");\r\n            walker.nextChar();\r\n            return;\r\n        }\r\n        \r\n        throw error(\"Unrecognized character\");\r\n    }\r\n    \r\n    /**\r\n\t * Returns newline character at specified position in content\r\n\t * @param {String} content\r\n\t * @param {Number} pos\r\n\t * @return {String}\r\n\t */\r\n\tfunction getNewline(content, pos) {\r\n\t\treturn content.charAt(pos) == '\\r' && content.charAt(pos + 1) == '\\n' \r\n\t\t\t? '\\r\\n' \r\n\t\t\t: content.charAt(pos);\r\n\t}\r\n\r\n    return {\r\n    \t/**\r\n    \t * @param source\r\n    \t * @returns\r\n    \t * @memberOf emmet.cssParser\r\n    \t */\r\n        lex: function (source) {\r\n            walker.init(source);\r\n            tokens = [];\r\n            while (walker.ch !== false) {\r\n                tokenize();            \r\n            }\r\n            return tokens;\r\n        },\r\n        \r\n        /**\r\n         * Tokenizes CSS source\r\n         * @param {String} source\r\n         * @returns {Array}\r\n         */\r\n        parse: function(source) {\r\n        \t// transform tokens\r\n\t \t\tvar pos = 0;\r\n\t \t\treturn _.map(this.lex(source), function(token) {\r\n\t \t\t\tif (token.type == 'line') {\r\n\t \t\t\t\ttoken.value = getNewline(source, pos);\r\n\t \t\t\t}\r\n\t \t\t\t\r\n\t \t\t\treturn {\r\n\t \t\t\t\ttype: token.type,\r\n\t \t\t\t\tstart: pos,\r\n\t \t\t\t\tend: (pos += token.value.length)\r\n\t \t\t\t};\r\n\t\t\t});\r\n\t\t},\r\n        \r\n        toSource: function (toks) {\r\n            var i = 0, max = toks.length, t, src = '';\r\n            for (; i < max; i += 1) {\r\n                t = toks[i];\r\n                if (t.type === 'line') {\r\n                    src += '\\n';\r\n                } else {\r\n                    src += t.value;\r\n                }\r\n            }\r\n            return src;\r\n        }\r\n    };\r\n});/**\r\n * HTML tokenizer by Marijn Haverbeke\r\n * http://codemirror.net/\r\n * @constructor\r\n * @memberOf __xmlParseDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('xmlParser', function(require, _) {\r\n\tvar Kludges = {\r\n\t\tautoSelfClosers : {},\r\n\t\timplicitlyClosed : {},\r\n\t\tcontextGrabbers : {},\r\n\t\tdoNotIndent : {},\r\n\t\tallowUnquoted : true,\r\n\t\tallowMissing : true\r\n\t};\r\n\r\n\t// Return variables for tokenizers\r\n\tvar tagName = null, type = null;\r\n\r\n\tfunction inText(stream, state) {\r\n\t\tfunction chain(parser) {\r\n\t\t\tstate.tokenize = parser;\r\n\t\t\treturn parser(stream, state);\r\n\t\t}\r\n\r\n\t\tvar ch = stream.next();\r\n\t\tif (ch == \"<\") {\r\n\t\t\tif (stream.eat(\"!\")) {\r\n\t\t\t\tif (stream.eat(\"[\")) {\r\n\t\t\t\t\tif (stream.match(\"CDATA[\"))\r\n\t\t\t\t\t\treturn chain(inBlock(\"atom\", \"]]>\"));\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t} else if (stream.match(\"--\"))\r\n\t\t\t\t\treturn chain(inBlock(\"comment\", \"-->\"));\r\n\t\t\t\telse if (stream.match(\"DOCTYPE\", true, true)) {\r\n\t\t\t\t\tstream.eatWhile(/[\\w\\._\\-]/);\r\n\t\t\t\t\treturn chain(doctype(1));\r\n\t\t\t\t} else\r\n\t\t\t\t\treturn null;\r\n\t\t\t} else if (stream.eat(\"?\")) {\r\n\t\t\t\tstream.eatWhile(/[\\w\\._\\-]/);\r\n\t\t\t\tstate.tokenize = inBlock(\"meta\", \"?>\");\r\n\t\t\t\treturn \"meta\";\r\n\t\t\t} else {\r\n\t\t\t\ttype = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\r\n\t\t\t\tstream.eatSpace();\r\n\t\t\t\ttagName = \"\";\r\n\t\t\t\tvar c;\r\n\t\t\t\twhile ((c = stream.eat(/[^\\s\\u00a0=<>\\\"\\'\\/?]/)))\r\n\t\t\t\t\ttagName += c;\r\n\t\t\t\tstate.tokenize = inTag;\r\n\t\t\t\treturn \"tag\";\r\n\t\t\t}\r\n\t\t} else if (ch == \"&\") {\r\n\t\t\tvar ok;\r\n\t\t\tif (stream.eat(\"#\")) {\r\n\t\t\t\tif (stream.eat(\"x\")) {\r\n\t\t\t\t\tok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\r\n\t\t\t}\r\n\t\t\treturn ok ? \"atom\" : \"error\";\r\n\t\t} else {\r\n\t\t\tstream.eatWhile(/[^&<]/);\r\n\t\t\treturn \"text\";\r\n\t\t}\r\n\t}\r\n\r\n\tfunction inTag(stream, state) {\r\n\t\tvar ch = stream.next();\r\n\t\tif (ch == \">\" || (ch == \"/\" && stream.eat(\">\"))) {\r\n\t\t\tstate.tokenize = inText;\r\n\t\t\ttype = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\r\n\t\t\treturn \"tag\";\r\n\t\t} else if (ch == \"=\") {\r\n\t\t\ttype = \"equals\";\r\n\t\t\treturn null;\r\n\t\t} else if (/[\\'\\\"]/.test(ch)) {\r\n\t\t\tstate.tokenize = inAttribute(ch);\r\n\t\t\treturn state.tokenize(stream, state);\r\n\t\t} else {\r\n\t\t\tstream.eatWhile(/[^\\s\\u00a0=<>\\\"\\'\\/?]/);\r\n\t\t\treturn \"word\";\r\n\t\t}\r\n\t}\r\n\r\n\tfunction inAttribute(quote) {\r\n\t\treturn function(stream, state) {\r\n\t\t\twhile (!stream.eol()) {\r\n\t\t\t\tif (stream.next() == quote) {\r\n\t\t\t\t\tstate.tokenize = inTag;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\t}\r\n\r\n\tfunction inBlock(style, terminator) {\r\n\t\treturn function(stream, state) {\r\n\t\t\twhile (!stream.eol()) {\r\n\t\t\t\tif (stream.match(terminator)) {\r\n\t\t\t\t\tstate.tokenize = inText;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tstream.next();\r\n\t\t\t}\r\n\t\t\treturn style;\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction doctype(depth) {\r\n\t\treturn function(stream, state) {\r\n\t\t\tvar ch;\r\n\t\t\twhile ((ch = stream.next()) != null) {\r\n\t\t\t\tif (ch == \"<\") {\r\n\t\t\t\t\tstate.tokenize = doctype(depth + 1);\r\n\t\t\t\t\treturn state.tokenize(stream, state);\r\n\t\t\t\t} else if (ch == \">\") {\r\n\t\t\t\t\tif (depth == 1) {\r\n\t\t\t\t\t\tstate.tokenize = inText;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstate.tokenize = doctype(depth - 1);\r\n\t\t\t\t\t\treturn state.tokenize(stream, state);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn \"meta\";\r\n\t\t};\r\n\t}\r\n\r\n\tvar curState = null, setStyle;\r\n\tfunction pass() {\r\n\t\tfor (var i = arguments.length - 1; i >= 0; i--)\r\n\t\t\tcurState.cc.push(arguments[i]);\r\n\t}\r\n\t\r\n\tfunction cont() {\r\n\t\tpass.apply(null, arguments);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction pushContext(tagName, startOfLine) {\r\n\t\tvar noIndent = Kludges.doNotIndent.hasOwnProperty(tagName) \r\n\t\t\t|| (curState.context && curState.context.noIndent);\r\n\t\tcurState.context = {\r\n\t\t\tprev : curState.context,\r\n\t\t\ttagName : tagName,\r\n\t\t\tindent : curState.indented,\r\n\t\t\tstartOfLine : startOfLine,\r\n\t\t\tnoIndent : noIndent\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction popContext() {\r\n\t\tif (curState.context)\r\n\t\t\tcurState.context = curState.context.prev;\r\n\t}\r\n\r\n\tfunction element(type) {\r\n\t\tif (type == \"openTag\") {\r\n\t\t\tcurState.tagName = tagName;\r\n\t\t\treturn cont(attributes, endtag(curState.startOfLine));\r\n\t\t} else if (type == \"closeTag\") {\r\n\t\t\tvar err = false;\r\n\t\t\tif (curState.context) {\r\n\t\t\t\tif (curState.context.tagName != tagName) {\r\n\t\t\t\t\tif (Kludges.implicitlyClosed.hasOwnProperty(curState.context.tagName.toLowerCase())) {\r\n\t\t\t\t\t\tpopContext();\r\n\t\t\t\t\t}\r\n\t\t\t\t\terr = !curState.context || curState.context.tagName != tagName;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\terr = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (err)\r\n\t\t\t\tsetStyle = \"error\";\r\n\t\t\treturn cont(endclosetag(err));\r\n\t\t}\r\n\t\treturn cont();\r\n\t}\r\n\t\r\n\tfunction endtag(startOfLine) {\r\n\t\treturn function(type) {\r\n\t\t\tif (type == \"selfcloseTag\"\r\n\t\t\t\t\t|| (type == \"endTag\" && Kludges.autoSelfClosers\r\n\t\t\t\t\t\t\t.hasOwnProperty(curState.tagName\r\n\t\t\t\t\t\t\t\t\t.toLowerCase()))) {\r\n\t\t\t\tmaybePopContext(curState.tagName.toLowerCase());\r\n\t\t\t\treturn cont();\r\n\t\t\t}\r\n\t\t\tif (type == \"endTag\") {\r\n\t\t\t\tmaybePopContext(curState.tagName.toLowerCase());\r\n\t\t\t\tpushContext(curState.tagName, startOfLine);\r\n\t\t\t\treturn cont();\r\n\t\t\t}\r\n\t\t\treturn cont();\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction endclosetag(err) {\r\n\t\treturn function(type) {\r\n\t\t\tif (err)\r\n\t\t\t\tsetStyle = \"error\";\r\n\t\t\tif (type == \"endTag\") {\r\n\t\t\t\tpopContext();\r\n\t\t\t\treturn cont();\r\n\t\t\t}\r\n\t\t\tsetStyle = \"error\";\r\n\t\t\treturn cont(arguments.callee);\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction maybePopContext(nextTagName) {\r\n\t\tvar parentTagName;\r\n\t\twhile (true) {\r\n\t\t\tif (!curState.context) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tparentTagName = curState.context.tagName.toLowerCase();\r\n\t\t\tif (!Kludges.contextGrabbers.hasOwnProperty(parentTagName)\r\n\t\t\t\t\t|| !Kludges.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tpopContext();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction attributes(type) {\r\n\t\tif (type == \"word\") {\r\n\t\t\tsetStyle = \"attribute\";\r\n\t\t\treturn cont(attribute, attributes);\r\n\t\t}\r\n\t\tif (type == \"endTag\" || type == \"selfcloseTag\")\r\n\t\t\treturn pass();\r\n\t\tsetStyle = \"error\";\r\n\t\treturn cont(attributes);\r\n\t}\r\n\t\r\n\tfunction attribute(type) {\r\n\t\tif (type == \"equals\")\r\n\t\t\treturn cont(attvalue, attributes);\r\n\t\tif (!Kludges.allowMissing)\r\n\t\t\tsetStyle = \"error\";\r\n\t\treturn (type == \"endTag\" || type == \"selfcloseTag\") ? pass()\r\n\t\t\t\t: cont();\r\n\t}\r\n\t\r\n\tfunction attvalue(type) {\r\n\t\tif (type == \"string\")\r\n\t\t\treturn cont(attvaluemaybe);\r\n\t\tif (type == \"word\" && Kludges.allowUnquoted) {\r\n\t\t\tsetStyle = \"string\";\r\n\t\t\treturn cont();\r\n\t\t}\r\n\t\tsetStyle = \"error\";\r\n\t\treturn (type == \"endTag\" || type == \"selfCloseTag\") ? pass()\r\n\t\t\t\t: cont();\r\n\t}\r\n\t\r\n\tfunction attvaluemaybe(type) {\r\n\t\tif (type == \"string\")\r\n\t\t\treturn cont(attvaluemaybe);\r\n\t\telse\r\n\t\t\treturn pass();\r\n\t}\r\n\t\r\n\tfunction startState() {\r\n\t\treturn {\r\n\t\t\ttokenize : inText,\r\n\t\t\tcc : [],\r\n\t\t\tindented : 0,\r\n\t\t\tstartOfLine : true,\r\n\t\t\ttagName : null,\r\n\t\t\tcontext : null\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction token(stream, state) {\r\n\t\tif (stream.sol()) {\r\n\t\t\tstate.startOfLine = true;\r\n\t\t\tstate.indented = 0;\r\n\t\t}\r\n\t\t\r\n\t\tif (stream.eatSpace())\r\n\t\t\treturn null;\r\n\r\n\t\tsetStyle = type = tagName = null;\r\n\t\tvar style = state.tokenize(stream, state);\r\n\t\tstate.type = type;\r\n\t\tif ((style || type) && style != \"comment\") {\r\n\t\t\tcurState = state;\r\n\t\t\twhile (true) {\r\n\t\t\t\tvar comb = state.cc.pop() || element;\r\n\t\t\t\tif (comb(type || style))\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tstate.startOfLine = false;\r\n\t\treturn setStyle || style;\r\n\t}\r\n\r\n\treturn {\r\n\t\t/**\r\n\t\t * @memberOf emmet.xmlParser\r\n\t\t * @returns\r\n\t\t */\r\n\t\tparse: function(data, offset) {\r\n\t\t\toffset = offset || 0;\r\n\t\t\tvar state = startState();\r\n\t\t\tvar stream = require('stringStream').create(data);\r\n\t\t\tvar tokens = [];\r\n\t\t\twhile (!stream.eol()) {\r\n\t\t\t\ttokens.push({\r\n\t\t\t\t\ttype: token(stream, state),\r\n\t\t\t\t\tstart: stream.start + offset,\r\n\t\t\t\t\tend: stream.pos + offset\r\n\t\t\t\t});\r\n\t\t\t\tstream.start = stream.pos;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn tokens;\r\n\t\t}\t\t\r\n\t};\r\n});\r\n/*!\r\n * string_score.js: String Scoring Algorithm 0.1.10 \r\n *\r\n * http://joshaven.com/string_score\r\n * https://github.com/joshaven/string_score\r\n *\r\n * Copyright (C) 2009-2011 Joshaven Potter <yourtech@gmail.com>\r\n * Special thanks to all of the contributors listed here https://github.com/joshaven/string_score\r\n * MIT license: http://www.opensource.org/licenses/mit-license.php\r\n *\r\n * Date: Tue Mar 1 2011\r\n*/\r\n\r\n/**\r\n * Scores a string against another string.\r\n *  'Hello World'.score('he');     //=> 0.5931818181818181\r\n *  'Hello World'.score('Hello');  //=> 0.7318181818181818\r\n */\r\nemmet.define('string-score', function(require, _) {\r\n\treturn {\r\n\t\tscore: function(string, abbreviation, fuzziness) {\r\n\t\t\t// If the string is equal to the abbreviation, perfect match.\r\n\t\t\t  if (string == abbreviation) {return 1;}\r\n\t\t\t  //if it's not a perfect match and is empty return 0\r\n\t\t\t  if(abbreviation == \"\") {return 0;}\r\n\r\n\t\t\t  var total_character_score = 0,\r\n\t\t\t      abbreviation_length = abbreviation.length,\r\n\t\t\t      string_length = string.length,\r\n\t\t\t      start_of_string_bonus,\r\n\t\t\t      abbreviation_score,\r\n\t\t\t      fuzzies=1,\r\n\t\t\t      final_score;\r\n\t\t\t  \r\n\t\t\t  // Walk through abbreviation and add up scores.\r\n\t\t\t  for (var i = 0,\r\n\t\t\t         character_score/* = 0*/,\r\n\t\t\t         index_in_string/* = 0*/,\r\n\t\t\t         c/* = ''*/,\r\n\t\t\t         index_c_lowercase/* = 0*/,\r\n\t\t\t         index_c_uppercase/* = 0*/,\r\n\t\t\t         min_index/* = 0*/;\r\n\t\t\t     i < abbreviation_length;\r\n\t\t\t     ++i) {\r\n\t\t\t    \r\n\t\t\t    // Find the first case-insensitive match of a character.\r\n\t\t\t    c = abbreviation.charAt(i);\r\n\t\t\t    \r\n\t\t\t    index_c_lowercase = string.indexOf(c.toLowerCase());\r\n\t\t\t    index_c_uppercase = string.indexOf(c.toUpperCase());\r\n\t\t\t    min_index = Math.min(index_c_lowercase, index_c_uppercase);\r\n\t\t\t    index_in_string = (min_index > -1) ? min_index : Math.max(index_c_lowercase, index_c_uppercase);\r\n\t\t\t    \r\n\t\t\t    if (index_in_string === -1) { \r\n\t\t\t      if (fuzziness) {\r\n\t\t\t        fuzzies += 1-fuzziness;\r\n\t\t\t        continue;\r\n\t\t\t      } else {\r\n\t\t\t        return 0;\r\n\t\t\t      }\r\n\t\t\t    } else {\r\n\t\t\t      character_score = 0.1;\r\n\t\t\t    }\r\n\t\t\t    \r\n\t\t\t    // Set base score for matching 'c'.\r\n\t\t\t    \r\n\t\t\t    // Same case bonus.\r\n\t\t\t    if (string[index_in_string] === c) { \r\n\t\t\t      character_score += 0.1; \r\n\t\t\t    }\r\n\t\t\t    \r\n\t\t\t    // Consecutive letter & start-of-string Bonus\r\n\t\t\t    if (index_in_string === 0) {\r\n\t\t\t      // Increase the score when matching first character of the remainder of the string\r\n\t\t\t      character_score += 0.6;\r\n\t\t\t      if (i === 0) {\r\n\t\t\t        // If match is the first character of the string\r\n\t\t\t        // & the first character of abbreviation, add a\r\n\t\t\t        // start-of-string match bonus.\r\n\t\t\t        start_of_string_bonus = 1; //true;\r\n\t\t\t      }\r\n\t\t\t    }\r\n\t\t\t    else {\r\n\t\t\t  // Acronym Bonus\r\n\t\t\t  // Weighing Logic: Typing the first character of an acronym is as if you\r\n\t\t\t  // preceded it with two perfect character matches.\r\n\t\t\t  if (string.charAt(index_in_string - 1) === ' ') {\r\n\t\t\t    character_score += 0.8; // * Math.min(index_in_string, 5); // Cap bonus at 0.4 * 5\r\n\t\t\t  }\r\n\t\t\t    }\r\n\t\t\t    \r\n\t\t\t    // Left trim the already matched part of the string\r\n\t\t\t    // (forces sequential matching).\r\n\t\t\t    string = string.substring(index_in_string + 1, string_length);\r\n\t\t\t    \r\n\t\t\t    total_character_score += character_score;\r\n\t\t\t  } // end of for loop\r\n\t\t\t  \r\n\t\t\t  // Uncomment to weigh smaller words higher.\r\n\t\t\t  // return total_character_score / string_length;\r\n\t\t\t  \r\n\t\t\t  abbreviation_score = total_character_score / abbreviation_length;\r\n\t\t\t  //percentage_of_matched_string = abbreviation_length / string_length;\r\n\t\t\t  //word_score = abbreviation_score * percentage_of_matched_string;\r\n\t\t\t  \r\n\t\t\t  // Reduce penalty for longer strings.\r\n\t\t\t  //final_score = (word_score + abbreviation_score) / 2;\r\n\t\t\t  final_score = ((abbreviation_score * (abbreviation_length / string_length)) + abbreviation_score) / 2;\r\n\t\t\t  \r\n\t\t\t  final_score = final_score / fuzzies;\r\n\t\t\t  \r\n\t\t\t  if (start_of_string_bonus && (final_score + 0.15 < 1)) {\r\n\t\t\t    final_score += 0.15;\r\n\t\t\t  }\r\n\t\t\t  \r\n\t\t\t  return final_score;\r\n\t\t}\r\n\t};\r\n});/**\r\n * Utility module for Emmet\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('utils', function(require, _) {\r\n\t/** \r\n\t * Special token used as a placeholder for caret positions inside \r\n\t * generated output \r\n\t */\r\n\tvar caretPlaceholder = '${0}';\r\n\t\r\n\t/**\r\n\t * A simple string builder, optimized for faster text concatenation\r\n\t * @param {String} value Initial value\r\n\t */\r\n\tfunction StringBuilder(value) {\r\n\t\tthis._data = [];\r\n\t\tthis.length = 0;\r\n\t\t\r\n\t\tif (value)\r\n\t\t\tthis.append(value);\r\n\t}\r\n\t\r\n\tStringBuilder.prototype = {\r\n\t\t/**\r\n\t\t * Append string\r\n\t\t * @param {String} text\r\n\t\t */\r\n\t\tappend: function(text) {\r\n\t\t\tthis._data.push(text);\r\n\t\t\tthis.length += text.length;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\ttoString: function() {\r\n\t\t\treturn this._data.join('');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tvalueOf: function() {\r\n\t\t\treturn this.toString();\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn {\r\n\t\t/** @memberOf utils */\r\n\t\treTag: /<\\/?[\\w:\\-]+(?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*\\s*(\\/?)>$/,\r\n\t\t\r\n\t\t/**\r\n\t\t * Test if passed string ends with XHTML tag. This method is used for testing\r\n\t\t * '>' character: it belongs to tag or it's a part of abbreviation? \r\n\t\t * @param {String} str\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tendsWithTag: function(str) {\r\n\t\t\treturn this.reTag.test(str);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if passed symbol is a number\r\n\t\t * @param {String} ch\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisNumeric: function(ch) {\r\n\t\t\tif (typeof(ch) == 'string')\r\n\t\t\t\tch = ch.charCodeAt(0);\r\n\t\t\t\t\r\n\t\t\treturn (ch && ch > 47 && ch < 58);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Trim whitespace from string\r\n\t\t * @param {String} text\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\ttrim: function(text) {\r\n\t\t\treturn (text || \"\").replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns newline character\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tgetNewline: function() {\r\n\t\t\tvar res = require('resources');\r\n\t\t\tif (!res) {\r\n\t\t\t\treturn '\\n';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar nl = res.getVariable('newline');\r\n\t\t\treturn _.isString(nl) ? nl : '\\n';\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Sets new newline character that will be used in output\r\n\t\t * @param {String} str\r\n\t\t */\r\n\t\tsetNewline: function(str) {\r\n\t\t\tvar res = require('resources');\r\n\t\t\tres.setVariable('newline', str);\r\n\t\t\tres.setVariable('nl', str);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Split text into lines. Set <code>remove_empty</code> to true to filter\r\n\t\t * empty lines\r\n\t\t * @param {String} text Text to split\r\n\t\t * @param {Boolean} removeEmpty Remove empty lines from result\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tsplitByLines: function(text, removeEmpty) {\r\n\t\t\t// IE fails to split string by regexp, \r\n\t\t\t// need to normalize newlines first\r\n\t\t\t// Also, Mozilla's Rhiho JS engine has a weird newline bug\r\n\t\t\tvar nl = this.getNewline();\r\n\t\t\tvar lines = (text || '')\r\n\t\t\t\t.replace(/\\r\\n/g, '\\n')\r\n\t\t\t\t.replace(/\\n\\r/g, '\\n')\r\n\t\t\t\t.replace(/\\r/g, '\\n')\r\n\t\t\t\t.replace(/\\n/g, nl)\r\n\t\t\t\t.split(nl);\r\n\t\t\t\r\n\t\t\tif (removeEmpty) {\r\n\t\t\t\tlines = _.filter(lines, function(line) {\r\n\t\t\t\t\treturn line.length && !!this.trim(line);\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn lines;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Normalizes newline character: replaces newlines in <code>text</code> \r\n\t\t * with newline defined in preferences\r\n\t\t * @param {String} text\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tnormalizeNewline: function(text) {\r\n\t\t\treturn this.splitByLines(text).join(this.getNewline());\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Repeats string <code>howMany</code> times\r\n\t\t * @param {String} str\r\n\t\t * @param {Number} how_many\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\trepeatString: function(str, howMany) {\r\n\t\t\tvar result = [];\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < howMany; i++) \r\n\t\t\t\tresult.push(str);\r\n\t\t\t\t\r\n\t\t\treturn result.join('');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns list of paddings that should be used to align passed string\r\n\t\t * @param {Array} strings\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tgetStringsPads: function(strings) {\r\n\t\t\tvar lengths = _.map(strings, function(s) {\r\n\t\t\t\treturn _.isString(s) ? s.length : +s;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar max = _.max(lengths);\r\n\t\t\treturn _.map(lengths, function(l) {\r\n\t\t\t\tvar pad = max - l;\r\n\t\t\t\treturn pad ? this.repeatString(' ', pad) : '';\r\n\t\t\t}, this);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Indents text with padding\r\n\t\t * @param {String} text Text to indent\r\n\t\t * @param {String} pad Padding size (number) or padding itself (string)\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tpadString: function(text, pad) {\r\n\t\t\tvar padStr = (_.isNumber(pad)) \r\n\t\t\t\t? this.repeatString(require('resources').getVariable('indentation') || '\\t', pad) \r\n\t\t\t\t: pad;\r\n\t\t\t\t\r\n\t\t\tvar result = [];\r\n\t\t\t\r\n\t\t\tvar lines = this.splitByLines(text);\r\n\t\t\tvar nl = this.getNewline();\r\n\t\t\t\t\r\n\t\t\tresult.push(lines[0]);\r\n\t\t\tfor (var j = 1; j < lines.length; j++) \r\n\t\t\t\tresult.push(nl + padStr + lines[j]);\r\n\t\t\t\t\r\n\t\t\treturn result.join('');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Pad string with zeroes\r\n\t\t * @param {String} str String to pad\r\n\t\t * @param {Number} pad Desired string length\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tzeroPadString: function(str, pad) {\r\n\t\t\tvar padding = '';\r\n\t\t\tvar il = str.length;\r\n\t\t\t\t\r\n\t\t\twhile (pad > il++) padding += '0';\r\n\t\t\treturn padding + str; \r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes padding at the beginning of each text's line\r\n\t\t * @param {String} text\r\n\t\t * @param {String} pad\r\n\t\t */\r\n\t\tunindentString: function(text, pad) {\r\n\t\t\tvar lines = this.splitByLines(text);\r\n\t\t\tfor (var i = 0; i < lines.length; i++) {\r\n\t\t\t\tif (lines[i].search(pad) == 0)\r\n\t\t\t\t\tlines[i] = lines[i].substr(pad.length);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn lines.join(this.getNewline());\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Replaces unescaped symbols in <code>str</code>. For example, the '$' symbol\r\n\t\t * will be replaced in 'item$count', but not in 'item\\$count'.\r\n\t\t * @param {String} str Original string\r\n\t\t * @param {String} symbol Symbol to replace\r\n\t\t * @param {String} replace Symbol replacement. Might be a function that \r\n\t\t * returns new value\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\treplaceUnescapedSymbol: function(str, symbol, replace) {\r\n\t\t\tvar i = 0;\r\n\t\t\tvar il = str.length;\r\n\t\t\tvar sl = symbol.length;\r\n\t\t\tvar matchCount = 0;\r\n\t\t\t\t\r\n\t\t\twhile (i < il) {\r\n\t\t\t\tif (str.charAt(i) == '\\\\') {\r\n\t\t\t\t\t// escaped symbol, skip next character\r\n\t\t\t\t\ti += sl + 1;\r\n\t\t\t\t} else if (str.substr(i, sl) == symbol) {\r\n\t\t\t\t\t// have match\r\n\t\t\t\t\tvar curSl = sl;\r\n\t\t\t\t\tmatchCount++;\r\n\t\t\t\t\tvar newValue = replace;\r\n\t\t\t\t\tif (_.isFunction(replace)) {\r\n\t\t\t\t\t\tvar replaceData = replace(str, symbol, i, matchCount);\r\n\t\t\t\t\t\tif (replaceData) {\r\n\t\t\t\t\t\t\tcurSl = replaceData[0].length;\r\n\t\t\t\t\t\t\tnewValue = replaceData[1];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnewValue = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (newValue === false) { // skip replacement\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tstr = str.substring(0, i) + newValue + str.substring(i + curSl);\r\n\t\t\t\t\t// adjust indexes\r\n\t\t\t\t\til = str.length;\r\n\t\t\t\t\ti += newValue.length;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn str;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Replace variables like ${var} in string\r\n\t\t * @param {String} str\r\n\t\t * @param {Object} vars Variable set (defaults to variables defined in \r\n\t\t * <code>snippets.json</code>) or variable resolver (<code>Function</code>)\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\treplaceVariables: function(str, vars) {\r\n\t\t\tvars = vars || {};\r\n\t\t\tvar resolver = _.isFunction(vars) ? vars : function(str, p1) {\r\n\t\t\t\treturn p1 in vars ? vars[p1] : null;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tvar res = require('resources');\r\n\t\t\treturn require('tabStops').processText(str, {\r\n\t\t\t\tvariable: function(data) {\r\n\t\t\t\t\tvar newValue = resolver(data.token, data.name, data);\r\n\t\t\t\t\tif (newValue === null) {\r\n\t\t\t\t\t\t// try to find variable in resources\r\n\t\t\t\t\t\tnewValue = res.getVariable(data.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (newValue === null || _.isUndefined(newValue))\r\n\t\t\t\t\t\t// nothing found, return token itself\r\n\t\t\t\t\t\tnewValue = data.token;\r\n\t\t\t\t\treturn newValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Replaces '$' character in string assuming it might be escaped with '\\'\r\n\t\t * @param {String} str String where character should be replaced\r\n\t\t * @param {String} value New value\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\treplaceCounter: function(str, value, total) {\r\n\t\t\tvar symbol = '$';\r\n\t\t\t// in case we received strings from Java, convert the to native strings\r\n\t\t\tstr = String(str);\r\n\t\t\tvalue = String(value);\r\n\t\t\t\r\n\t\t\tif (/^\\-?\\d+$/.test(value)) {\r\n\t\t\t\tvalue = +value;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar that = this;\r\n\t\t\t\r\n\t\t\treturn this.replaceUnescapedSymbol(str, symbol, function(str, symbol, pos, matchNum){\r\n\t\t\t\tif (str.charAt(pos + 1) == '{' || that.isNumeric(str.charAt(pos + 1)) ) {\r\n\t\t\t\t\t// it's a variable, skip it\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// replace sequense of $ symbols with padded number  \r\n\t\t\t\tvar j = pos + 1;\r\n\t\t\t\twhile(str.charAt(j) == '$' && str.charAt(j + 1) != '{') j++;\r\n\t\t\t\tvar pad = j - pos;\r\n\t\t\t\t\r\n\t\t\t\t// get counter base\r\n\t\t\t\tvar base = 0, decrement = false, m;\r\n\t\t\t\tif (m = str.substr(j).match(/^@(\\-?)(\\d*)/)) {\r\n\t\t\t\t\tj += m[0].length;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (m[1]) {\r\n\t\t\t\t\t\tdecrement = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbase = parseInt(m[2] || 1) - 1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (decrement && total && _.isNumber(value)) {\r\n\t\t\t\t\tvalue = total - value + 1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvalue += base;\r\n\t\t\t\t\r\n\t\t\t\treturn [str.substring(pos, j), that.zeroPadString(value + '', pad)];\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if string matches against <code>reTag</code> regexp. This \r\n\t\t * function may be used to test if provided string contains HTML tags\r\n\t\t * @param {String} str\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tmatchesTag: function(str) {\r\n\t\t\treturn this.reTag.test(str || '');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Escapes special characters used in Emmet, like '$', '|', etc.\r\n\t\t * Use this method before passing to actions like \"Wrap with Abbreviation\"\r\n\t\t * to make sure that existing special characters won't be altered\r\n\t\t * @param {String} text\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tescapeText: function(text) {\r\n\t\t\treturn text.replace(/([\\$\\\\])/g, '\\\\$1');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Unescapes special characters used in Emmet, like '$', '|', etc.\r\n\t\t * @param {String} text\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tunescapeText: function(text) {\r\n\t\t\treturn text.replace(/\\\\(.)/g, '$1');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns caret placeholder\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tgetCaretPlaceholder: function() {\r\n\t\t\treturn _.isFunction(caretPlaceholder) \r\n\t\t\t\t? caretPlaceholder.apply(this, arguments)\r\n\t\t\t\t: caretPlaceholder;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Sets new representation for carets in generated output\r\n\t\t * @param {String} value New caret placeholder. Might be a \r\n\t\t * <code>Function</code>\r\n\t\t */\r\n\t\tsetCaretPlaceholder: function(value) {\r\n\t\t\tcaretPlaceholder = value;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns line padding\r\n\t\t * @param {String} line\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tgetLinePadding: function(line) {\r\n\t\t\treturn (line.match(/^(\\s+)/) || [''])[0];\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Helper function that returns padding of line of <code>pos</code>\r\n\t\t * position in <code>content</code>\r\n\t\t * @param {String} content\r\n\t\t * @param {Number} pos\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tgetLinePaddingFromPosition: function(content, pos) {\r\n\t\t\tvar lineRange = this.findNewlineBounds(content, pos);\r\n\t\t\treturn this.getLinePadding(lineRange.substring(content));\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Escape special regexp chars in string, making it usable for creating dynamic\r\n\t\t * regular expressions\r\n\t\t * @param {String} str\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tescapeForRegexp: function(str) {\r\n\t\t\tvar specials = new RegExp(\"[.*+?|()\\\\[\\\\]{}\\\\\\\\]\", \"g\"); // .*+?|()[]{}\\\r\n\t\t\treturn str.replace(specials, \"\\\\$&\");\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Make decimal number look good: convert it to fixed precision end remove\r\n\t\t * traling zeroes \r\n\t\t * @param {Number} num\r\n\t\t * @param {Number} fracion Fraction numbers (default is 2)\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tprettifyNumber: function(num, fraction) {\r\n\t\t\treturn num.toFixed(typeof fraction == 'undefined' ? 2 : fraction).replace(/\\.?0+$/, '');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * A simple mutable string shim, optimized for faster text concatenation\r\n\t\t * @param {String} value Initial value\r\n\t\t * @returns {StringBuilder}\r\n\t\t */\r\n\t\tstringBuilder: function(value) {\r\n\t\t\treturn new StringBuilder(value);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Replace substring of <code>str</code> with <code>value</code>\r\n\t\t * @param {String} str String where to replace substring\r\n\t\t * @param {String} value New substring value\r\n\t\t * @param {Number} start Start index of substring to replace. May also\r\n\t\t * be a <code>Range</code> object: in this case, the <code>end</code>\r\n\t\t * argument is not required\r\n\t\t * @param {Number} end End index of substring to replace. If ommited, \r\n\t\t * <code>start</code> argument is used\r\n\t\t */\r\n\t\treplaceSubstring: function(str, value, start, end) {\r\n\t\t\tif (_.isObject(start) && 'end' in start) {\r\n\t\t\t\tend = start.end;\r\n\t\t\t\tstart = start.start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (_.isString(end))\r\n\t\t\t\tend = start + end.length;\r\n\t\t\t\r\n\t\t\tif (_.isUndefined(end))\r\n\t\t\t\tend = start;\r\n\t\t\t\r\n\t\t\tif (start < 0 || start > str.length)\r\n\t\t\t\treturn str;\r\n\t\t\t\r\n\t\t\treturn str.substring(0, start) + value + str.substring(end);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Narrows down text range, adjusting selection to non-space characters\r\n\t\t * @param {String} text\r\n\t\t * @param {Number} start Starting range in <code>text</code> where \r\n\t\t * slection should be adjusted. Can also be any object that is accepted\r\n\t\t * by <code>Range</code> class\r\n\t\t * @return {Range}\r\n\t\t */\r\n\t\tnarrowToNonSpace: function(text, start, end) {\r\n\t\t\tvar range = require('range').create(start, end);\r\n\t\t\t\r\n\t\t\tvar reSpace = /[\\s\\n\\r\\u00a0]/;\r\n\t\t\t// narrow down selection until first non-space character\r\n\t\t\twhile (range.start < range.end) {\r\n\t\t\t\tif (!reSpace.test(text.charAt(range.start)))\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\trange.start++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twhile (range.end > range.start) {\r\n\t\t\t\trange.end--;\r\n\t\t\t\tif (!reSpace.test(text.charAt(range.end))) {\r\n\t\t\t\t\trange.end++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn range;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Find start and end index of text line for <code>from</code> index\r\n\t\t * @param {String} text \r\n\t\t * @param {Number} from\r\n\t\t */\r\n\t\tfindNewlineBounds: function(text, from) {\r\n\t\t\tvar len = text.length,\r\n\t\t\t\tstart = 0,\r\n\t\t\t\tend = len - 1;\r\n\t\t\t\r\n\t\t\t// search left\r\n\t\t\tfor (var i = from - 1; i > 0; i--) {\r\n\t\t\t\tvar ch = text.charAt(i);\r\n\t\t\t\tif (ch == '\\n' || ch == '\\r') {\r\n\t\t\t\t\tstart = i + 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// search right\r\n\t\t\tfor (var j = from; j < len; j++) {\r\n\t\t\t\tvar ch = text.charAt(j);\r\n\t\t\t\tif (ch == '\\n' || ch == '\\r') {\r\n\t\t\t\t\tend = j;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn require('range').create(start, end - start);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Deep merge of two or more objects. Taken from jQuery.extend()\r\n\t\t */\r\n\t\tdeepMerge: function() {\r\n\t\t\tvar options, name, src, copy, copyIsArray, clone,\r\n\t\t\t\ttarget = arguments[0] || {},\r\n\t\t\t\ti = 1,\r\n\t\t\t\tlength = arguments.length;\r\n\r\n\r\n\t\t\t// Handle case when target is a string or something (possible in deep copy)\r\n\t\t\tif (!_.isObject(target) && !_.isFunction(target)) {\r\n\t\t\t\ttarget = {};\r\n\t\t\t}\r\n\r\n\t\t\tfor ( ; i < length; i++ ) {\r\n\t\t\t\t// Only deal with non-null/undefined values\r\n\t\t\t\tif ( (options = arguments[ i ]) != null ) {\r\n\t\t\t\t\t// Extend the base object\r\n\t\t\t\t\tfor ( name in options ) {\r\n\t\t\t\t\t\tsrc = target[ name ];\r\n\t\t\t\t\t\tcopy = options[ name ];\r\n\r\n\t\t\t\t\t\t// Prevent never-ending loop\r\n\t\t\t\t\t\tif ( target === copy ) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\r\n\t\t\t\t\t\tif ( copy && ( _.isObject(copy) || (copyIsArray = _.isArray(copy)) ) ) {\r\n\t\t\t\t\t\t\tif ( copyIsArray ) {\r\n\t\t\t\t\t\t\t\tcopyIsArray = false;\r\n\t\t\t\t\t\t\t\tclone = src && _.isArray(src) ? src : [];\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tclone = src && _.isObject(src) ? src : {};\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Never move original objects, clone them\r\n\t\t\t\t\t\t\ttarget[ name ] = this.deepMerge(clone, copy );\r\n\r\n\t\t\t\t\t\t// Don't bring in undefined values\r\n\t\t\t\t\t\t} else if ( copy !== undefined ) {\r\n\t\t\t\t\t\t\ttarget[ name ] = copy;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Return the modified object\r\n\t\t\treturn target;\r\n\t\t}\r\n\t};\r\n});\r\n/**\r\n * Helper module to work with ranges\r\n * @constructor\r\n * @memberOf __rangeDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('range', function(require, _) {\r\n\tfunction cmp(a, b, op) {\r\n\t\tswitch (op) {\r\n\t\t\tcase 'eq':\r\n\t\t\tcase '==':\r\n\t\t\t\treturn a === b;\r\n\t\t\tcase 'lt':\r\n\t\t\tcase '<':\r\n\t\t\t\treturn a < b;\r\n\t\t\tcase 'lte':\r\n\t\t\tcase '<=':\r\n\t\t\t\treturn a <= b;\r\n\t\t\tcase 'gt':\r\n\t\t\tcase '>':\r\n\t\t\t\treturn a > b;\r\n\t\t\tcase 'gte':\r\n\t\t\tcase '>=':\r\n\t\t\t\treturn a >= b;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * @type Range\r\n\t * @constructor\r\n\t * @param {Object} start\r\n\t * @param {Number} len\r\n\t */\r\n\tfunction Range(start, len) {\r\n\t\tif (_.isObject(start) && 'start' in start) {\r\n\t\t\t// create range from object stub\r\n\t\t\tthis.start = Math.min(start.start, start.end);\r\n\t\t\tthis.end = Math.max(start.start, start.end);\r\n\t\t} else if (_.isArray(start)) {\r\n\t\t\tthis.start = start[0];\r\n\t\t\tthis.end = start[1];\r\n\t\t} else {\r\n\t\t\tlen = _.isString(len) ? len.length : +len;\r\n\t\t\tthis.start = start;\r\n\t\t\tthis.end = start + len;\r\n\t\t}\r\n\t}\r\n\t\r\n\tRange.prototype = {\r\n\t\tlength: function() {\r\n\t\t\treturn Math.abs(this.end - this.start);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns <code>true</code> if passed range is equals to current one\r\n\t\t * @param {Range} range\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tequal: function(range) {\r\n\t\t\treturn this.cmp(range, 'eq', 'eq');\r\n//\t\t\treturn this.start === range.start && this.end === range.end;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Shifts indexes position with passed <code>delat</code>\r\n\t\t * @param {Number} delta\r\n\t\t * @returns {Range} range itself\r\n\t\t */\r\n\t\tshift: function(delta) {\r\n\t\t\tthis.start += delta;\r\n\t\t\tthis.end += delta;\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if two ranges are overlapped\r\n\t\t * @param {Range} range\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\toverlap: function(range) {\r\n\t\t\treturn range.start <= this.end && range.end >= this.start;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Finds intersection of two ranges\r\n\t\t * @param {Range} range\r\n\t\t * @returns {Range} <code>null</code> if ranges does not overlap\r\n\t\t */\r\n\t\tintersection: function(range) {\r\n\t\t\tif (this.overlap(range)) {\r\n\t\t\t\tvar start = Math.max(range.start, this.start);\r\n\t\t\t\tvar end = Math.min(range.end, this.end);\r\n\t\t\t\treturn new Range(start, end - start);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns the union of the thow ranges.\r\n\t\t * @param {Range} range\r\n\t\t * @returns {Range} <code>null</code> if ranges are not overlapped\r\n\t\t */\r\n\t\tunion: function(range) {\r\n\t\t\tif (this.overlap(range)) {\r\n\t\t\t\tvar start = Math.min(range.start, this.start);\r\n\t\t\t\tvar end = Math.max(range.end, this.end);\r\n\t\t\t\treturn new Range(start, end - start);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns a Boolean value that indicates whether a specified position \r\n\t\t * is in a given range.\r\n\t\t * @param {Number} loc\r\n\t\t */\r\n\t\tinside: function(loc) {\r\n\t\t\treturn this.cmp(loc, 'lte', 'gt');\r\n//\t\t\treturn this.start <= loc && this.end > loc;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns a Boolean value that indicates whether a specified position \r\n\t\t * is in a given range, but not equals bounds.\r\n\t\t * @param {Number} loc\r\n\t\t */\r\n\t\tcontains: function(loc) {\r\n\t\t\treturn this.cmp(loc, 'lt', 'gt');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if current range completely includes specified one\r\n\t\t * @param {Range} r\r\n\t\t * @returns {Boolean} \r\n\t\t */\r\n\t\tinclude: function(r) {\r\n\t\t\treturn this.cmp(loc, 'lte', 'gte');\r\n//\t\t\treturn this.start <= r.start && this.end >= r.end;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Low-level comparision method\r\n\t\t * @param {Number} loc\r\n\t\t * @param {String} left Left comparison operator\r\n\t\t * @param {String} right Right comaprison operator\r\n\t\t */\r\n\t\tcmp: function(loc, left, right) {\r\n\t\t\tvar a, b;\r\n\t\t\tif (loc instanceof Range) {\r\n\t\t\t\ta = loc.start;\r\n\t\t\t\tb = loc.end;\r\n\t\t\t} else {\r\n\t\t\t\ta = b = loc;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn cmp(this.start, a, left || '<=') && cmp(this.end, b, right || '>');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns substring of specified <code>str</code> for current range\r\n\t\t * @param {String} str\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tsubstring: function(str) {\r\n\t\t\treturn this.length() > 0 \r\n\t\t\t\t? str.substring(this.start, this.end) \r\n\t\t\t\t: '';\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Creates copy of current range\r\n\t\t * @returns {Range}\r\n\t\t */\r\n\t\tclone: function() {\r\n\t\t\treturn new Range(this.start, this.length());\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\ttoArray: function() {\r\n\t\t\treturn [this.start, this.end];\r\n\t\t},\r\n\t\t\r\n\t\ttoString: function() {\r\n\t\t\treturn '{' + this.start + ', ' + this.length() + '}';\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Creates new range object instance\r\n\t\t * @param {Object} start Range start or array with 'start' and 'end'\r\n\t\t * as two first indexes or object with 'start' and 'end' properties\r\n\t\t * @param {Number} len Range length or string to produce range from\r\n\t\t * @returns {Range}\r\n\t\t * @memberOf emmet.range\r\n\t\t */\r\n\t\tcreate: function(start, len) {\r\n\t\t\tif (_.isUndefined(start) || start === null)\r\n\t\t\t\treturn null;\r\n\t\t\t\r\n\t\t\tif (start instanceof Range)\r\n\t\t\t\treturn start;\r\n\t\t\t\r\n\t\t\tif (_.isObject(start) && 'start' in start && 'end' in start) {\r\n\t\t\t\tlen = start.end - start.start;\r\n\t\t\t\tstart = start.start;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn new Range(start, len);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * <code>Range</code> object factory, the same as <code>this.create()</code>\r\n\t\t * but last argument represents end of range, not length\r\n\t\t * @returns {Range}\r\n\t\t */\r\n\t\tcreate2: function(start, end) {\r\n\t\t\tif (_.isNumber(start) && _.isNumber(end)) {\r\n\t\t\t\tend -= start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this.create(start, end);\r\n\t\t}\r\n\t};\r\n});/**\r\n * Utility module that provides ordered storage of function handlers. \r\n * Many Emmet modules' functionality can be extended/overridden by custom\r\n * function. This modules provides unified storage of handler functions, their \r\n * management and execution\r\n * \r\n * @constructor\r\n * @memberOf __handlerListDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('handlerList', function(require, _) {\r\n\t/**\r\n\t * @type HandlerList\r\n\t * @constructor\r\n\t */\r\n\tfunction HandlerList() {\r\n\t\tthis._list = [];\r\n\t}\r\n\t\r\n\tHandlerList.prototype = {\r\n\t\t/**\r\n\t\t * Adds function handler\r\n\t\t * @param {Function} fn Handler\r\n\t\t * @param {Object} options Handler options. Possible values are:<br><br>\r\n\t\t * <b>order</b> : (<code>Number</code>) – order in handler list. Handlers\r\n\t\t * with higher order value will be executed earlier.\r\n\t\t */\r\n\t\tadd: function(fn, options) {\r\n\t\t\tthis._list.push(_.extend({order: 0}, options || {}, {fn: fn}));\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes handler from list\r\n\t\t * @param {Function} fn\r\n\t\t */\r\n\t\tremove: function(fn) {\r\n\t\t\tthis._list = _.without(this._list, _.find(this._list, function(item) {\r\n\t\t\t\treturn item.fn === fn;\r\n\t\t\t}));\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns ordered list of handlers. By default, handlers \r\n\t\t * with the same <code>order</code> option returned in reverse order, \r\n\t\t * i.e. the latter function was added into the handlers list, the higher \r\n\t\t * it will be in the returned array \r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tlist: function() {\r\n\t\t\treturn _.sortBy(this._list, 'order').reverse();\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns ordered list of handler functions\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tlistFn: function() {\r\n\t\t\treturn _.pluck(this.list(), 'fn');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Executes handler functions in their designated order. If function\r\n\t\t * returns <code>skipVal</code>, meaning that function was unable to \r\n\t\t * handle passed <code>args</code>, the next function will be executed\r\n\t\t * and so on.\r\n\t\t * @param {Object} skipValue If function returns this value, execute \r\n\t\t * next handler.\r\n\t\t * @param {Array} args Arguments to pass to handler function\r\n\t\t * @returns {Boolean} Whether any of registered handlers performed\r\n\t\t * successfully  \r\n\t\t */\r\n\t\texec: function(skipValue, args) {\r\n\t\t\targs = args || [];\r\n\t\t\tvar result = null;\r\n\t\t\t_.find(this.list(), function(h) {\r\n\t\t\t\tresult = h.fn.apply(h, args);\r\n\t\t\t\tif (result !== skipValue)\r\n\t\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Factory method that produces <code>HandlerList</code> instance\r\n\t\t * @returns {HandlerList}\r\n\t\t * @memberOf handlerList\r\n\t\t */\r\n\t\tcreate: function() {\r\n\t\t\treturn new HandlerList();\r\n\t\t}\r\n\t};\r\n});/**\r\n * Helper class for convenient token iteration\r\n */\r\nemmet.define('tokenIterator', function(require, _) {\r\n\t/**\r\n\t * @type TokenIterator\r\n\t * @param {Array} tokens\r\n\t * @type TokenIterator\r\n\t * @constructor\r\n\t */\r\n\tfunction TokenIterator(tokens) {\r\n\t\t/** @type Array */\r\n\t\tthis.tokens = tokens;\r\n\t\tthis._position = 0;\r\n\t\tthis.reset();\r\n\t}\r\n\t\r\n\tTokenIterator.prototype = {\r\n\t\tnext: function() {\r\n\t\t\tif (this.hasNext()) {\r\n\t\t\t\tvar token = this.tokens[++this._i];\r\n\t\t\t\tthis._position = token.start;\r\n\t\t\t\treturn token;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\t\r\n\t\tcurrent: function() {\r\n\t\t\treturn this.tokens[this._i];\r\n\t\t},\r\n\t\t\r\n\t\tposition: function() {\r\n\t\t\treturn this._position;\r\n\t\t},\r\n\t\t\r\n\t\thasNext: function() {\r\n\t\t\treturn this._i < this._il - 1;\r\n\t\t},\r\n\t\t\r\n\t\treset: function() {\r\n\t\t\tthis._i = -1;\r\n\t\t\tthis._il = this.tokens.length;\r\n\t\t},\r\n\t\t\r\n\t\titem: function() {\r\n\t\t\treturn this.tokens[this._i];\r\n\t\t},\r\n\t\t\r\n\t\titemNext: function() {\r\n\t\t\treturn this.tokens[this._i + 1];\r\n\t\t},\r\n\t\t\r\n\t\titemPrev: function() {\r\n\t\t\treturn this.tokens[this._i - 1];\r\n\t\t},\r\n\t\t\r\n\t\tnextUntil: function(type, callback) {\r\n\t\t\tvar token;\r\n\t\t\tvar test = _.isString(type) \r\n\t\t\t\t? function(t){return t.type == type;} \r\n\t\t\t\t: type;\r\n\t\t\t\r\n\t\t\twhile (token = this.next()) {\r\n\t\t\t\tif (callback)\r\n\t\t\t\t\tcallback.call(this, token);\r\n\t\t\t\tif (test.call(this, token))\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn {\r\n\t\tcreate: function(tokens) {\r\n\t\t\treturn new TokenIterator(tokens);\r\n\t\t}\r\n\t};\r\n});/**\r\n * A trimmed version of CodeMirror's StringStream module for string parsing\r\n */\r\nemmet.define('stringStream', function(require, _) {\r\n\t/**\r\n\t * @type StringStream\r\n\t * @constructor\r\n\t * @param {String} string\r\n\t */\r\n\tfunction StringStream(string) {\r\n\t\tthis.pos = this.start = 0;\r\n\t\tthis.string = string;\r\n\t}\r\n\t\r\n\tStringStream.prototype = {\r\n\t\t/**\r\n\t\t * Returns true only if the stream is at the end of the line.\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\teol: function() {\r\n\t\t\treturn this.pos >= this.string.length;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns true only if the stream is at the start of the line\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tsol: function() {\r\n\t\t\treturn this.pos == 0;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns the next character in the stream without advancing it. \r\n\t\t * Will return <code>undefined</code> at the end of the line.\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tpeek: function() {\r\n\t\t\treturn this.string.charAt(this.pos);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns the next character in the stream and advances it.\r\n\t\t * Also returns <code>undefined</code> when no more characters are available.\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tnext: function() {\r\n\t\t\tif (this.pos < this.string.length)\r\n\t\t\t\treturn this.string.charAt(this.pos++);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * match can be a character, a regular expression, or a function that\r\n\t\t * takes a character and returns a boolean. If the next character in the\r\n\t\t * stream 'matches' the given argument, it is consumed and returned.\r\n\t\t * Otherwise, undefined is returned.\r\n\t\t * @param {Object} match\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\teat: function(match) {\r\n\t\t\tvar ch = this.string.charAt(this.pos), ok;\r\n\t\t\tif (typeof match == \"string\")\r\n\t\t\t\tok = ch == match;\r\n\t\t\telse\r\n\t\t\t\tok = ch && (match.test ? match.test(ch) : match(ch));\r\n\t\t\t\r\n\t\t\tif (ok) {\r\n\t\t\t\t++this.pos;\r\n\t\t\t\treturn ch;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Repeatedly calls <code>eat</code> with the given argument, until it\r\n\t\t * fails. Returns <code>true</code> if any characters were eaten.\r\n\t\t * @param {Object} match\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\teatWhile: function(match) {\r\n\t\t\tvar start = this.pos;\r\n\t\t\twhile (this.eat(match)) {}\r\n\t\t\treturn this.pos > start;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Shortcut for <code>eatWhile</code> when matching white-space.\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\teatSpace: function() {\r\n\t\t\tvar start = this.pos;\r\n\t\t\twhile (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\r\n\t\t\t\t++this.pos;\r\n\t\t\treturn this.pos > start;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Moves the position to the end of the line.\r\n\t\t */\r\n\t\tskipToEnd: function() {\r\n\t\t\tthis.pos = this.string.length;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Skips to the next occurrence of the given character, if found on the\r\n\t\t * current line (doesn't advance the stream if the character does not\r\n\t\t * occur on the line). Returns true if the character was found.\r\n\t\t * @param {String} ch\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tskipTo: function(ch) {\r\n\t\t\tvar found = this.string.indexOf(ch, this.pos);\r\n\t\t\tif (found > -1) {\r\n\t\t\t\tthis.pos = found;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Skips to <code>close</code> character which is pair to <code>open</code>\r\n\t\t * character, considering possible pair nesting. This function is used\r\n\t\t * to consume pair of characters, like opening and closing braces\r\n\t\t * @param {String} open\r\n\t\t * @param {String} close\r\n\t\t * @returns {Boolean} Returns <code>true</code> if pair was successfully\r\n\t\t * consumed\r\n\t\t */\r\n\t\tskipToPair: function(open, close) {\r\n\t\t\tvar braceCount = 0, ch;\r\n\t\t\tvar pos = this.pos, len = this.string.length;\r\n\t\t\twhile (pos < len) {\r\n\t\t\t\tch = this.string.charAt(pos++);\r\n\t\t\t\tif (ch == open) {\r\n\t\t\t\t\tbraceCount++;\r\n\t\t\t\t} else if (ch == close) {\r\n\t\t\t\t\tbraceCount--;\r\n\t\t\t\t\tif (braceCount < 1) {\r\n\t\t\t\t\t\tthis.pos = pos;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Backs up the stream n characters. Backing it up further than the\r\n\t\t * start of the current token will cause things to break, so be careful.\r\n\t\t * @param {Number} n\r\n\t\t */\r\n\t\tbackUp : function(n) {\r\n\t\t\tthis.pos -= n;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Act like a multi-character <code>eat</code>—if <code>consume</code> is true or\r\n\t\t * not given—or a look-ahead that doesn't update the stream position—if\r\n\t\t * it is false. <code>pattern</code> can be either a string or a\r\n\t\t * regular expression starting with ^. When it is a string,\r\n\t\t * <code>caseInsensitive</code> can be set to true to make the match\r\n\t\t * case-insensitive. When successfully matching a regular expression,\r\n\t\t * the returned value will be the array returned by <code>match</code>,\r\n\t\t * in case you need to extract matched groups.\r\n\t\t * \r\n\t\t * @param {RegExp} pattern\r\n\t\t * @param {Boolean} consume\r\n\t\t * @param {Boolean} caseInsensitive\r\n\t\t * @returns\r\n\t\t */\r\n\t\tmatch: function(pattern, consume, caseInsensitive) {\r\n\t\t\tif (typeof pattern == \"string\") {\r\n\t\t\t\tvar cased = caseInsensitive\r\n\t\t\t\t\t? function(str) {return str.toLowerCase();}\r\n\t\t\t\t\t: function(str) {return str;};\r\n\t\t\t\t\r\n\t\t\t\tif (cased(this.string).indexOf(cased(pattern), this.pos) == this.pos) {\r\n\t\t\t\t\tif (consume !== false)\r\n\t\t\t\t\t\tthis.pos += pattern.length;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar match = this.string.slice(this.pos).match(pattern);\r\n\t\t\t\tif (match && consume !== false)\r\n\t\t\t\t\tthis.pos += match[0].length;\r\n\t\t\t\treturn match;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Get the string between the start of the current token and the \r\n\t\t * current stream position.\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tcurrent: function() {\r\n\t\t\treturn this.string.slice(this.start, this.pos);\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn {\r\n\t\tcreate: function(string) {\r\n\t\t\treturn new StringStream(string);\r\n\t\t}\r\n\t};\r\n});/**\r\n * Parsed resources (snippets, abbreviations, variables, etc.) for Emmet.\r\n * Contains convenient method to get access for snippets with respect of \r\n * inheritance. Also provides ability to store data in different vocabularies\r\n * ('system' and 'user') for fast and safe resource update\r\n * @author Sergey Chikuyonok (serge.che@gmail.com)\r\n * @link http://chikuyonok.ru\r\n * \r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('resources', function(require, _) {\r\n\tvar VOC_SYSTEM = 'system';\r\n\tvar VOC_USER = 'user';\r\n\t\r\n\tvar cache = {};\r\n\t\t\r\n\t/** Regular expression for XML tag matching */\r\n\tvar reTag = /^<(\\w+\\:?[\\w\\-]*)((?:\\s+[\\w\\:\\-]+\\s*=\\s*(['\"]).*?\\3)*)\\s*(\\/?)>/;\r\n\t\t\r\n\tvar systemSettings = {};\r\n\tvar userSettings = {};\r\n\t\r\n\t/** @type HandlerList List of registered abbreviation resolvers */\r\n\tvar resolvers = require('handlerList').create();\r\n\t\r\n\t/**\r\n\t * Normalizes caret plceholder in passed text: replaces | character with\r\n\t * default caret placeholder\r\n\t * @param {String} text\r\n\t * @returns {String}\r\n\t */\r\n\tfunction normalizeCaretPlaceholder(text) {\r\n\t\tvar utils = require('utils');\r\n\t\treturn utils.replaceUnescapedSymbol(text, '|', utils.getCaretPlaceholder());\r\n\t}\r\n\t\r\n\tfunction parseItem(name, value, type) {\r\n\t\tvalue = normalizeCaretPlaceholder(value);\r\n\t\t\r\n\t\tif (type == 'snippets') {\r\n\t\t\treturn require('elements').create('snippet', value);\r\n\t\t}\r\n\t\t\r\n\t\tif (type == 'abbreviations') {\r\n\t\t\treturn parseAbbreviation(name, value);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parses single abbreviation\r\n\t * @param {String} key Abbreviation name\r\n\t * @param {String} value Abbreviation value\r\n\t * @return {Object}\r\n\t */\r\n\tfunction parseAbbreviation(key, value) {\r\n\t\tkey = require('utils').trim(key);\r\n\t\tvar elements = require('elements');\r\n\t\tvar m;\r\n\t\tif (m = reTag.exec(value)) {\r\n\t\t\treturn elements.create('element', m[1], m[2], m[4] == '/');\r\n\t\t} else {\r\n\t\t\t// assume it's reference to another abbreviation\r\n\t\t\treturn elements.create('reference', value);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Normalizes snippet key name for better fuzzy search\r\n\t * @param {String} str\r\n\t * @returns {String}\r\n\t */\r\n\tfunction normalizeName(str) {\r\n\t\treturn str.replace(/:$/, '').replace(/:/g, '-');\r\n\t}\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Sets new unparsed data for specified settings vocabulary\r\n\t\t * @param {Object} data\r\n\t\t * @param {String} type Vocabulary type ('system' or 'user')\r\n\t\t * @memberOf resources\r\n\t\t */\r\n\t\tsetVocabulary: function(data, type) {\r\n\t\t\tcache = {};\r\n\t\t\tif (type == VOC_SYSTEM)\r\n\t\t\t\tsystemSettings = data;\r\n\t\t\telse\r\n\t\t\t\tuserSettings = data;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns resource vocabulary by its name\r\n\t\t * @param {String} name Vocabulary name ('system' or 'user')\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tgetVocabulary: function(name) {\r\n\t\t\treturn name == VOC_SYSTEM ? systemSettings : userSettings;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns resource (abbreviation, snippet, etc.) matched for passed \r\n\t\t * abbreviation\r\n\t\t * @param {AbbreviationNode} node\r\n\t\t * @param {String} syntax\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tgetMatchedResource: function(node, syntax) {\r\n\t\t\treturn resolvers.exec(null, _.toArray(arguments)) \r\n\t\t\t\t|| this.findSnippet(syntax, node.name());\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns variable value\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tgetVariable: function(name) {\r\n\t\t\treturn (this.getSection('variables') || {})[name];\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Store runtime variable in user storage\r\n\t\t * @param {String} name Variable name\r\n\t\t * @param {String} value Variable value\r\n\t\t */\r\n\t\tsetVariable: function(name, value){\r\n\t\t\tvar voc = this.getVocabulary('user') || {};\r\n\t\t\tif (!('variables' in voc))\r\n\t\t\t\tvoc.variables = {};\r\n\t\t\t\t\r\n\t\t\tvoc.variables[name] = value;\r\n\t\t\tthis.setVocabulary(voc, 'user');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if there are resources for specified syntax\r\n\t\t * @param {String} syntax\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\thasSyntax: function(syntax) {\r\n\t\t\treturn syntax in this.getVocabulary(VOC_USER) \r\n\t\t\t\t|| syntax in this.getVocabulary(VOC_SYSTEM);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Registers new abbreviation resolver.\r\n\t\t * @param {Function} fn Abbreviation resolver which will receive \r\n\t\t * abbreviation as first argument and should return parsed abbreviation\r\n\t\t * object if abbreviation has handled successfully, <code>null</code>\r\n\t\t * otherwise\r\n\t\t * @param {Object} options Options list as described in \r\n\t\t * {@link HandlerList#add()} method\r\n\t\t */\r\n\t\taddResolver: function(fn, options) {\r\n\t\t\tresolvers.add(fn, options);\r\n\t\t},\r\n\t\t\r\n\t\tremoveResolver: function(fn) {\r\n\t\t\tresolvers.remove(fn);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns actual section data, merged from both\r\n\t\t * system and user data\r\n\t\t * @param {String} name Section name (syntax)\r\n\t\t * @param {String} ...args Subsections\r\n\t\t * @returns\r\n\t\t */\r\n\t\tgetSection: function(name) {\r\n\t\t\tif (!name)\r\n\t\t\t\treturn null;\r\n\t\t\t\r\n\t\t\tif (!(name in cache)) {\r\n\t\t\t\tcache[name] = require('utils').deepMerge({}, systemSettings[name], userSettings[name]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar data = cache[name], subsections = _.rest(arguments), key;\r\n\t\t\twhile (data && (key = subsections.shift())) {\r\n\t\t\t\tif (key in data) {\r\n\t\t\t\t\tdata = data[key];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn data;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Recursively searches for a item inside top level sections (syntaxes)\r\n\t\t * with respect of `extends` attribute\r\n\t\t * @param {String} topSection Top section name (syntax)\r\n\t\t * @param {String} subsection Inner section name\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tfindItem: function(topSection, subsection) {\r\n\t\t\tvar data = this.getSection(topSection);\r\n\t\t\twhile (data) {\r\n\t\t\t\tif (subsection in data)\r\n\t\t\t\t\treturn data[subsection];\r\n\t\t\t\t\r\n\t\t\t\tdata = this.getSection(data['extends']);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Recursively searches for a snippet definition inside syntax section.\r\n\t\t * Definition is searched inside `snippets` and `abbreviations` \r\n\t\t * subsections  \r\n\t\t * @param {String} syntax Top-level section name (syntax)\r\n\t\t * @param {String} name Snippet name\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tfindSnippet: function(syntax, name, memo) {\r\n\t\t\tif (!syntax || !name)\r\n\t\t\t\treturn null;\r\n\t\t\t\r\n\t\t\tmemo = memo || [];\r\n\t\t\t\r\n\t\t\tvar names = [name];\r\n\t\t\t// create automatic aliases to properties with colons,\r\n\t\t\t// e.g. pos-a == pos:a\r\n\t\t\tif (~name.indexOf('-'))\r\n\t\t\t\tnames.push(name.replace(/\\-/g, ':'));\r\n\t\t\t\r\n\t\t\tvar data = this.getSection(syntax), matchedItem = null;\r\n\t\t\t_.find(['snippets', 'abbreviations'], function(sectionName) {\r\n\t\t\t\tvar data = this.getSection(syntax, sectionName);\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\treturn _.find(names, function(n) {\r\n\t\t\t\t\t\tif (data[n])\r\n\t\t\t\t\t\t\treturn matchedItem = parseItem(n, data[n], sectionName);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\t\r\n\t\t\tmemo.push(syntax);\r\n\t\t\tif (!matchedItem && data['extends'] && !_.include(memo, data['extends'])) {\r\n\t\t\t\t// try to find item in parent syntax section\r\n\t\t\t\treturn this.findSnippet(data['extends'], name, memo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn matchedItem;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Performs fuzzy search of snippet definition\r\n\t\t * @param {String} syntax Top-level section name (syntax)\r\n\t\t * @param {String} name Snippet name\r\n\t\t * @returns\r\n\t\t */\r\n\t\tfuzzyFindSnippet: function(syntax, name, minScore) {\r\n\t\t\tminScore = minScore || 0.3;\r\n\t\t\t\r\n\t\t\tvar payload = this.getAllSnippets(syntax);\r\n\t\t\tvar sc = require('string-score');\r\n\t\t\t\r\n\t\t\tname = normalizeName(name);\r\n\t\t\tvar scores = _.map(payload, function(value, key) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tkey: key,\r\n\t\t\t\t\tscore: sc.score(value.nk, name, 0.1)\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar result = _.last(_.sortBy(scores, 'score'));\r\n\t\t\tif (result && result.score >= minScore) {\r\n\t\t\t\tvar k = result.key;\r\n\t\t\t\treturn payload[k].parsedValue;\r\n//\t\t\t\treturn parseItem(k, payload[k].value, payload[k].type);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns plain dictionary of all available abbreviations and snippets\r\n\t\t * for specified syntax with respect of inheritance\r\n\t\t * @param {String} syntax\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tgetAllSnippets: function(syntax) {\r\n\t\t\tvar cacheKey = 'all-' + syntax;\r\n\t\t\tif (!cache[cacheKey]) {\r\n\t\t\t\tvar stack = [], sectionKey = syntax;\r\n\t\t\t\tvar memo = [];\r\n\t\t\t\t\r\n\t\t\t\tdo {\r\n\t\t\t\t\tvar section = this.getSection(sectionKey);\r\n\t\t\t\t\tif (!section)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\t\t_.each(['snippets', 'abbreviations'], function(sectionName) {\r\n\t\t\t\t\t\tvar stackItem = {};\r\n\t\t\t\t\t\t_.each(section[sectionName] || null, function(v, k) {\r\n\t\t\t\t\t\t\tstackItem[k] = {\r\n\t\t\t\t\t\t\t\tnk: normalizeName(k),\r\n\t\t\t\t\t\t\t\tvalue: v,\r\n\t\t\t\t\t\t\t\tparsedValue: parseItem(k, v, sectionName),\r\n\t\t\t\t\t\t\t\ttype: sectionName\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tstack.push(stackItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tmemo.push(sectionKey);\r\n\t\t\t\t\tsectionKey = section['extends'];\r\n\t\t\t\t} while (sectionKey && !_.include(memo, sectionKey));\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tcache[cacheKey] = _.extend.apply(_, stack.reverse());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn cache[cacheKey];\r\n\t\t}\r\n\t};\r\n});/**\r\n * Module describes and performs Emmet actions. The actions themselves are\r\n * defined in <i>actions</i> folder\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('actions', function(require, _, zc) {\r\n\tvar actions = {};\r\n\t\r\n\t/**\r\n\t * “Humanizes” action name, makes it more readable for people\r\n\t * @param {String} name Action name (like 'expand_abbreviation')\r\n\t * @return Humanized name (like 'Expand Abbreviation')\r\n\t */\r\n\tfunction humanizeActionName(name) {\r\n\t\treturn require('utils').trim(name.charAt(0).toUpperCase() \r\n\t\t\t+ name.substring(1).replace(/_[a-z]/g, function(str) {\r\n\t\t\t\treturn ' ' + str.charAt(1).toUpperCase();\r\n\t\t\t}));\r\n\t}\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Registers new action\r\n\t\t * @param {String} name Action name\r\n\t\t * @param {Function} fn Action function\r\n\t\t * @param {Object} options Custom action options:<br>\r\n\t\t * <b>label</b> : (<code>String</code>) – Human-readable action name. \r\n\t\t * May contain '/' symbols as submenu separators<br>\r\n\t\t * <b>hidden</b> : (<code>Boolean</code>) – Indicates whether action\r\n\t\t * should be displayed in menu (<code>getMenu()</code> method)\r\n\t\t * \r\n\t\t * @memberOf actions\r\n\t\t */\r\n\t\tadd: function(name, fn, options) {\r\n\t\t\tname = name.toLowerCase();\r\n\t\t\toptions = options || {};\r\n\t\t\tif (!options.label) {\r\n\t\t\t\toptions.label = humanizeActionName(name);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tactions[name] = {\r\n\t\t\t\tname: name,\r\n\t\t\t\tfn: fn,\r\n\t\t\t\toptions: options\r\n\t\t\t};\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns action object\r\n\t\t * @param {String} name Action name\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tget: function(name) {\r\n\t\t\treturn actions[name.toLowerCase()];\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Runs Emmet action. For list of available actions and their\r\n\t\t * arguments see <i>actions</i> folder.\r\n\t\t * @param {String} name Action name \r\n\t\t * @param {Array} args Additional arguments. It may be array of arguments\r\n\t\t * or inline arguments. The first argument should be <code>IEmmetEditor</code> instance\r\n\t\t * @returns {Boolean} Status of performed operation, <code>true</code>\r\n\t\t * means action was performed successfully.\r\n\t\t * @example\r\n\t\t * emmet.require('actions').run('expand_abbreviation', editor);  \r\n\t\t * emmet.require('actions').run('wrap_with_abbreviation', [editor, 'div']);  \r\n\t\t */\r\n\t\trun: function(name, args) {\r\n\t\t\tif (!_.isArray(args)) {\r\n\t\t\t\targs = _.rest(arguments);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar action = this.get(name);\r\n\t\t\tif (action) {\r\n\t\t\t\treturn action.fn.apply(emmet, args);\r\n\t\t\t} else {\r\n\t\t\t\temmet.log('Action \"%s\" is not defined', name);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns all registered actions as object\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tgetAll: function() {\r\n\t\t\treturn actions;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns all registered actions as array\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tgetList: function() {\r\n\t\t\treturn _.values(this.getAll());\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns actions list as structured menu. If action has <i>label</i>,\r\n\t\t * it will be splitted by '/' symbol into submenus (for example: \r\n\t\t * CSS/Reflect Value) and grouped with other items\r\n\t\t * @param {Array} skipActions List of action identifiers that should be \r\n\t\t * skipped from menu\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tgetMenu: function(skipActions) {\r\n\t\t\tvar result = [];\r\n\t\t\tskipActions = skipActions || [];\r\n\t\t\t_.each(this.getList(), function(action) {\r\n\t\t\t\tif (action.options.hidden || _.include(skipActions, action.name))\r\n\t\t\t\t\treturn;\r\n\t\t\t\t\r\n\t\t\t\tvar actionName = humanizeActionName(action.name);\r\n\t\t\t\tvar ctx = result;\r\n\t\t\t\tif (action.options.label) {\r\n\t\t\t\t\tvar parts = action.options.label.split('/');\r\n\t\t\t\t\tactionName = parts.pop();\r\n\t\t\t\t\t\r\n\t\t\t\t\t// create submenus, if needed\r\n\t\t\t\t\tvar menuName, submenu;\r\n\t\t\t\t\twhile (menuName = parts.shift()) {\r\n\t\t\t\t\t\tsubmenu = _.find(ctx, function(item) {\r\n\t\t\t\t\t\t\treturn item.type == 'submenu' && item.name == menuName;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!submenu) {\r\n\t\t\t\t\t\t\tsubmenu = {\r\n\t\t\t\t\t\t\t\tname: menuName,\r\n\t\t\t\t\t\t\t\ttype: 'submenu',\r\n\t\t\t\t\t\t\t\titems: []\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tctx.push(submenu);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tctx = submenu.items;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tctx.push({\r\n\t\t\t\t\ttype: 'action',\r\n\t\t\t\t\tname: action.name,\r\n\t\t\t\t\tlabel: actionName\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns action name associated with menu item title\r\n\t\t * @param {String} title\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tgetActionNameForMenuTitle: function(title, menu) {\r\n\t\t\tvar item = null;\r\n\t\t\t_.find(menu || this.getMenu(), function(val) {\r\n\t\t\t\tif (val.type == 'action') {\r\n\t\t\t\t\tif (val.label == title || val.name == title) {\r\n\t\t\t\t\t\treturn item = val.name;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn item = this.getActionNameForMenuTitle(title, val.items);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\t\r\n\t\t\treturn item || null;\r\n\t\t}\r\n\t};\r\n});/**\r\n * Output profile module.\r\n * Profile defines how XHTML output data should look like\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('profile', function(require, _) {\r\n\tvar profiles = {};\r\n\t\r\n\tvar defaultProfile = {\r\n\t\ttag_case: 'asis',\r\n\t\tattr_case: 'asis',\r\n\t\tattr_quotes: 'double',\r\n\t\t\r\n\t\t// each tag on new line\r\n\t\ttag_nl: 'decide',\r\n\t\t\r\n\t\t// with tag_nl === true, defines if leaf node (e.g. node with no children)\r\n\t\t// should have formatted line breaks\r\n\t\ttag_nl_leaf: false,\r\n\t\t\r\n\t\tplace_cursor: true,\r\n\t\t\r\n\t\t// indent tags\r\n\t\tindent: true,\r\n\t\t\r\n\t\t// how many inline elements should be to force line break \r\n\t\t// (set to 0 to disable)\r\n\t\tinline_break: 3,\r\n\t\t\r\n\t\t// use self-closing style for writing empty elements, e.g. <br /> or <br>\r\n\t\tself_closing_tag: 'xhtml',\r\n\t\t\r\n\t\t// Profile-level output filters, re-defines syntax filters \r\n\t\tfilters: '',\r\n\t\t\r\n\t\t// Additional filters applied to abbreviation.\r\n\t\t// Unlike \"filters\", this preference doesn't override default filters\r\n\t\t// but add the instead every time given profile is chosen\r\n\t\textraFilters: ''\r\n\t};\r\n\t\r\n\t/**\r\n\t * @constructor\r\n\t * @type OutputProfile\r\n\t * @param {Object} options\r\n\t */\r\n\tfunction OutputProfile(options) {\r\n\t\t_.extend(this, defaultProfile, options);\r\n\t}\r\n\t\r\n\tOutputProfile.prototype = {\r\n\t\t/**\r\n\t\t * Transforms tag name case depending on current profile settings\r\n\t\t * @param {String} name String to transform\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\ttagName: function(name) {\r\n\t\t\treturn stringCase(name, this.tag_case);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Transforms attribute name case depending on current profile settings \r\n\t\t * @param {String} name String to transform\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tattributeName: function(name) {\r\n\t\t\treturn stringCase(name, this.attr_case);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns quote character for current profile\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tattributeQuote: function() {\r\n\t\t\treturn this.attr_quotes == 'single' ? \"'\" : '\"';\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns self-closing tag symbol for current profile\r\n\t\t * @param {String} param\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tselfClosing: function(param) {\r\n\t\t\tif (this.self_closing_tag == 'xhtml')\r\n\t\t\t\treturn ' /';\r\n\t\t\t\r\n\t\t\tif (this.self_closing_tag === true)\r\n\t\t\t\treturn '/';\r\n\t\t\t\r\n\t\t\treturn '';\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns cursor token based on current profile settings\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tcursor: function() {\r\n\t\t\treturn this.place_cursor ? require('utils').getCaretPlaceholder() : '';\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * Helper function that converts string case depending on \r\n\t * <code>caseValue</code> \r\n\t * @param {String} str String to transform\r\n\t * @param {String} caseValue Case value: can be <i>lower</i>, \r\n\t * <i>upper</i> and <i>leave</i>\r\n\t * @returns {String}\r\n\t */\r\n\tfunction stringCase(str, caseValue) {\r\n\t\tswitch (String(caseValue || '').toLowerCase()) {\r\n\t\t\tcase 'lower':\r\n\t\t\t\treturn str.toLowerCase();\r\n\t\t\tcase 'upper':\r\n\t\t\t\treturn str.toUpperCase();\r\n\t\t}\r\n\t\t\r\n\t\treturn str;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates new output profile\r\n\t * @param {String} name Profile name\r\n\t * @param {Object} options Profile options\r\n\t */\r\n\tfunction createProfile(name, options) {\r\n\t\treturn profiles[name.toLowerCase()] = new OutputProfile(options);\r\n\t}\r\n\t\r\n\tfunction createDefaultProfiles() {\r\n\t\tcreateProfile('xhtml');\r\n\t\tcreateProfile('html', {self_closing_tag: false});\r\n\t\tcreateProfile('xml', {self_closing_tag: true, tag_nl: true});\r\n\t\tcreateProfile('plain', {tag_nl: false, indent: false, place_cursor: false});\r\n\t\tcreateProfile('line', {tag_nl: false, indent: false, extraFilters: 's'});\r\n\t}\r\n\t\r\n\tcreateDefaultProfiles();\r\n\t\r\n\treturn  {\r\n\t\t/**\r\n\t\t * Creates new output profile and adds it into internal dictionary\r\n\t\t * @param {String} name Profile name\r\n\t\t * @param {Object} options Profile options\r\n\t\t * @memberOf emmet.profile\r\n\t\t * @returns {Object} New profile\r\n\t\t */\r\n\t\tcreate: function(name, options) {\r\n\t\t\tif (arguments.length == 2)\r\n\t\t\t\treturn createProfile(name, options);\r\n\t\t\telse\r\n\t\t\t\t// create profile object only\r\n\t\t\t\treturn new OutputProfile(_.defaults(name || {}, defaultProfile));\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns profile by its name. If profile wasn't found, returns\r\n\t\t * 'plain' profile\r\n\t\t * @param {String} name Profile name. Might be profile itself\r\n\t\t * @param {String} syntax. Optional. Current editor syntax. If defined,\r\n\t\t * profile is searched in resources first, then in predefined profiles\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tget: function(name, syntax) {\r\n\t\t\tif (!name && syntax) {\r\n\t\t\t\t// search in user resources first\r\n\t\t\t\tvar profile = require('resources').findItem(syntax, 'profile');\r\n\t\t\t\tif (profile) {\r\n\t\t\t\t\tname = profile;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!name) {\r\n\t\t\t\treturn profiles.plain;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (name instanceof OutputProfile) {\r\n\t\t\t\treturn name;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (_.isString(name) && name.toLowerCase() in profiles) {\r\n\t\t\t\treturn profiles[name.toLowerCase()];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this.create(name);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Deletes profile with specified name\r\n\t\t * @param {String} name Profile name\r\n\t\t */\r\n\t\tremove: function(name) {\r\n\t\t\tname = (name || '').toLowerCase();\r\n\t\t\tif (name in profiles)\r\n\t\t\t\tdelete profiles[name];\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Resets all user-defined profiles\r\n\t\t */\r\n\t\treset: function() {\r\n\t\t\tprofiles = {};\r\n\t\t\tcreateDefaultProfiles();\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Helper function that converts string case depending on \r\n\t\t * <code>caseValue</code> \r\n\t\t * @param {String} str String to transform\r\n\t\t * @param {String} caseValue Case value: can be <i>lower</i>, \r\n\t\t * <i>upper</i> and <i>leave</i>\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tstringCase: stringCase\r\n\t};\r\n});/**\r\n * Utility module used to prepare text for pasting into back-end editor\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n * @author Sergey Chikuyonok (serge.che@gmail.com) <http://chikuyonok.ru>\r\n */\r\nemmet.define('editorUtils', function(require, _) {\r\n\treturn  {\r\n\t\t/**\r\n\t\t * Check if cursor is placed inside XHTML tag\r\n\t\t * @param {String} html Contents of the document\r\n\t\t * @param {Number} caretPos Current caret position inside tag\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tisInsideTag: function(html, caretPos) {\r\n\t\t\tvar reTag = /^<\\/?\\w[\\w\\:\\-]*.*?>/;\r\n\t\t\t\r\n\t\t\t// search left to find opening brace\r\n\t\t\tvar pos = caretPos;\r\n\t\t\twhile (pos > -1) {\r\n\t\t\t\tif (html.charAt(pos) == '<') \r\n\t\t\t\t\tbreak;\r\n\t\t\t\tpos--;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (pos != -1) {\r\n\t\t\t\tvar m = reTag.exec(html.substring(pos));\r\n\t\t\t\tif (m && caretPos > pos && caretPos < pos + m[0].length)\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Sanitizes incoming editor data and provides default values for\r\n\t\t * output-specific info\r\n\t\t * @param {IEmmetEditor} editor\r\n\t\t * @param {String} syntax\r\n\t\t * @param {String} profile\r\n\t\t */\r\n\t\toutputInfo: function(editor, syntax, profile) {\r\n\t\t\t// most of this code makes sense for Java/Rhino environment\r\n\t\t\t// because string that comes from Java are not actually JS string\r\n\t\t\t// but Java String object so the have to be explicitly converted\r\n\t\t\t// to native string\r\n\t\t\tprofile = profile || editor.getProfileName();\r\n\t\t\treturn  {\r\n\t\t\t\t/** @memberOf outputInfo */\r\n\t\t\t\tsyntax: String(syntax || editor.getSyntax()),\r\n\t\t\t\tprofile: profile || null,\r\n\t\t\t\tcontent: String(editor.getContent())\r\n\t\t\t};\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Unindent content, thus preparing text for tag wrapping\r\n\t\t * @param {IEmmetEditor} editor Editor instance\r\n\t\t * @param {String} text\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tunindent: function(editor, text) {\r\n\t\t\treturn require('utils').unindentString(text, this.getCurrentLinePadding(editor));\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns padding of current editor's line\r\n\t\t * @param {IEmmetEditor} Editor instance\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tgetCurrentLinePadding: function(editor) {\r\n\t\t\treturn require('utils').getLinePadding(editor.getCurrentLine());\r\n\t\t}\r\n\t};\r\n});\r\n/**\r\n * Utility methods for Emmet actions\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n * @author Sergey Chikuyonok (serge.che@gmail.com) <http://chikuyonok.ru>\r\n */\r\nemmet.define('actionUtils', function(require, _) {\r\n\treturn {\r\n\t\tmimeTypes: {\r\n\t\t\t'gif' : 'image/gif',\r\n\t\t\t'png' : 'image/png',\r\n\t\t\t'jpg' : 'image/jpeg',\r\n\t\t\t'jpeg': 'image/jpeg',\r\n\t\t\t'svg' : 'image/svg+xml',\r\n\t\t\t'html': 'text/html',\r\n\t\t\t'htm' : 'text/html'\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Extracts abbreviations from text stream, starting from the end\r\n\t\t * @param {String} str\r\n\t\t * @return {String} Abbreviation or empty string\r\n\t\t * @memberOf emmet.actionUtils\r\n\t\t */\r\n\t\textractAbbreviation: function(str) {\r\n\t\t\tvar curOffset = str.length;\r\n\t\t\tvar startIndex = -1;\r\n\t\t\tvar groupCount = 0;\r\n\t\t\tvar braceCount = 0;\r\n\t\t\tvar textCount = 0;\r\n\t\t\t\r\n\t\t\tvar utils = require('utils');\r\n\t\t\tvar parser = require('abbreviationParser');\r\n\t\t\t\r\n\t\t\twhile (true) {\r\n\t\t\t\tcurOffset--;\r\n\t\t\t\tif (curOffset < 0) {\r\n\t\t\t\t\t// moved to the beginning of the line\r\n\t\t\t\t\tstartIndex = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar ch = str.charAt(curOffset);\r\n\t\t\t\t\r\n\t\t\t\tif (ch == ']') {\r\n\t\t\t\t\tbraceCount++;\r\n\t\t\t\t} else if (ch == '[') {\r\n\t\t\t\t\tif (!braceCount) { // unexpected brace\r\n\t\t\t\t\t\tstartIndex = curOffset + 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbraceCount--;\r\n\t\t\t\t} else if (ch == '}') {\r\n\t\t\t\t\ttextCount++;\r\n\t\t\t\t} else if (ch == '{') {\r\n\t\t\t\t\tif (!textCount) { // unexpected brace\r\n\t\t\t\t\t\tstartIndex = curOffset + 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttextCount--;\r\n\t\t\t\t} else if (ch == ')') {\r\n\t\t\t\t\tgroupCount++;\r\n\t\t\t\t} else if (ch == '(') {\r\n\t\t\t\t\tif (!groupCount) { // unexpected brace\r\n\t\t\t\t\t\tstartIndex = curOffset + 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgroupCount--;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (braceCount || textCount) \r\n\t\t\t\t\t\t// respect all characters inside attribute sets or text nodes\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\telse if (!parser.isAllowedChar(ch) || (ch == '>' && utils.endsWithTag(str.substring(0, curOffset + 1)))) {\r\n\t\t\t\t\t\t// found stop symbol\r\n\t\t\t\t\t\tstartIndex = curOffset + 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (startIndex != -1 && !textCount && !braceCount && !groupCount) \r\n\t\t\t\t// found something, remove some invalid symbols from the \r\n\t\t\t\t// beginning and return abbreviation\r\n\t\t\t\treturn str.substring(startIndex).replace(/^[\\*\\+\\>\\^]+/, '');\r\n\t\t\telse\r\n\t\t\t\treturn '';\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Gets image size from image byte stream.\r\n\t\t * @author http://romeda.org/rePublish/\r\n\t\t * @param {String} stream Image byte stream (use <code>IEmmetFile.read()</code>)\r\n\t\t * @return {Object} Object with <code>width</code> and <code>height</code> properties\r\n\t\t */\r\n\t\tgetImageSize: function(stream) {\r\n\t\t\tvar pngMagicNum = \"\\211PNG\\r\\n\\032\\n\",\r\n\t\t\t\tjpgMagicNum = \"\\377\\330\",\r\n\t\t\t\tgifMagicNum = \"GIF8\",\r\n\t\t\t\tnextByte = function() {\r\n\t\t\t\t\treturn stream.charCodeAt(pos++);\r\n\t\t\t\t};\r\n\t\t\r\n\t\t\tif (stream.substr(0, 8) === pngMagicNum) {\r\n\t\t\t\t// PNG. Easy peasy.\r\n\t\t\t\tvar pos = stream.indexOf('IHDR') + 4;\r\n\t\t\t\r\n\t\t\t\treturn { width:  (nextByte() << 24) | (nextByte() << 16) |\r\n\t\t\t\t\t\t\t\t (nextByte() <<  8) | nextByte(),\r\n\t\t\t\t\t\t height: (nextByte() << 24) | (nextByte() << 16) |\r\n\t\t\t\t\t\t\t\t (nextByte() <<  8) | nextByte() };\r\n\t\t\t\r\n\t\t\t} else if (stream.substr(0, 4) === gifMagicNum) {\r\n\t\t\t\tpos = 6;\r\n\t\t\t\r\n\t\t\t\treturn {\r\n\t\t\t\t\twidth:  nextByte() | (nextByte() << 8),\r\n\t\t\t\t\theight: nextByte() | (nextByte() << 8)\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t} else if (stream.substr(0, 2) === jpgMagicNum) {\r\n\t\t\t\tpos = 2;\r\n\t\t\t\r\n\t\t\t\tvar l = stream.length;\r\n\t\t\t\twhile (pos < l) {\r\n\t\t\t\t\tif (nextByte() != 0xFF) return;\r\n\t\t\t\t\r\n\t\t\t\t\tvar marker = nextByte();\r\n\t\t\t\t\tif (marker == 0xDA) break;\r\n\t\t\t\t\r\n\t\t\t\t\tvar size = (nextByte() << 8) | nextByte();\r\n\t\t\t\t\r\n\t\t\t\t\tif (marker >= 0xC0 && marker <= 0xCF && !(marker & 0x4) && !(marker & 0x8)) {\r\n\t\t\t\t\t\tpos += 1;\r\n\t\t\t\t\t\treturn { height:  (nextByte() << 8) | nextByte(),\r\n\t\t\t\t\t\t\t\t width: (nextByte() << 8) | nextByte() };\r\n\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpos += size - 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Captures context XHTML element from editor under current caret position.\r\n\t\t * This node can be used as a helper for abbreviation extraction\r\n\t\t * @param {IEmmetEditor} editor\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tcaptureContext: function(editor) {\r\n\t\t\tvar allowedSyntaxes = {'html': 1, 'xml': 1, 'xsl': 1};\r\n\t\t\tvar syntax = String(editor.getSyntax());\r\n\t\t\tif (syntax in allowedSyntaxes) {\r\n\t\t\t\tvar content = String(editor.getContent());\r\n\t\t\t\tvar tag = require('htmlMatcher').find(content, editor.getCaretPos());\r\n\t\t\t\t\r\n\t\t\t\tif (tag && tag.type == 'tag') {\r\n\t\t\t\t\tvar startTag = tag.open;\r\n\t\t\t\t\tvar contextNode = {\r\n\t\t\t\t\t\tname: startTag.name,\r\n\t\t\t\t\t\tattributes: []\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\t// parse attributes\r\n\t\t\t\t\tvar tagTree = require('xmlEditTree').parse(startTag.range.substring(content));\r\n\t\t\t\t\tif (tagTree) {\r\n\t\t\t\t\t\tcontextNode.attributes = _.map(tagTree.getAll(), function(item) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tname: item.name(),\r\n\t\t\t\t\t\t\t\tvalue: item.value()\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn contextNode;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Find expression bounds in current editor at caret position. \r\n\t\t * On each character a <code>fn</code> function will be called and must \r\n\t\t * return <code>true</code> if current character meets requirements, \r\n\t\t * <code>false</code> otherwise\r\n\t\t * @param {IEmmetEditor} editor\r\n\t\t * @param {Function} fn Function to test each character of expression\r\n\t\t * @return {Range}\r\n\t\t */\r\n\t\tfindExpressionBounds: function(editor, fn) {\r\n\t\t\tvar content = String(editor.getContent());\r\n\t\t\tvar il = content.length;\r\n\t\t\tvar exprStart = editor.getCaretPos() - 1;\r\n\t\t\tvar exprEnd = exprStart + 1;\r\n\t\t\t\t\r\n\t\t\t// start by searching left\r\n\t\t\twhile (exprStart >= 0 && fn(content.charAt(exprStart), exprStart, content)) exprStart--;\r\n\t\t\t\r\n\t\t\t// then search right\r\n\t\t\twhile (exprEnd < il && fn(content.charAt(exprEnd), exprEnd, content)) exprEnd++;\r\n\t\t\t\r\n\t\t\tif (exprEnd > exprStart) {\r\n\t\t\t\treturn require('range').create([++exprStart, exprEnd]);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * @param {IEmmetEditor} editor\r\n\t\t * @param {Object} data\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tcompoundUpdate: function(editor, data) {\r\n\t\t\tif (data) {\r\n\t\t\t\tvar sel = editor.getSelectionRange();\r\n\t\t\t\teditor.replaceContent(data.data, data.start, data.end, true);\r\n\t\t\t\teditor.createSelection(data.caret, data.caret + sel.end - sel.start);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Common syntax detection method for editors that doesn’t provide any\r\n\t\t * info about current syntax scope. \r\n\t\t * @param {IEmmetEditor} editor Current editor\r\n\t\t * @param {String} hint Any syntax hint that editor can provide \r\n\t\t * for syntax detection. Default is 'html'\r\n\t\t * @returns {String} \r\n\t\t */\r\n\t\tdetectSyntax: function(editor, hint) {\r\n\t\t\tvar syntax = hint || 'html';\r\n\t\t\t\r\n\t\t\tif (!require('resources').hasSyntax(syntax)) {\r\n\t\t\t\tsyntax = 'html';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (syntax == 'html' && (this.isStyle(editor) || this.isInlineCSS(editor))) {\r\n\t\t\t\tsyntax = 'css';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn syntax;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Common method for detecting output profile\r\n\t\t * @param {IEmmetEditor} editor\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tdetectProfile: function(editor) {\r\n\t\t\tvar syntax = editor.getSyntax();\r\n\t\t\t\r\n\t\t\t// get profile from syntax definition\r\n\t\t\tvar profile = require('resources').findItem(syntax, 'profile');\r\n\t\t\tif (profile) {\r\n\t\t\t\treturn profile;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tswitch(syntax) {\r\n\t\t\t\tcase 'xml':\r\n\t\t\t\tcase 'xsl':\r\n\t\t\t\t\treturn 'xml';\r\n\t\t\t\tcase 'css':\r\n\t\t\t\t\tif (this.isInlineCSS(editor)) {\r\n\t\t\t\t\t\treturn 'line';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'html':\r\n\t\t\t\t\tvar profile = require('resources').getVariable('profile');\r\n\t\t\t\t\tif (!profile) { // no forced profile, guess from content\r\n\t\t\t\t\t\t// html or xhtml?\r\n\t\t\t\t\t\tprofile = this.isXHTML(editor) ? 'xhtml': 'html';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn profile;\r\n\t\t\t}\r\n\r\n\t\t\treturn 'xhtml';\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Tries to detect if current document is XHTML one.\r\n\t\t * @param {IEmmetEditor} editor\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisXHTML: function(editor) {\r\n\t\t\treturn editor.getContent().search(/<!DOCTYPE[^>]+XHTML/i) != -1;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if current caret position is inside &lt;style&gt; tag\r\n\t\t * @param {IEmmetEditor} editor\r\n\t\t * @returns\r\n\t\t */\r\n\t\tisStyle: function(editor) {\r\n\t\t\tvar content = String(editor.getContent());\r\n\t\t\tvar caretPos = editor.getCaretPos();\r\n\t\t\tvar tag = require('htmlMatcher').tag(content, caretPos);\r\n\t\t\treturn tag && tag.open.name.toLowerCase() == 'style' \r\n\t\t\t\t&& tag.innerRange.cmp(caretPos, 'lte', 'gte');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if current caret position is inside \"style\" attribute of HTML\r\n\t\t * element\r\n\t\t * @param {IEmmetEditor} editor\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisInlineCSS: function(editor) {\r\n\t\t\tvar content = String(editor.getContent());\r\n\t\t\tvar caretPos = editor.getCaretPos();\r\n\t\t\tvar tree = require('xmlEditTree').parseFromPosition(content, caretPos, true);\r\n            if (tree) {\r\n                var attr = tree.itemFromPosition(caretPos, true);\r\n                return attr && attr.name().toLowerCase() == 'style' \r\n                \t&& attr.valueRange(true).cmp(caretPos, 'lte', 'gte');\r\n            }\r\n            \r\n            return false;\r\n\t\t}\r\n\t};\r\n});/**\r\n * Utility functions to work with <code>AbbreviationNode</code> as HTML element\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('abbreviationUtils', function(require, _) {\r\n\treturn {\r\n\t\t/**\r\n\t\t * Check if passed abbreviation node has matched snippet resource\r\n\t\t * @param {AbbreviationNode} node\r\n\t\t * @returns {Boolean}\r\n\t\t * @memberOf abbreviationUtils\r\n\t\t */\r\n\t\tisSnippet: function(node) {\r\n\t\t\treturn require('elements').is(node.matchedResource(), 'snippet');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Test if passed node is unary (no closing tag)\r\n\t\t * @param {AbbreviationNode} node\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tisUnary: function(node) {\r\n\t\t\tif (node.children.length || node._text || this.isSnippet(node)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar r = node.matchedResource();\r\n\t\t\treturn r && r.is_empty;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Test if passed node is inline-level (like &lt;strong&gt;, &lt;img&gt;)\r\n\t\t * @param {AbbreviationNode} node\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tisInline: function(node) {\r\n\t\t\treturn node.isTextNode() \r\n\t\t\t\t|| !node.name() \r\n\t\t\t\t|| require('tagName').isInlineLevel(node.name());\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Test if passed node is block-level\r\n\t\t * @param {AbbreviationNode} node\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tisBlock: function(node) {\r\n\t\t\treturn this.isSnippet(node) || !this.isInline(node);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Test if given node is a snippet\r\n\t\t * @param {AbbreviationNode} node\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tisSnippet: function(node) {\r\n\t\t\treturn require('elements').is(node.matchedResource(), 'snippet');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * This function tests if passed node content contains HTML tags. \r\n\t\t * This function is mostly used for output formatting\r\n\t\t * @param {AbbreviationNode} node\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\thasTagsInContent: function(node) {\r\n\t\t\treturn require('utils').matchesTag(node.content);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Test if current element contains block-level children\r\n\t\t * @param {AbbreviationNode} node\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\thasBlockChildren: function(node) {\r\n\t\t\treturn (this.hasTagsInContent(node) && this.isBlock(node)) \r\n\t\t\t\t|| _.any(node.children, function(child) {\r\n\t\t\t\t\treturn this.isBlock(child);\r\n\t\t\t\t}, this);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Utility function that inserts content instead of <code>${child}</code>\r\n\t\t * variables on <code>text</code>\r\n\t\t * @param {String} text Text where child content should be inserted\r\n\t\t * @param {String} childContent Content to insert\r\n\t\t * @param {Object} options\r\n\t\t * @returns {String\r\n\t\t */\r\n\t\tinsertChildContent: function(text, childContent, options) {\r\n\t\t\toptions = _.extend({\r\n\t\t\t\tkeepVariable: true,\r\n\t\t\t\tappendIfNoChild: true\r\n\t\t\t}, options || {});\r\n\t\t\t\r\n\t\t\tvar childVariableReplaced = false;\r\n\t\t\tvar utils = require('utils');\r\n\t\t\ttext = utils.replaceVariables(text, function(variable, name, data) {\r\n\t\t\t\tvar output = variable;\r\n\t\t\t\tif (name == 'child') {\r\n\t\t\t\t\t// add correct indentation\r\n\t\t\t\t\toutput = utils.padString(childContent, utils.getLinePaddingFromPosition(text, data.start));\r\n\t\t\t\t\tchildVariableReplaced = true;\r\n\t\t\t\t\tif (options.keepVariable)\r\n\t\t\t\t\t\toutput += variable;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn output;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif (!childVariableReplaced && options.appendIfNoChild) {\r\n\t\t\t\ttext += childContent;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn text;\r\n\t\t}\r\n\t};\r\n});/**\r\n * @author Sergey Chikuyonok (serge.che@gmail.com)\r\n * @link http://chikuyonok.ru\r\n */\r\nemmet.define('base64', function(require, _) {\r\n\tvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Encodes data using base64 algorithm\r\n\t\t * @author Tyler Akins (http://rumkin.com)\r\n\t\t * @param {String} input\r\n\t\t * @returns {String}\r\n\t\t * @memberOf emmet.base64\r\n\t\t */\r\n\t\tencode : function(input) {\r\n\t\t\tvar output = [];\r\n\t\t\tvar chr1, chr2, chr3, enc1, enc2, enc3, enc4, cdp1, cdp2, cdp3;\r\n\t\t\tvar i = 0, il = input.length, b64 = chars;\r\n\r\n\t\t\twhile (i < il) {\r\n\r\n\t\t\t\tcdp1 = input.charCodeAt(i++);\r\n\t\t\t\tcdp2 = input.charCodeAt(i++);\r\n\t\t\t\tcdp3 = input.charCodeAt(i++);\r\n\r\n\t\t\t\tchr1 = cdp1 & 0xff;\r\n\t\t\t\tchr2 = cdp2 & 0xff;\r\n\t\t\t\tchr3 = cdp3 & 0xff;\r\n\r\n\t\t\t\tenc1 = chr1 >> 2;\r\n\t\t\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n\t\t\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n\t\t\t\tenc4 = chr3 & 63;\r\n\r\n\t\t\t\tif (isNaN(cdp2)) {\r\n\t\t\t\t\tenc3 = enc4 = 64;\r\n\t\t\t\t} else if (isNaN(cdp3)) {\r\n\t\t\t\t\tenc4 = 64;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toutput.push(b64.charAt(enc1) + b64.charAt(enc2) + b64.charAt(enc3) + b64.charAt(enc4));\r\n\t\t\t}\r\n\r\n\t\t\treturn output.join('');\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Decodes string using MIME base64 algorithm\r\n\t\t * \r\n\t\t * @author Tyler Akins (http://rumkin.com)\r\n\t\t * @param {String} data\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tdecode : function(data) {\r\n\t\t\tvar o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, tmpArr = [];\r\n\t\t\tvar b64 = chars, il = data.length;\r\n\r\n\t\t\tif (!data) {\r\n\t\t\t\treturn data;\r\n\t\t\t}\r\n\r\n\t\t\tdata += '';\r\n\r\n\t\t\tdo { // unpack four hexets into three octets using index points in b64\r\n\t\t\t\th1 = b64.indexOf(data.charAt(i++));\r\n\t\t\t\th2 = b64.indexOf(data.charAt(i++));\r\n\t\t\t\th3 = b64.indexOf(data.charAt(i++));\r\n\t\t\t\th4 = b64.indexOf(data.charAt(i++));\r\n\r\n\t\t\t\tbits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\r\n\r\n\t\t\t\to1 = bits >> 16 & 0xff;\r\n\t\t\t\to2 = bits >> 8 & 0xff;\r\n\t\t\t\to3 = bits & 0xff;\r\n\r\n\t\t\t\tif (h3 == 64) {\r\n\t\t\t\t\ttmpArr[ac++] = String.fromCharCode(o1);\r\n\t\t\t\t} else if (h4 == 64) {\r\n\t\t\t\t\ttmpArr[ac++] = String.fromCharCode(o1, o2);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttmpArr[ac++] = String.fromCharCode(o1, o2, o3);\r\n\t\t\t\t}\r\n\t\t\t} while (i < il);\r\n\r\n\t\t\treturn tmpArr.join('');\r\n\t\t}\r\n\t};\r\n});/**\r\n * HTML matcher: takes string and searches for HTML tag pairs for given position \r\n * \r\n * Unlike “classic” matchers, it parses content from the specified \r\n * position, not from the start, so it may work even outside HTML documents\r\n * (for example, inside strings of programming languages like JavaScript, Python \r\n * etc.)\r\n * @constructor\r\n * @memberOf __htmlMatcherDefine\r\n */\r\nemmet.define('htmlMatcher', function(require, _) {\r\n\t// Regular Expressions for parsing tags and attributes\r\n\tvar reOpenTag = /^<([\\w\\:\\-]+)((?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\r\n\tvar reCloseTag = /^<\\/([\\w\\:\\-]+)[^>]*>/;\r\n\t\r\n\tfunction openTag(i, match) {\r\n\t\treturn {\r\n\t\t\tname: match[1],\r\n\t\t\tselfClose: !!match[3],\r\n\t\t\t/** @type Range */\r\n\t\t\trange: require('range').create(i, match[0]),\r\n\t\t\ttype: 'open'\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction closeTag(i, match) {\r\n\t\treturn {\r\n\t\t\tname: match[1],\r\n\t\t\t/** @type Range */\r\n\t\t\trange: require('range').create(i, match[0]),\r\n\t\t\ttype: 'close'\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction comment(i, match) {\r\n\t\treturn {\r\n\t\t\t/** @type Range */\r\n\t\t\trange: require('range').create(i, _.isNumber(match) ? match - i : match[0]),\r\n\t\t\ttype: 'comment'\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates new tag matcher session\r\n\t * @param {String} text\r\n\t */\r\n\tfunction createMatcher(text) {\r\n\t\tvar memo = {}, m;\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * Test if given position matches opening tag\r\n\t\t\t * @param {Number} i\r\n\t\t\t * @returns {Object} Matched tag object\r\n\t\t\t */\r\n\t\t\topen: function(i) {\r\n\t\t\t\tvar m = this.matches(i);\r\n\t\t\t\treturn m && m.type == 'open' ? m : null;\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Test if given position matches closing tag\r\n\t\t\t * @param {Number} i\r\n\t\t\t * @returns {Object} Matched tag object\r\n\t\t\t */\r\n\t\t\tclose: function(i) {\r\n\t\t\t\tvar m = this.matches(i);\r\n\t\t\t\treturn m && m.type == 'close' ? m : null;\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Matches either opening or closing tag for given position\r\n\t\t\t * @param i\r\n\t\t\t * @returns\r\n\t\t\t */\r\n\t\t\tmatches: function(i) {\r\n\t\t\t\tvar key = 'p' + i;\r\n\t\t\t\t\r\n\t\t\t\tif (!(key in memo)) {\r\n\t\t\t\t\tif (text.charAt(i) == '<') {\r\n\t\t\t\t\t\tvar substr = text.slice(i);\r\n\t\t\t\t\t\tif (m = substr.match(reOpenTag)) {\r\n\t\t\t\t\t\t\tmemo[key] = openTag(i, m);\r\n\t\t\t\t\t\t} else if (m = substr.match(reCloseTag)) {\r\n\t\t\t\t\t\t\tmemo[key] = closeTag(i, m);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// remember that given position contains no valid tag\r\n\t\t\t\t\t\t\tmemo[key] = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn memo[key];\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Returns original text\r\n\t\t\t * @returns {String}\r\n\t\t\t */\r\n\t\t\ttext: function() {\r\n\t\t\t\treturn text;\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction matches(text, pos, pattern) {\r\n\t\treturn text.substring(pos, pos + pattern.length) == pattern;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Search for closing pair of opening tag\r\n\t * @param {Object} open Open tag instance\r\n\t * @param {Object} matcher Matcher instance\r\n\t */\r\n\tfunction findClosingPair(open, matcher) {\r\n\t\tvar stack = [], tag = null;\r\n\t\tvar text = matcher.text();\r\n\t\t\r\n\t\tfor (var pos = open.range.end, len = text.length; pos < len; pos++) {\r\n\t\t\tif (matches(text, pos, '<!--')) {\r\n\t\t\t\t// skip to end of comment\r\n\t\t\t\tfor (var j = pos; j < len; j++) {\r\n\t\t\t\t\tif (matches(text, j, '-->')) {\r\n\t\t\t\t\t\tpos = j + 3;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (tag = matcher.matches(pos)) {\r\n\t\t\t\tif (tag.type == 'open' && !tag.selfClose) {\r\n\t\t\t\t\tstack.push(tag.name);\r\n\t\t\t\t} else if (tag.type == 'close') {\r\n\t\t\t\t\tif (!stack.length) { // found valid pair?\r\n\t\t\t\t\t\treturn tag.name == open.name ? tag : null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// check if current closing tag matches previously opened one\r\n\t\t\t\t\tif (_.last(stack) == tag.name) {\r\n\t\t\t\t\t\tstack.pop();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar found = false;\r\n\t\t\t\t\t\twhile (stack.length && !found) {\r\n\t\t\t\t\t\t\tvar last = stack.pop();\r\n\t\t\t\t\t\t\tif (last == tag.name) {\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!stack.length && !found) {\r\n\t\t\t\t\t\t\treturn tag.name == open.name ? tag : null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Main function: search for tag pair in <code>text</code> for given \r\n\t\t * position\r\n\t\t * @memberOf htmlMatcher\r\n\t\t * @param {String} text \r\n\t\t * @param {Number} pos\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tfind: function(text, pos) {\r\n\t\t\tvar range = require('range');\r\n\t\t\tvar matcher = createMatcher(text); \r\n\t\t\tvar open = null, close = null;\r\n\t\t\t\r\n\t\t\tfor (var i = pos; i >= 0; i--) {\r\n\t\t\t\tif (open = matcher.open(i)) {\r\n\t\t\t\t\t// found opening tag\r\n\t\t\t\t\tif (open.selfClose) {\r\n\t\t\t\t\t\tif (open.range.cmp(pos, 'lt', 'gt')) {\r\n\t\t\t\t\t\t\t// inside self-closing tag, found match\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// outside self-closing tag, continue\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tclose = findClosingPair(open, matcher);\r\n\t\t\t\t\tif (close) {\r\n\t\t\t\t\t\t// found closing tag.\r\n\t\t\t\t\t\tvar r = range.create2(open.range.start, close.range.end);\r\n\t\t\t\t\t\tif (r.contains(pos)) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (open.range.contains(pos)) {\r\n\t\t\t\t\t\t// we inside empty HTML tag like <br>\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\topen = null;\r\n\t\t\t\t} else if (matches(text, i, '-->')) {\r\n\t\t\t\t\t// skip back to comment start\r\n\t\t\t\t\tfor (var j = i - 1; j >= 0; j--) {\r\n\t\t\t\t\t\tif (matches(text, j, '-->')) {\r\n\t\t\t\t\t\t\t// found another comment end, do nothing\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else if (matches(text, j, '<!--')) {\r\n\t\t\t\t\t\t\ti = j;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (matches(text, i, '<!--')) {\r\n\t\t\t\t\t// we're inside comment, match it\r\n\t\t\t\t\tvar j = i + 4, jl = text.length;\r\n\t\t\t\t\tfor (; j < jl; j++) {\r\n\t\t\t\t\t\tif (matches(text, j, '-->')) {\r\n\t\t\t\t\t\t\tj += 3;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\topen = comment(i, j);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (open) {\r\n\t\t\t\tvar outerRange = null;\r\n\t\t\t\tvar innerRange = null;\r\n\t\t\t\t\r\n\t\t\t\tif (close) {\r\n\t\t\t\t\touterRange = range.create2(open.range.start, close.range.end);\r\n\t\t\t\t\tinnerRange = range.create2(open.range.end, close.range.start);\r\n\t\t\t\t} else {\r\n\t\t\t\t\touterRange = innerRange = range.create2(open.range.start, open.range.end);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (open.type == 'comment') {\r\n\t\t\t\t\t// adjust positions of inner range for comment\r\n\t\t\t\t\tvar _c = outerRange.substring(text);\r\n\t\t\t\t\tinnerRange.start += _c.length - _c.replace(/^<\\!--\\s*/, '').length;\r\n\t\t\t\t\tinnerRange.end -= _c.length - _c.replace(/\\s*-->$/, '').length;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn {\r\n\t\t\t\t\topen: open,\r\n\t\t\t\t\tclose: close,\r\n\t\t\t\t\ttype: open.type == 'comment' ? 'comment' : 'tag',\r\n\t\t\t\t\tinnerRange: innerRange,\r\n\t\t\t\t\tinnerContent: function() {\r\n\t\t\t\t\t\treturn this.innerRange.substring(text);\r\n\t\t\t\t\t},\r\n\t\t\t\t\touterRange: outerRange,\r\n\t\t\t\t\touterContent: function() {\r\n\t\t\t\t\t\treturn this.outerRange.substring(text);\r\n\t\t\t\t\t},\r\n\t\t\t\t\trange: !innerRange.length() || !innerRange.cmp(pos, 'lte', 'gte') ? outerRange : innerRange,\r\n\t\t\t\t\tcontent: function() {\r\n\t\t\t\t\t\treturn this.range.substring(text);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsource: text\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * The same as <code>find()</code> method, but restricts matched result \r\n\t\t * to <code>tag</code> type\r\n\t\t * @param {String} text \r\n\t\t * @param {Number} pos\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\ttag: function(text, pos) {\r\n\t\t\tvar result = this.find(text, pos);\r\n\t\t\tif (result && result.type == 'tag') {\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n});/**\r\n * Utility module for handling tabstops tokens generated by Emmet's \r\n * \"Expand Abbreviation\" action. The main <code>extract</code> method will take\r\n * raw text (for example: <i>${0} some ${1:text}</i>), find all tabstops \r\n * occurrences, replace them with tokens suitable for your editor of choice and \r\n * return object with processed text and list of found tabstops and their ranges.\r\n * For sake of portability (Objective-C/Java) the tabstops list is a plain \r\n * sorted array with plain objects.\r\n * \r\n * Placeholders with the same are meant to be <i>linked</i> in your editor.\r\n * @param {Function} require\r\n * @param {Underscore} _  \r\n */\r\nemmet.define('tabStops', function(require, _) {\r\n\t/**\r\n\t * Global placeholder value, automatically incremented by \r\n\t * <code>variablesResolver()</code> function\r\n\t */\r\n\tvar startPlaceholderNum = 100;\r\n\t\r\n\tvar tabstopIndex = 0;\r\n\t\r\n\tvar defaultOptions = {\r\n\t\treplaceCarets: false,\r\n\t\tescape: function(ch) {\r\n\t\t\treturn '\\\\' + ch;\r\n\t\t},\r\n\t\ttabstop: function(data) {\r\n\t\t\treturn data.token;\r\n\t\t},\r\n\t\tvariable: function(data) {\r\n\t\t\treturn data.token;\r\n\t\t}\r\n\t};\r\n\t\r\n\t// XXX register output processor that will upgrade tabstops of parsed node\r\n\t// in order to prevent tabstop index conflicts\r\n\trequire('abbreviationParser').addOutputProcessor(function(text, node, type) {\r\n\t\tvar maxNum = 0;\r\n\t\tvar tabstops = require('tabStops');\r\n\t\tvar utils = require('utils');\r\n\t\t\r\n\t\tvar tsOptions = {\r\n\t\t\ttabstop: function(data) {\r\n\t\t\t\tvar group = parseInt(data.group);\r\n\t\t\t\tif (group == 0)\r\n\t\t\t\t\treturn '${0}';\r\n\t\t\t\t\r\n\t\t\t\tif (group > maxNum) maxNum = group;\r\n\t\t\t\tif (data.placeholder) {\r\n\t\t\t\t\t// respect nested placeholders\r\n\t\t\t\t\tvar ix = group + tabstopIndex;\r\n\t\t\t\t\tvar placeholder = tabstops.processText(data.placeholder, tsOptions);\r\n\t\t\t\t\treturn '${' + ix + ':' + placeholder + '}';\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn '${' + (group + tabstopIndex) + '}';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t// upgrade tabstops\r\n\t\ttext = tabstops.processText(text, tsOptions);\r\n\t\t\r\n\t\t// resolve variables\r\n\t\ttext = utils.replaceVariables(text, tabstops.variablesResolver(node));\r\n\t\t\r\n\t\ttabstopIndex += maxNum + 1;\r\n\t\treturn text;\r\n\t});\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Main function that looks for a tabstops in provided <code>text</code>\r\n\t\t * and returns a processed version of <code>text</code> with expanded \r\n\t\t * placeholders and list of tabstops found.\r\n\t\t * @param {String} text Text to process\r\n\t\t * @param {Object} options List of processor options:<br>\r\n\t\t * \r\n\t\t * <b>replaceCarets</b> : <code>Boolean</code> — replace all default\r\n\t\t * caret placeholders (like <i>{%::emmet-caret::%}</i>) with <i>${0:caret}</i><br>\r\n\t\t * \r\n\t\t * <b>escape</b> : <code>Function</code> — function that handle escaped\r\n\t\t * characters (mostly '$'). By default, it returns the character itself \r\n\t\t * to be displayed as is in output, but sometimes you will use \r\n\t\t * <code>extract</code> method as intermediate solution for further \r\n\t\t * processing and want to keep character escaped. Thus, you should override\r\n\t\t * <code>escape</code> method to return escaped symbol (e.g. '\\\\$')<br>\r\n\t\t * \r\n\t\t * <b>tabstop</b> : <code>Function</code> – a tabstop handler. Receives \r\n\t\t * a single argument – an object describing token: its position, number \r\n\t\t * group, placeholder and token itself. Should return a replacement \r\n\t\t * string that will appear in final output\r\n\t\t * \r\n\t\t * <b>variable</b> : <code>Function</code> – variable handler. Receives \r\n\t\t * a single argument – an object describing token: its position, name \r\n\t\t * and original token itself. Should return a replacement \r\n\t\t * string that will appear in final output\r\n\t\t * \r\n\t\t * @returns {Object} Object with processed <code>text</code> property\r\n\t\t * and array of <code>tabstops</code> found\r\n\t\t * @memberOf tabStops\r\n\t\t */\r\n\t\textract: function(text, options) {\r\n\t\t\t// prepare defaults\r\n\t\t\tvar utils = require('utils');\r\n\t\t\tvar placeholders = {carets: ''};\r\n\t\t\tvar marks = [];\r\n\t\t\t\r\n\t\t\toptions = _.extend({}, defaultOptions, options, {\r\n\t\t\t\ttabstop: function(data) {\r\n\t\t\t\t\tvar token = data.token;\r\n\t\t\t\t\tvar ret = '';\r\n\t\t\t\t\tif (data.placeholder == 'cursor') {\r\n\t\t\t\t\t\tmarks.push({\r\n\t\t\t\t\t\t\tstart: data.start,\r\n\t\t\t\t\t\t\tend: data.start + token.length,\r\n\t\t\t\t\t\t\tgroup: 'carets',\r\n\t\t\t\t\t\t\tvalue: ''\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// unify placeholder value for single group\r\n\t\t\t\t\t\tif ('placeholder' in data)\r\n\t\t\t\t\t\t\tplaceholders[data.group] = data.placeholder;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (data.group in placeholders)\r\n\t\t\t\t\t\t\tret = placeholders[data.group];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tmarks.push({\r\n\t\t\t\t\t\t\tstart: data.start,\r\n\t\t\t\t\t\t\tend: data.start + token.length,\r\n\t\t\t\t\t\t\tgroup: data.group,\r\n\t\t\t\t\t\t\tvalue: ret\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn token;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif (options.replaceCarets) {\r\n\t\t\t\ttext = text.replace(new RegExp( utils.escapeForRegexp( utils.getCaretPlaceholder() ), 'g'), '${0:cursor}');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// locate tabstops and unify group's placeholders\r\n\t\t\ttext = this.processText(text, options);\r\n\t\t\t\r\n\t\t\t// now, replace all tabstops with placeholders\r\n\t\t\tvar buf = utils.stringBuilder(), lastIx = 0;\r\n\t\t\tvar tabStops = _.map(marks, function(mark) {\r\n\t\t\t\tbuf.append(text.substring(lastIx, mark.start));\r\n\t\t\t\t\r\n\t\t\t\tvar pos = buf.length;\r\n\t\t\t\tvar ph = placeholders[mark.group] || '';\r\n\t\t\t\t\r\n\t\t\t\tbuf.append(ph);\r\n\t\t\t\tlastIx = mark.end;\r\n\t\t\t\t\r\n\t\t\t\treturn {\r\n\t\t\t\t\tgroup: mark.group,\r\n\t\t\t\t\tstart: pos,\r\n\t\t\t\t\tend:  pos + ph.length\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tbuf.append(text.substring(lastIx));\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\ttext: buf.toString(),\r\n\t\t\t\ttabstops: _.sortBy(tabStops, 'start')\r\n\t\t\t};\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Text processing routine. Locates escaped characters and tabstops and\r\n\t\t * replaces them with values returned by handlers defined in \r\n\t\t * <code>options</code>\r\n\t\t * @param {String} text\r\n\t\t * @param {Object} options See <code>extract</code> method options \r\n\t\t * description\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tprocessText: function(text, options) {\r\n\t\t\toptions = _.extend({}, defaultOptions, options);\r\n\t\t\t\r\n\t\t\tvar buf = require('utils').stringBuilder();\r\n\t\t\t/** @type StringStream */\r\n\t\t\tvar stream = require('stringStream').create(text);\r\n\t\t\tvar ch, m, a;\r\n\t\t\t\r\n\t\t\twhile (ch = stream.next()) {\r\n\t\t\t\tif (ch == '\\\\' && !stream.eol()) {\r\n\t\t\t\t\t// handle escaped character\r\n\t\t\t\t\tbuf.append(options.escape(stream.next()));\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ta = ch;\r\n\t\t\t\t\r\n\t\t\t\tif (ch == '$') {\r\n\t\t\t\t\t// looks like a tabstop\r\n\t\t\t\t\tstream.start = stream.pos - 1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (m = stream.match(/^[0-9]+/)) {\r\n\t\t\t\t\t\t// it's $N\r\n\t\t\t\t\t\ta = options.tabstop({\r\n\t\t\t\t\t\t\tstart: buf.length, \r\n\t\t\t\t\t\t\tgroup: stream.current().substr(1),\r\n\t\t\t\t\t\t\ttoken: stream.current()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if (m = stream.match(/^\\{([a-z_\\-][\\w\\-]*)\\}/)) {\r\n\t\t\t\t\t\t// ${variable}\r\n\t\t\t\t\t\ta = options.variable({\r\n\t\t\t\t\t\t\tstart: buf.length, \r\n\t\t\t\t\t\t\tname: m[1],\r\n\t\t\t\t\t\t\ttoken: stream.current()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if (m = stream.match(/^\\{([0-9]+)(:.+?)?\\}/, false)) {\r\n\t\t\t\t\t\t// ${N:value} or ${N} placeholder\r\n\t\t\t\t\t\t// parse placeholder, including nested ones\r\n\t\t\t\t\t\tstream.skipToPair('{', '}');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar obj = {\r\n\t\t\t\t\t\t\tstart: buf.length, \r\n\t\t\t\t\t\t\tgroup: m[1],\r\n\t\t\t\t\t\t\ttoken: stream.current()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar placeholder = obj.token.substring(obj.group.length + 2, obj.token.length - 1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (placeholder) {\r\n\t\t\t\t\t\t\tobj.placeholder = placeholder.substr(1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ta = options.tabstop(obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tbuf.append(a);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn buf.toString();\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Upgrades tabstops in output node in order to prevent naming conflicts\r\n\t\t * @param {AbbreviationNode} node\r\n\t\t * @param {Number} offset Tab index offset\r\n\t\t * @returns {Number} Maximum tabstop index in element\r\n\t\t */\r\n\t\tupgrade: function(node, offset) {\r\n\t\t\tvar maxNum = 0;\r\n\t\t\tvar options = {\r\n\t\t\t\ttabstop: function(data) {\r\n\t\t\t\t\tvar group = parseInt(data.group);\r\n\t\t\t\t\tif (group > maxNum) maxNum = group;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tif (data.placeholder)\r\n\t\t\t\t\t\treturn '${' + (group + offset) + ':' + data.placeholder + '}';\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn '${' + (group + offset) + '}';\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t_.each(['start', 'end', 'content'], function(p) {\r\n\t\t\t\tnode[p] = this.processText(node[p], options);\r\n\t\t\t}, this);\r\n\t\t\t\r\n\t\t\treturn maxNum;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Helper function that produces a callback function for \r\n\t\t * <code>replaceVariables()</code> method from {@link utils}\r\n\t\t * module. This callback will replace variable definitions (like \r\n\t\t * ${var_name}) with their value defined in <i>resource</i> module,\r\n\t\t * or outputs tabstop with variable name otherwise.\r\n\t\t * @param {AbbreviationNode} node Context node\r\n\t\t * @returns {Function}\r\n\t\t */\r\n\t\tvariablesResolver: function(node) {\r\n\t\t\tvar placeholderMemo = {};\r\n\t\t\tvar res = require('resources');\r\n\t\t\treturn function(str, varName) {\r\n\t\t\t\t// do not mark `child` variable as placeholder – it‘s a reserved\r\n\t\t\t\t// variable name\r\n\t\t\t\tif (varName == 'child')\r\n\t\t\t\t\treturn str;\r\n\t\t\t\t\r\n\t\t\t\tif (varName == 'cursor')\r\n\t\t\t\t\treturn require('utils').getCaretPlaceholder();\r\n\t\t\t\t\r\n\t\t\t\tvar attr = node.attribute(varName);\r\n\t\t\t\tif (!_.isUndefined(attr) && attr !== str) {\r\n\t\t\t\t\treturn attr;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar varValue = res.getVariable(varName);\r\n\t\t\t\tif (varValue)\r\n\t\t\t\t\treturn varValue;\r\n\t\t\t\t\r\n\t\t\t\t// output as placeholder\r\n\t\t\t\tif (!placeholderMemo[varName])\r\n\t\t\t\t\tplaceholderMemo[varName] = startPlaceholderNum++;\r\n\t\t\t\t\t\r\n\t\t\t\treturn '${' + placeholderMemo[varName] + ':' + varName + '}';\r\n\t\t\t};\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Resets global tabstop index. When parsed tree is converted to output\r\n\t\t * string (<code>AbbreviationNode.toString()</code>), all tabstops \r\n\t\t * defined in snippets and elements are upgraded in order to prevent\r\n\t\t * naming conflicts of nested. For example, <code>${1}</code> of a node\r\n\t\t * should not be linked with the same placehilder of the child node.\r\n\t\t * By default, <code>AbbreviationNode.toString()</code> automatically\r\n\t\t * upgrades tabstops of the same index for each node and writes maximum\r\n\t\t * tabstop index into the <code>tabstopIndex</code> variable. To keep\r\n\t\t * this variable at reasonable value, it is recommended to call \r\n\t\t * <code>resetTabstopIndex()</code> method each time you expand variable \r\n\t\t * @returns\r\n\t\t */\r\n\t\tresetTabstopIndex: function() {\r\n\t\t\ttabstopIndex = 0;\r\n\t\t\tstartPlaceholderNum = 100;\r\n\t\t}\r\n\t};\r\n});/**\r\n * Common module's preferences storage. This module \r\n * provides general storage for all module preferences, their description and\r\n * default values.<br><br>\r\n * \r\n * This module can also be used to list all available properties to create \r\n * UI for updating properties\r\n * \r\n * @memberOf __preferencesDefine\r\n * @constructor\r\n * @param {Function} require\r\n * @param {Underscore} _ \r\n */\r\nemmet.define('preferences', function(require, _) {\r\n\tvar preferences = {};\r\n\tvar defaults = {};\r\n\tvar _dbgDefaults = null;\r\n\tvar _dbgPreferences = null;\r\n\r\n\tfunction toBoolean(val) {\r\n\t\tif (_.isString(val)) {\r\n\t\t\tval = val.toLowerCase();\r\n\t\t\treturn val == 'yes' || val == 'true' || val == '1';\r\n\t\t}\r\n\r\n\t\treturn !!val;\r\n\t}\r\n\t\r\n\tfunction isValueObj(obj) {\r\n\t\treturn _.isObject(obj) \r\n\t\t\t&& 'value' in obj \r\n\t\t\t&& _.keys(obj).length < 3;\r\n\t}\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Creates new preference item with default value\r\n\t\t * @param {String} name Preference name. You can also pass object\r\n\t\t * with many options\r\n\t\t * @param {Object} value Preference default value\r\n\t\t * @param {String} description Item textual description\r\n\t\t * @memberOf preferences\r\n\t\t */\r\n\t\tdefine: function(name, value, description) {\r\n\t\t\tvar prefs = name;\r\n\t\t\tif (_.isString(name)) {\r\n\t\t\t\tprefs = {};\r\n\t\t\t\tprefs[name] = {\r\n\t\t\t\t\tvalue: value,\r\n\t\t\t\t\tdescription: description\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t_.each(prefs, function(v, k) {\r\n\t\t\t\tdefaults[k] = isValueObj(v) ? v : {value: v};\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Updates preference item value. Preference value should be defined\r\n\t\t * first with <code>define</code> method.\r\n\t\t * @param {String} name Preference name. You can also pass object\r\n\t\t * with many options\r\n\t\t * @param {Object} value Preference default value\r\n\t\t * @memberOf preferences\r\n\t\t */\r\n\t\tset: function(name, value) {\r\n\t\t\tvar prefs = name;\r\n\t\t\tif (_.isString(name)) {\r\n\t\t\t\tprefs = {};\r\n\t\t\t\tprefs[name] = value;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t_.each(prefs, function(v, k) {\r\n\t\t\t\tif (!(k in defaults)) {\r\n\t\t\t\t\tthrow 'Property \"' + k + '\" is not defined. You should define it first with `define` method of current module';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// do not set value if it equals to default value\r\n\t\t\t\tif (v !== defaults[k].value) {\r\n\t\t\t\t\t// make sure we have value of correct type\r\n\t\t\t\t\tswitch (typeof defaults[k].value) {\r\n\t\t\t\t\t\tcase 'boolean':\r\n\t\t\t\t\t\t\tv = toBoolean(v);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'number':\r\n\t\t\t\t\t\t\tv = parseInt(v + '', 10) || 0;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault: // convert to string\r\n\t\t\t\t\t\t\tif (v !== null) {\r\n\t\t\t\t\t\t\t\tv += '';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpreferences[k] = v;\r\n\t\t\t\t} else if  (k in preferences) {\r\n\t\t\t\t\tdelete preferences[k];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns preference value\r\n\t\t * @param {String} name\r\n\t\t * @returns {String} Returns <code>undefined</code> if preference is \r\n\t\t * not defined\r\n\t\t */\r\n\t\tget: function(name) {\r\n\t\t\tif (name in preferences)\r\n\t\t\t\treturn preferences[name];\r\n\t\t\t\r\n\t\t\tif (name in defaults)\r\n\t\t\t\treturn defaults[name].value;\r\n\t\t\t\r\n\t\t\treturn void 0;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns comma-separated preference value as array of values\r\n\t\t * @param {String} name\r\n\t\t * @returns {Array} Returns <code>undefined</code> if preference is \r\n\t\t * not defined, <code>null</code> if string cannot be converted to array\r\n\t\t */\r\n\t\tgetArray: function(name) {\r\n\t\t\tvar val = this.get(name);\r\n\t\t\tif (_.isUndefined(val) || val === null || val === '')  {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tval = _.map(val.split(','), require('utils').trim);\r\n\t\t\tif (!val.length) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn val;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns comma and colon-separated preference value as dictionary\r\n\t\t * @param {String} name\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tgetDict: function(name) {\r\n\t\t\tvar result = {};\r\n\t\t\t_.each(this.getArray(name), function(val) {\r\n\t\t\t\tvar parts = val.split(':');\r\n\t\t\t\tresult[parts[0]] = parts[1];\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns description of preference item\r\n\t\t * @param {String} name Preference name\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tdescription: function(name) {\r\n\t\t\treturn name in defaults ? defaults[name].description : void 0;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Completely removes specified preference(s)\r\n\t\t * @param {String} name Preference name (or array of names)\r\n\t\t */\r\n\t\tremove: function(name) {\r\n\t\t\tif (!_.isArray(name))\r\n\t\t\t\tname = [name];\r\n\t\t\t\r\n\t\t\t_.each(name, function(key) {\r\n\t\t\t\tif (key in preferences)\r\n\t\t\t\t\tdelete preferences[key];\r\n\t\t\t\t\r\n\t\t\t\tif (key in defaults)\r\n\t\t\t\t\tdelete defaults[key];\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns sorted list of all available properties\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tlist: function() {\r\n\t\t\treturn _.map(_.keys(defaults).sort(), function(key) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: key,\r\n\t\t\t\t\tvalue: this.get(key),\r\n\t\t\t\t\ttype: typeof defaults[key].value,\r\n\t\t\t\t\tdescription: defaults[key].description\r\n\t\t\t\t};\r\n\t\t\t}, this);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Loads user-defined preferences from JSON\r\n\t\t * @param {Object} json\r\n\t\t * @returns\r\n\t\t */\r\n\t\tload: function(json) {\r\n\t\t\t_.each(json, function(value, key) {\r\n\t\t\t\tthis.set(key, value);\r\n\t\t\t}, this);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns hash of user-modified preferences\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\texportModified: function() {\r\n\t\t\treturn _.clone(preferences);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Reset to defaults\r\n\t\t * @returns\r\n\t\t */\r\n\t\treset: function() {\r\n\t\t\tpreferences = {};\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * For unit testing: use empty storage\r\n\t\t */\r\n\t\t_startTest: function() {\r\n\t\t\t_dbgDefaults = defaults;\r\n\t\t\t_dbgPreferences = preferences;\r\n\t\t\tdefaults = {};\r\n\t\t\tpreferences = {};\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * For unit testing: restore original storage\r\n\t\t */\r\n\t\t_stopTest: function() {\r\n\t\t\tdefaults = _dbgDefaults;\r\n\t\t\tpreferences = _dbgPreferences;\r\n\t\t}\r\n\t};\r\n});/**\r\n * Module for handling filters\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n * @author Sergey Chikuyonok (serge.che@gmail.com) <http://chikuyonok.ru>\r\n */\r\nemmet.define('filters', function(require, _) {\r\n\t/** List of registered filters */\r\n\tvar registeredFilters = {};\r\n\t\r\n\t/** Filters that will be applied for unknown syntax */\r\n\tvar basicFilters = 'html';\r\n\t\r\n\tfunction list(filters) {\r\n\t\tif (!filters)\r\n\t\t\treturn [];\r\n\t\t\r\n\t\tif (_.isString(filters))\r\n\t\t\treturn filters.split(/[\\|,]/g);\r\n\t\t\r\n\t\treturn filters;\r\n\t}\r\n\t\r\n\treturn  {\r\n\t\t/**\r\n\t\t * Register new filter\r\n\t\t * @param {String} name Filter name\r\n\t\t * @param {Function} fn Filter function\r\n\t\t */\r\n\t\tadd: function(name, fn) {\r\n\t\t\tregisteredFilters[name] = fn;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Apply filters for final output tree\r\n\t\t * @param {AbbreviationNode} tree Output tree\r\n\t\t * @param {Array} filters List of filters to apply. Might be a \r\n\t\t * <code>String</code>\r\n\t\t * @param {Object} profile Output profile, defined in <i>profile</i> \r\n\t\t * module. Filters defined it profile are not used, <code>profile</code>\r\n\t\t * is passed to filter function\r\n\t\t * @memberOf emmet.filters\r\n\t\t * @returns {AbbreviationNode}\r\n\t\t */\r\n\t\tapply: function(tree, filters, profile) {\r\n\t\t\tvar utils = require('utils');\r\n\t\t\tprofile = require('profile').get(profile);\r\n\t\t\t\r\n\t\t\t_.each(list(filters), function(filter) {\r\n\t\t\t\tvar name = utils.trim(filter.toLowerCase());\r\n\t\t\t\tif (name && name in registeredFilters) {\r\n\t\t\t\t\ttree = registeredFilters[name](tree, profile);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn tree;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Composes list of filters that should be applied to a tree, based on \r\n\t\t * passed data\r\n\t\t * @param {String} syntax Syntax name ('html', 'css', etc.)\r\n\t\t * @param {Object} profile Output profile\r\n\t\t * @param {String} additionalFilters List or pipe-separated\r\n\t\t * string of additional filters to apply\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tcomposeList: function(syntax, profile, additionalFilters) {\r\n\t\t\tprofile = require('profile').get(profile);\r\n\t\t\tvar filters = list(profile.filters || require('resources').findItem(syntax, 'filters') || basicFilters);\r\n\t\t\t\r\n\t\t\tif (profile.extraFilters) {\r\n\t\t\t\tfilters = filters.concat(list(profile.extraFilters));\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\tif (additionalFilters) {\r\n\t\t\t\tfilters = filters.concat(list(additionalFilters));\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\tif (!filters || !filters.length) {\r\n\t\t\t\t// looks like unknown syntax, apply basic filters\r\n\t\t\t\tfilters = list(basicFilters);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn filters;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Extracts filter list from abbreviation\r\n\t\t * @param {String} abbr\r\n\t\t * @returns {Array} Array with cleaned abbreviation and list of \r\n\t\t * extracted filters\r\n\t\t */\r\n\t\textractFromAbbreviation: function(abbr) {\r\n\t\t\tvar filters = '';\r\n\t\t\tabbr = abbr.replace(/\\|([\\w\\|\\-]+)$/, function(str, p1){\r\n\t\t\t\tfilters = p1;\r\n\t\t\t\treturn '';\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn [abbr, list(filters)];\r\n\t\t}\r\n\t};\r\n});/**\r\n * Module that contains factories for element types used by Emmet\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('elements', function(require, _) {\r\n\tvar factories = {};\r\n\tvar reAttrs = /([\\w\\-:]+)\\s*=\\s*(['\"])(.*?)\\2/g;\r\n\t\r\n\tvar result = {\r\n\t\t/**\r\n\t\t * Create new element factory\r\n\t\t * @param {String} name Element identifier\r\n\t\t * @param {Function} factory Function that produces element of specified \r\n\t\t * type. The object generated by this factory is automatically \r\n\t\t * augmented with <code>type</code> property pointing to element\r\n\t\t * <code>name</code>\r\n\t\t * @memberOf elements\r\n\t\t */\r\n\t\tadd: function(name, factory) {\r\n\t\t\tvar that = this;\r\n\t\t\tfactories[name] = function() {\r\n\t\t\t\tvar elem = factory.apply(that, arguments);\r\n\t\t\t\tif (elem)\r\n\t\t\t\t\telem.type = name;\r\n\t\t\t\t\r\n\t\t\t\treturn elem;\r\n\t\t\t};\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns factory for specified name\r\n\t\t * @param {String} name\r\n\t\t * @returns {Function}\r\n\t\t */\r\n\t\tget: function(name) {\r\n\t\t\treturn factories[name];\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Creates new element with specified type\r\n\t\t * @param {String} name\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tcreate: function(name) {\r\n\t\t\tvar args = [].slice.call(arguments, 1);\r\n\t\t\tvar factory = this.get(name);\r\n\t\t\treturn factory ? factory.apply(this, args) : null;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if passed element is of specified type\r\n\t\t * @param {Object} elem\r\n\t\t * @param {String} type\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tis: function(elem, type) {\r\n\t\t\treturn elem && elem.type === type;\r\n\t\t}\r\n\t};\r\n\t\r\n\t// register resource references\r\n\tfunction commonFactory(value) {\r\n\t\treturn {data: value};\r\n\t}\r\n\t\r\n\t/**\r\n\t * Element factory\r\n\t * @param {String} elementName Name of output element\r\n\t * @param {String} attrs Attributes definition. You may also pass\r\n\t * <code>Array</code> where each contains object with <code>name</code> \r\n\t * and <code>value</code> properties, or <code>Object</code>\r\n\t * @param {Boolean} isEmpty Is expanded element should be empty\r\n\t */\r\n\tresult.add('element', function(elementName, attrs, isEmpty) {\r\n\t\tvar ret = {\r\n\t\t\t/** @memberOf __emmetDataElement */\r\n\t\t\tname: elementName,\r\n\t\t\tis_empty: !!isEmpty\r\n\t\t};\r\n\t\t\r\n\t\tif (attrs) {\r\n\t\t\tret.attributes = [];\r\n\t\t\tif (_.isArray(attrs)) {\r\n\t\t\t\tret.attributes = attrs;\r\n\t\t\t} else if (_.isString(attrs)) {\r\n\t\t\t\tvar m;\r\n\t\t\t\twhile (m = reAttrs.exec(attrs)) {\r\n\t\t\t\t\tret.attributes.push({\r\n\t\t\t\t\t\tname: m[1],\r\n\t\t\t\t\t\tvalue: m[3]\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t_.each(attrs, function(value, name) {\r\n\t\t\t\t\tret.attributes.push({\r\n\t\t\t\t\t\tname: name, \r\n\t\t\t\t\t\tvalue: value\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn ret;\r\n\t});\r\n\t\r\n\tresult.add('snippet', commonFactory);\r\n\tresult.add('reference', commonFactory);\r\n\tresult.add('empty', function() {\r\n\t\treturn {};\r\n\t});\r\n\t\r\n\treturn result;\r\n});/**\r\n * Abstract implementation of edit tree interface.\r\n * Edit tree is a named container of editable “name-value” child elements, \r\n * parsed from <code>source</code>. This container provides convenient methods\r\n * for editing/adding/removing child elements. All these update actions are\r\n * instantly reflected in the <code>source</code> code with respect of formatting.\r\n * <br><br>\r\n * For example, developer can create an edit tree from CSS rule and add or \r\n * remove properties from it–all changes will be immediately reflected in the \r\n * original source.\r\n * <br><br>\r\n * All classes defined in this module should be extended the same way as in\r\n * Backbone framework: using <code>extend</code> method to create new class and \r\n * <code>initialize</code> method to define custom class constructor.\r\n * \r\n * @example\r\n * <pre><code>\r\n * var MyClass = require('editTree').EditElement.extend({\r\n * \tinitialize: function() {\r\n * \t\t// constructor code here\r\n * \t}\r\n * });\r\n * \r\n * var elem = new MyClass(); \r\n * </code></pre>\r\n * \r\n * \r\n * @param {Function} require\r\n * @param {Underscore} _\r\n * @constructor\r\n * @memberOf __editTreeDefine\r\n */\r\nemmet.define('editTree', function(require, _, core) {\r\n\tvar range = require('range').create;\r\n\t\r\n\t/**\r\n\t * Named container of edited source\r\n\t * @type EditContainer\r\n\t * @param {String} source\r\n\t * @param {Object} options\r\n\t */\r\n\tfunction EditContainer(source, options) {\r\n\t\tthis.options = _.extend({offset: 0}, options);\r\n\t\t/**\r\n\t\t * Source code of edited structure. All changes in the structure are \r\n\t\t * immediately reflected into this property\r\n\t\t */\r\n\t\tthis.source = source;\r\n\t\t\r\n\t\t/** \r\n\t\t * List of all editable children\r\n\t\t * @private \r\n\t\t */\r\n\t\tthis._children = [];\r\n\t\t\r\n\t\t/**\r\n\t\t * Hash of all positions of container\r\n\t\t * @private\r\n\t\t */\r\n\t\tthis._positions = {\r\n\t\t\tname: 0\r\n\t\t};\r\n\t\t\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\t\r\n\t/**\r\n\t * The self-propagating extend function for classes.\r\n\t * @type Function\r\n\t */\r\n\tEditContainer.extend = core.extend;\r\n\t\r\n\tEditContainer.prototype = {\r\n\t\t/**\r\n\t\t * Child class constructor\r\n\t\t */\r\n\t\tinitialize: function() {},\r\n\t\t\r\n\t\t/**\r\n\t\t * Replace substring of tag's source\r\n\t\t * @param {String} value\r\n\t\t * @param {Number} start\r\n\t\t * @param {Number} end\r\n\t\t * @private\r\n\t\t */\r\n\t\t_updateSource: function(value, start, end) {\r\n\t\t\t// create modification range\r\n\t\t\tvar r = range(start, _.isUndefined(end) ? 0 : end - start);\r\n\t\t\tvar delta = value.length - r.length();\r\n\t\t\t\r\n\t\t\tvar update = function(obj) {\r\n\t\t\t\t_.each(obj, function(v, k) {\r\n\t\t\t\t\tif (v >= r.end)\r\n\t\t\t\t\t\tobj[k] += delta;\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t// update affected positions of current container\r\n\t\t\tupdate(this._positions);\r\n\t\t\t\r\n\t\t\t// update affected positions of children\r\n\t\t\t_.each(this.list(), function(item) {\r\n\t\t\t\tupdate(item._positions);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tthis.source = require('utils').replaceSubstring(this.source, value, r);\r\n\t\t},\r\n\t\t\t\r\n\t\t\t\r\n\t\t/**\r\n\t\t * Adds new attribute \r\n\t\t * @param {String} name Property name\r\n\t\t * @param {String} value Property value\r\n\t\t * @param {Number} pos Position at which to insert new property. By \r\n\t\t * default the property is inserted at the end of rule \r\n\t\t * @returns {EditElement} Newly created element\r\n\t\t */\r\n\t\tadd: function(name, value, pos) {\r\n\t\t\t// this is abstract implementation\r\n\t\t\tvar item = new EditElement(name, value);\r\n\t\t\tthis._children.push(item);\r\n\t\t\treturn item;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns attribute object\r\n\t\t * @param {String} name Attribute name or its index\r\n\t\t * @returns {EditElement}\r\n\t\t */\r\n\t\tget: function(name) {\r\n\t\t\tif (_.isNumber(name))\r\n\t\t\t\treturn this.list()[name];\r\n\t\t\t\r\n\t\t\tif (_.isString(name))\r\n\t\t\t\treturn _.find(this.list(), function(prop) {\r\n\t\t\t\t\treturn prop.name() === name;\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t\treturn name;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns all children by name or indexes\r\n\t\t * @param {Object} name Element name(s) or indexes (<code>String</code>,\r\n\t\t * <code>Array</code>, <code>Number</code>)\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tgetAll: function(name) {\r\n\t\t\tif (!_.isArray(name))\r\n\t\t\t\tname = [name];\r\n\t\t\t\r\n\t\t\t// split names and indexes\r\n\t\t\tvar names = [], indexes = [];\r\n\t\t\t_.each(name, function(item) {\r\n\t\t\t\tif (_.isString(item))\r\n\t\t\t\t\tnames.push(item);\r\n\t\t\t\telse if (_.isNumber(item))\r\n\t\t\t\t\tindexes.push(item);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn _.filter(this.list(), function(attribute, i) {\r\n\t\t\t\treturn _.include(indexes, i) || _.include(names, attribute.name());\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns or updates element value. If such element doesn't exists,\r\n\t\t * it will be created automatically and added at the end of child list.\r\n\t\t * @param {String} name Element name or its index\r\n\t\t * @param {String} value New element value\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tvalue: function(name, value, pos) {\r\n\t\t\tvar element = this.get(name);\r\n\t\t\tif (element)\r\n\t\t\t\treturn element.value(value);\r\n\t\t\t\r\n\t\t\tif (!_.isUndefined(value)) {\r\n\t\t\t\t// no such element — create it\r\n\t\t\t\treturn this.add(name, value, pos);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns all values of child elements found by <code>getAll()</code>\r\n\t\t * method\r\n\t\t * @param {Object} name Element name(s) or indexes (<code>String</code>,\r\n\t\t * <code>Array</code>, <code>Number</code>)\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tvalues: function(name) {\r\n\t\t\treturn _.map(this.getAll(name), function(element) {\r\n\t\t\t\treturn element.value();\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove child element\r\n\t\t * @param {String} name Property name or its index\r\n\t\t */\r\n\t\tremove: function(name) {\r\n\t\t\tvar element = this.get(name);\r\n\t\t\tif (element) {\r\n\t\t\t\tthis._updateSource('', element.fullRange());\r\n\t\t\t\tthis._children = _.without(this._children, element);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns list of all editable child elements\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tlist: function() {\r\n\t\t\treturn this._children;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns index of editble child in list\r\n\t\t * @param {Object} item\r\n\t\t * @returns {Number}\r\n\t\t */\r\n\t\tindexOf: function(item) {\r\n\t\t\treturn _.indexOf(this.list(), this.get(item));\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Sets or gets container name\r\n\t\t * @param {String} val New name. If not passed, current \r\n\t\t * name is returned\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tname: function(val) {\r\n\t\t\tif (!_.isUndefined(val) && this._name !== (val = String(val))) {\r\n\t\t\t\tthis._updateSource(val, this._positions.name, this._positions.name + this._name.length);\r\n\t\t\t\tthis._name = val;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this._name;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns name range object\r\n\t\t * @param {Boolean} isAbsolute Return absolute range (with respect of \r\n\t\t * rule offset)\r\n\t\t * @returns {Range}\r\n\t\t */\r\n\t\tnameRange: function(isAbsolute) {\r\n\t\t\treturn range(this._positions.name + (isAbsolute ? this.options.offset : 0), this.name());\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns range of current source\r\n\t\t * @param {Boolean} isAbsolute\r\n\t\t */\r\n\t\trange: function(isAbsolute) {\r\n\t\t\treturn range(isAbsolute ? this.options.offset : 0, this.toString());\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns element that belongs to specified position\r\n\t\t * @param {Number} pos\r\n\t\t * @param {Boolean} isAbsolute\r\n\t\t * @returns {EditElement}\r\n\t\t */\r\n\t\titemFromPosition: function(pos, isAbsolute) {\r\n\t\t\treturn _.find(this.list(), function(elem) {\r\n\t\t\t\treturn elem.range(isAbsolute).inside(pos);\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns source code of current container \r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\ttoString: function() {\r\n\t\t\treturn this.source;\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * @param {EditContainer} parent\r\n\t * @param {Object} nameToken\r\n\t * @param {Object} valueToken\r\n\t */\r\n\tfunction EditElement(parent, nameToken, valueToken) {\r\n\t\t/** @type EditContainer */\r\n\t\tthis.parent = parent;\r\n\t\t\r\n\t\tthis._name = nameToken.value;\r\n\t\tthis._value = valueToken ? valueToken.value : '';\r\n\t\t\r\n\t\tthis._positions = {\r\n\t\t\tname: nameToken.start,\r\n\t\t\tvalue: valueToken ? valueToken.start : -1\r\n\t\t};\r\n\t\t\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\t\r\n\t/**\r\n\t * The self-propagating extend function for classes.\r\n\t * @type Function\r\n\t */\r\n\tEditElement.extend = core.extend;\r\n\t\r\n\tEditElement.prototype = {\r\n\t\t/**\r\n\t\t * Child class constructor\r\n\t\t */\r\n\t\tinitialize: function() {},\r\n\t\t\r\n\t\t/**\r\n\t\t * Make position absolute\r\n\t\t * @private\r\n\t\t * @param {Number} num\r\n\t\t * @param {Boolean} isAbsolute\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t_pos: function(num, isAbsolute) {\r\n\t\t\treturn num + (isAbsolute ? this.parent.options.offset : 0);\r\n\t\t},\r\n\t\t\t\r\n\t\t/**\r\n\t\t * Sets of gets element value\r\n\t\t * @param {String} val New element value. If not passed, current \r\n\t\t * value is returned\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tvalue: function(val) {\r\n\t\t\tif (!_.isUndefined(val) && this._value !== (val = String(val))) {\r\n\t\t\t\tthis.parent._updateSource(val, this.valueRange());\r\n\t\t\t\tthis._value = val;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this._value;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Sets of gets element name\r\n\t\t * @param {String} val New element name. If not passed, current \r\n\t\t * name is returned\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tname: function(val) {\r\n\t\t\tif (!_.isUndefined(val) && this._name !== (val = String(val))) {\r\n\t\t\t\tthis.parent._updateSource(val, this.nameRange());\r\n\t\t\t\tthis._name = val;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this._name;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns position of element name token\r\n\t\t * @param {Boolean} isAbsolute Return absolute position\r\n\t\t * @returns {Number}\r\n\t\t */\r\n\t\tnamePosition: function(isAbsolute) {\r\n\t\t\treturn this._pos(this._positions.name, isAbsolute);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns position of element value token\r\n\t\t * @param {Boolean} isAbsolute Return absolute position\r\n\t\t * @returns {Number}\r\n\t\t */\r\n\t\tvaluePosition: function(isAbsolute) {\r\n\t\t\treturn this._pos(this._positions.value, isAbsolute);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns element name\r\n\t\t * @param {Boolean} isAbsolute Return absolute range \r\n\t\t * @returns {Range}\r\n\t\t */\r\n\t\trange: function(isAbsolute) {\r\n\t\t\treturn range(this.namePosition(isAbsolute), this.toString());\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns full element range, including possible indentation\r\n\t\t * @param {Boolean} isAbsolute Return absolute range\r\n\t\t * @returns {Range}\r\n\t\t */\r\n\t\tfullRange: function(isAbsolute) {\r\n\t\t\treturn this.range(isAbsolute);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns element name range\r\n\t\t * @param {Boolean} isAbsolute Return absolute range\r\n\t\t * @returns {Range}\r\n\t\t */\r\n\t\tnameRange: function(isAbsolute) {\r\n\t\t\treturn range(this.namePosition(isAbsolute), this.name());\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns element value range\r\n\t\t * @param {Boolean} isAbsolute Return absolute range\r\n\t\t * @returns {Range}\r\n\t\t */\r\n\t\tvalueRange: function(isAbsolute) {\r\n\t\t\treturn range(this.valuePosition(isAbsolute), this.value());\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns current element string representation\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\ttoString: function() {\r\n\t\t\treturn this.name() + this.value();\r\n\t\t},\r\n\t\t\r\n\t\tvalueOf: function() {\r\n\t\t\treturn this.toString();\r\n\t\t}\r\n\t};\r\n\t\r\n\treturn {\r\n\t\tEditContainer: EditContainer,\r\n\t\tEditElement: EditElement,\r\n\t\t\r\n\t\t/**\r\n\t\t * Creates token that can be fed to <code>EditElement</code>\r\n\t\t * @param {Number} start\r\n\t\t * @param {String} value\r\n\t\t * @param {String} type\r\n\t\t * @returns\r\n\t\t */\r\n\t\tcreateToken: function(start, value, type) {\r\n\t\t\tvar obj = {\r\n\t\t\t\tstart: start || 0,\r\n\t\t\t\tvalue: value || '',\r\n\t\t\t\ttype: type\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tobj.end = obj.start + obj.value.length;\r\n\t\t\treturn obj;\r\n\t\t}\r\n\t};\r\n});/**\r\n * CSS EditTree is a module that can parse a CSS rule into a tree with \r\n * convenient methods for adding, modifying and removing CSS properties. These \r\n * changes can be written back to string with respect of code formatting.\r\n * \r\n * @memberOf __cssEditTreeDefine\r\n * @constructor\r\n * @param {Function} require\r\n * @param {Underscore} _ \r\n */\r\nemmet.define('cssEditTree', function(require, _) {\r\n\tvar defaultOptions = {\r\n\t\tstyleBefore: '\\n\\t',\r\n\t\tstyleSeparator: ': ',\r\n\t\toffset: 0\r\n\t};\r\n\t\r\n\tvar WHITESPACE_REMOVE_FROM_START = 1;\r\n\tvar WHITESPACE_REMOVE_FROM_END   = 2;\r\n\t\r\n\t/**\r\n\t * Returns range object\r\n\t * @param {Number} start\r\n\t * @param {Number} len \r\n\t * @returns {Range}\r\n\t */\r\n\tfunction range(start, len) {\r\n\t\treturn require('range').create(start, len);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Removes whitespace tokens from the array ends\r\n\t * @param {Array} tokens\r\n\t * @param {Number} mask Mask indicating from which end whitespace should be \r\n\t * removed \r\n\t * @returns {Array}\r\n\t */\r\n\tfunction trimWhitespaceTokens(tokens, mask) {\r\n\t\tmask = mask || (WHITESPACE_REMOVE_FROM_START | WHITESPACE_REMOVE_FROM_END);\r\n\t\tvar whitespace = ['white', 'line'];\r\n\t\t\r\n\t\tif ((mask & WHITESPACE_REMOVE_FROM_END) == WHITESPACE_REMOVE_FROM_END)\r\n\t\t\twhile (tokens.length && _.include(whitespace, _.last(tokens).type)) {\r\n\t\t\t\ttokens.pop();\r\n\t \t\t}\r\n\t\t\r\n\t\tif ((mask & WHITESPACE_REMOVE_FROM_START) == WHITESPACE_REMOVE_FROM_START)\r\n\t\t\twhile (tokens.length && _.include(whitespace, tokens[0].type)) {\r\n\t\t\t\ttokens.shift();\r\n\t\t\t}\r\n\t\t\r\n\t\treturn tokens;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Helper function that searches for selector range for <code>CSSEditRule</code>\r\n\t * @param {TokenIterator} it\r\n\t * @returns {Range}\r\n\t */\r\n\tfunction findSelectorRange(it) {\r\n\t\tvar tokens = [], token;\r\n \t\tvar start = it.position(), end;\r\n \t\t\r\n \t\twhile (token = it.next()) {\r\n\t\t\tif (token.type == '{')\r\n\t\t\t\tbreak;\r\n\t\t\ttokens.push(token);\r\n\t\t}\r\n \t\t\r\n \t\ttrimWhitespaceTokens(tokens);\r\n \t\t\r\n \t\tif (tokens.length) {\r\n \t\t\tstart = tokens[0].start;\r\n \t\t\tend = _.last(tokens).end;\r\n \t\t} else {\r\n \t\t\tend = start;\r\n \t\t}\r\n \t\t\r\n \t\treturn range(start, end - start);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Helper function that searches for CSS property value range next to\r\n\t * iterator's current position  \r\n\t * @param {TokenIterator} it\r\n\t * @returns {Range}\r\n\t */\r\n\tfunction findValueRange(it) {\r\n\t\t// find value start position\r\n\t\tvar skipTokens = ['white', 'line', ':'];\r\n\t\tvar tokens = [], token, start, end;\r\n\t\t\r\n\t\tit.nextUntil(function(tok) {\r\n\t\t\treturn !_.include(skipTokens, this.itemNext().type);\r\n\t\t});\r\n\t\t\r\n\t\tstart = it.current().end;\r\n\t\t// consume value\r\n\t\twhile (token = it.next()) {\r\n\t\t\tif (token.type == '}' || token.type == ';') {\r\n\t\t\t\t// found value end\r\n\t\t\t\ttrimWhitespaceTokens(tokens, WHITESPACE_REMOVE_FROM_START \r\n\t\t\t\t\t\t| (token.type == '}' ? WHITESPACE_REMOVE_FROM_END : 0));\r\n\t\t\t\t\r\n\t\t\t\tif (tokens.length) {\r\n\t\t\t\t\tstart = tokens[0].start;\r\n\t\t\t\t\tend = _.last(tokens).end;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tend = start;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn range(start, end - start);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttokens.push(token);\r\n\t\t}\r\n\t\t\r\n\t\t// reached the end of tokens list\r\n\t\tif (tokens.length) {\r\n\t\t\treturn range(tokens[0].start, _.last(tokens).end - tokens[0].start);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Finds parts of complex CSS value\r\n\t * @param {String} str\r\n\t * @returns {Array} Returns list of <code>Range</code>'s\r\n\t */\r\n\tfunction findParts(str) {\r\n\t\t/** @type StringStream */\r\n\t\tvar stream = require('stringStream').create(str);\r\n\t\tvar ch;\r\n\t\tvar result = [];\r\n\t\tvar sep = /[\\s\\u00a0,]/;\r\n\t\t\r\n\t\tvar add = function() {\r\n\t\t\tstream.next();\r\n\t\t\tresult.push(range(stream.start, stream.current()));\r\n\t\t\tstream.start = stream.pos;\r\n\t\t};\r\n\t\t\r\n\t\t// skip whitespace\r\n\t\tstream.eatSpace();\r\n\t\tstream.start = stream.pos;\r\n\t\t\r\n\t\twhile (ch = stream.next()) {\r\n\t\t\tif (ch == '\"' || ch == \"'\") {\r\n\t\t\t\tstream.next();\r\n\t\t\t\tif (!stream.skipTo(ch)) break;\r\n\t\t\t\tadd();\r\n\t\t\t} else if (ch == '(') {\r\n\t\t\t\t// function found, may have nested function\r\n\t\t\t\tstream.backUp(1);\r\n\t\t\t\tif (!stream.skipToPair('(', ')')) break;\r\n\t\t\t\tstream.backUp(1);\r\n\t\t\t\tadd();\r\n\t\t\t} else {\r\n\t\t\t\tif (sep.test(ch)) {\r\n\t\t\t\t\tresult.push(range(stream.start, stream.current().length - 1));\r\n\t\t\t\t\tstream.eatWhile(sep);\r\n\t\t\t\t\tstream.start = stream.pos;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tadd();\r\n\t\t\r\n\t\treturn _.chain(result)\r\n\t\t\t.filter(function(item) {\r\n\t\t\t\treturn !!item.length();\r\n\t\t\t})\r\n\t\t\t.uniq(false, function(item) {\r\n\t\t\t\treturn item.toString();\r\n\t\t\t})\r\n\t\t\t.value();\r\n\t}\r\n\t\r\n\t/**\r\n\t * A bit hacky way to identify invalid CSS property definition: when user\r\n\t * starts writing new abbreviation in CSS rule, he actually creates invalid\r\n\t * CSS property definition and this method tries to identify such abbreviation\r\n\t * and prevent it from being added to CSS edit tree \r\n\t * @param {TokenIterator} it\r\n\t */\r\n\tfunction isValidIdentifier(it) {\r\n//\t\treturn true;\r\n\t\tvar tokens = it.tokens;\r\n\t\tfor (var i = it._i + 1, il = tokens.length; i < il; i++) {\r\n\t\t\tif (tokens[i].type == ':')\r\n\t\t\t\treturn true;\r\n\t\t\t\r\n\t\t\tif (tokens[i].type == 'identifier' || tokens[i].type == 'line')\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @class\r\n\t * @extends EditContainer\r\n\t */\r\n\tvar CSSEditContainer = require('editTree').EditContainer.extend({\r\n\t\tinitialize: function(source, options) {\r\n\t\t\t_.defaults(this.options, defaultOptions);\r\n\t\t\tvar editTree = require('editTree');\r\n\t\t\t\r\n\t\t\t/** @type TokenIterator */\r\n\t \t\tvar it = require('tokenIterator').create(\r\n\t \t\t\t\trequire('cssParser').parse(source));\r\n\t \t\t\r\n\t \t\tvar selectorRange = findSelectorRange(it);\r\n\t \t\tthis._positions.name = selectorRange.start;\r\n\t \t\tthis._name = selectorRange.substring(source);\r\n\t \t\t\r\n\t \t\tif (!it.current() || it.current().type != '{')\r\n\t \t\t\tthrow 'Invalid CSS rule';\r\n\t \t\t\r\n\t \t\tthis._positions.contentStart = it.position() + 1;\r\n\t \t\t\r\n\t \t\t// consume properties\r\n\t \t\tvar propertyRange, valueRange, token;\r\n\t\t\twhile (token = it.next()) {\r\n\t\t\t\tif (token.type == 'identifier' && isValidIdentifier(it)) {\r\n\t\t\t\t\tpropertyRange = range(token);\r\n\t\t\t\t\tvalueRange = findValueRange(it);\r\n\t\t\t\t\tvar end = (it.current() && it.current().type == ';') \r\n\t\t\t\t\t\t? range(it.current())\r\n\t\t\t\t\t\t: range(valueRange.end, 0);\r\n\t\t\t\t\tthis._children.push(new CSSEditElement(this,\r\n\t\t\t\t\t\t\teditTree.createToken(propertyRange.start, propertyRange.substring(source)),\r\n\t\t\t\t\t\t\teditTree.createToken(valueRange.start, valueRange.substring(source)),\r\n\t\t\t\t\t\t\teditTree.createToken(end.start, end.substring(source))\r\n\t\t\t\t\t\t\t));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._saveStyle();\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Remembers all styles of properties\r\n\t\t * @private\r\n\t\t */\r\n\t\t_saveStyle: function() {\r\n\t\t\tvar start = this._positions.contentStart;\r\n\t\t\tvar source = this.source;\r\n\t\t\tvar utils = require('utils');\r\n\t\t\t\r\n\t\t\t_.each(this.list(), /** @param {CSSEditProperty} p */ function(p) {\r\n\t\t\t\tp.styleBefore = source.substring(start, p.namePosition());\r\n\t\t\t\t// a small hack here:\r\n\t\t\t\t// Sometimes users add empty lines before properties to logically\r\n\t\t\t\t// separate groups of properties. In this case, a blind copy of\r\n\t\t\t\t// characters between rules may lead to undesired behavior,\r\n\t\t\t\t// especially when current rule is duplicated or used as a donor\r\n\t\t\t\t// to create new rule.\r\n\t\t\t\t// To solve this issue, we‘ll take only last newline indentation\r\n\t\t\t\tvar lines = utils.splitByLines(p.styleBefore);\r\n\t\t\t\tif (lines.length > 1) {\r\n\t\t\t\t\tp.styleBefore = '\\n' + _.last(lines);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tp.styleSeparator = source.substring(p.nameRange().end, p.valuePosition());\r\n\t\t\t\t\r\n\t\t\t\t// graceful and naive comments removal \r\n\t\t\t\tp.styleBefore = _.last(p.styleBefore.split('*/'));\r\n\t\t\t\tp.styleSeparator = p.styleSeparator.replace(/\\/\\*.*?\\*\\//g, '');\r\n\t\t\t\t\r\n\t\t\t\tstart = p.range().end;\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Adds new CSS property \r\n\t\t * @param {String} name Property name\r\n\t\t * @param {String} value Property value\r\n\t\t * @param {Number} pos Position at which to insert new property. By \r\n\t\t * default the property is inserted at the end of rule \r\n\t\t * @returns {CSSEditProperty}\r\n\t\t */\r\n\t\tadd: function(name, value, pos) {\r\n\t\t\tvar list = this.list();\r\n\t\t\tvar start = this._positions.contentStart;\r\n\t\t\tvar styles = _.pick(this.options, 'styleBefore', 'styleSeparator');\r\n\t\t\tvar editTree = require('editTree');\r\n\t\t\t\r\n\t\t\tif (_.isUndefined(pos))\r\n\t\t\t\tpos = list.length;\r\n\t\t\t\r\n\t\t\t/** @type CSSEditProperty */\r\n\t\t\tvar donor = list[pos];\r\n\t\t\tif (donor) {\r\n\t\t\t\tstart = donor.fullRange().start;\r\n\t\t\t} else if (donor = list[pos - 1]) {\r\n\t\t\t\t// make sure that donor has terminating semicolon\r\n\t\t\t\tdonor.end(';');\r\n\t\t\t\tstart = donor.range().end;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (donor) {\r\n\t\t\t\tstyles = _.pick(donor, 'styleBefore', 'styleSeparator');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar nameToken = editTree.createToken(start + styles.styleBefore.length, name);\r\n\t\t\tvar valueToken = editTree.createToken(nameToken.end + styles.styleSeparator.length, value);\r\n\t\t\t\r\n\t\t\tvar property = new CSSEditElement(this, nameToken, valueToken,\r\n\t\t\t\t\teditTree.createToken(valueToken.end, ';'));\r\n\t\t\t\r\n\t\t\t_.extend(property, styles);\r\n\t\t\t\r\n\t\t\t// write new property into the source\r\n\t\t\tthis._updateSource(property.styleBefore + property.toString(), start);\r\n\t\t\t\r\n\t\t\t// insert new property\r\n\t\t\tthis._children.splice(pos, 0, property);\r\n\t\t\treturn property;\r\n\t\t}\r\n\t});\r\n\t\r\n\t/**\r\n\t * @class\r\n\t * @type CSSEditElement\r\n\t * @constructor\r\n\t */\r\n\tvar CSSEditElement = require('editTree').EditElement.extend({\r\n\t\tinitialize: function(rule, name, value, end) {\r\n\t\t\tthis.styleBefore = rule.options.styleBefore;\r\n\t\t\tthis.styleSeparator = rule.options.styleSeparator;\r\n\t\t\t\r\n\t\t\tthis._end = end.value;\r\n\t\t\tthis._positions.end = end.start;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns ranges of complex value parts\r\n\t\t * @returns {Array} Returns <code>null</code> if value is not complex\r\n\t\t */\r\n\t\tvalueParts: function(isAbsolute) {\r\n\t\t\tvar parts = findParts(this.value());\r\n\t\t\tif (isAbsolute) {\r\n\t\t\t\tvar offset = this.valuePosition(true);\r\n\t\t\t\t_.each(parts, function(p) {\r\n\t\t\t\t\tp.shift(offset);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn parts;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Sets of gets property end value (basically, it's a semicolon)\r\n\t\t * @param {String} val New end value. If not passed, current \r\n\t\t * value is returned\r\n\t\t */\r\n\t\tend: function(val) {\r\n\t\t\tif (!_.isUndefined(val) && this._end !== val) {\r\n\t\t\t\tthis.parent._updateSource(val, this._positions.end, this._positions.end + this._end.length);\r\n\t\t\t\tthis._end = val;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this._end;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns full rule range, with indentation\r\n\t\t * @param {Boolean} isAbsolute Return absolute range (with respect of\r\n\t\t * rule offset)\r\n\t\t * @returns {Range}\r\n\t\t */\r\n\t\tfullRange: function(isAbsolute) {\r\n\t\t\tvar r = this.range(isAbsolute);\r\n\t\t\tr.start -= this.styleBefore.length;\r\n\t\t\treturn r;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns item string representation\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\ttoString: function() {\r\n\t\t\treturn this.name() + this.styleSeparator + this.value() + this.end();\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Parses CSS rule into editable tree\r\n\t\t * @param {String} source\r\n\t\t * @param {Object} options\r\n\t\t * @memberOf emmet.cssEditTree\r\n\t\t * @returns {EditContainer}\r\n\t\t */\r\n\t\tparse: function(source, options) {\r\n\t\t\treturn new CSSEditContainer(source, options);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Extract and parse CSS rule from specified position in <code>content</code> \r\n\t\t * @param {String} content CSS source code\r\n\t\t * @param {Number} pos Character position where to start source code extraction\r\n\t\t * @returns {EditContainer}\r\n\t\t */\r\n\t\tparseFromPosition: function(content, pos, isBackward) {\r\n\t\t\tvar bounds = this.extractRule(content, pos, isBackward);\r\n\t\t\tif (!bounds || !bounds.inside(pos))\r\n\t\t\t\t// no matching CSS rule or caret outside rule bounds\r\n\t\t\t\treturn null;\r\n\t\t\t\r\n\t\t\treturn this.parse(bounds.substring(content), {\r\n\t\t\t\toffset: bounds.start\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Extracts single CSS selector definition from source code\r\n\t\t * @param {String} content CSS source code\r\n\t\t * @param {Number} pos Character position where to start source code extraction\r\n\t\t * @returns {Range}\r\n\t\t */\r\n\t\textractRule: function(content, pos, isBackward) {\r\n\t\t\tvar result = '';\r\n\t\t\tvar len = content.length;\r\n\t\t\tvar offset = pos;\r\n\t\t\tvar stopChars = '{}/\\\\<>\\n\\r';\r\n\t\t\tvar bracePos = -1, ch;\r\n\t\t\t\r\n\t\t\t// search left until we find rule edge\r\n\t\t\twhile (offset >= 0) {\r\n\t\t\t\tch = content.charAt(offset);\r\n\t\t\t\tif (ch == '{') {\r\n\t\t\t\t\tbracePos = offset;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ch == '}' && !isBackward) {\r\n\t\t\t\t\toffset++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\toffset--;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// search right for full rule set\r\n\t\t\twhile (offset < len) {\r\n\t\t\t\tch = content.charAt(offset);\r\n\t\t\t\tif (ch == '{') {\r\n\t\t\t\t\tbracePos = offset;\r\n\t\t\t\t} else if (ch == '}') {\r\n\t\t\t\t\tif (bracePos != -1)\r\n\t\t\t\t\t\tresult = content.substring(bracePos, offset + 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\toffset++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (result) {\r\n\t\t\t\t// find CSS selector\r\n\t\t\t\toffset = bracePos - 1;\r\n\t\t\t\tvar selector = '';\r\n\t\t\t\twhile (offset >= 0) {\r\n\t\t\t\t\tch = content.charAt(offset);\r\n\t\t\t\t\tif (stopChars.indexOf(ch) != -1) break;\r\n\t\t\t\t\toffset--;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// also trim whitespace\r\n\t\t\t\tselector = content.substring(offset + 1, bracePos).replace(/^[\\s\\n\\r]+/m, '');\r\n\t\t\t\treturn require('range').create(bracePos - selector.length, result.length + selector.length);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t \t * Removes vendor prefix from CSS property\r\n\t \t * @param {String} name CSS property\r\n\t \t * @return {String}\r\n\t \t */\r\n\t \tbaseName: function(name) {\r\n\t \t\treturn name.replace(/^\\s*\\-\\w+\\-/, '');\r\n\t \t},\r\n\t \t\r\n\t \t/**\r\n\t \t * Finds parts of complex CSS value\r\n\t \t * @param {String} str\r\n\t \t * @returns {Array}\r\n\t \t */\r\n\t \tfindParts: findParts\r\n\t};\r\n});/**\r\n * XML EditTree is a module that can parse an XML/HTML element into a tree with \r\n * convenient methods for adding, modifying and removing attributes. These \r\n * changes can be written back to string with respect of code formatting.\r\n * \r\n * @memberOf __xmlEditTreeDefine\r\n * @constructor\r\n * @param {Function} require\r\n * @param {Underscore} _ \r\n */\r\nemmet.define('xmlEditTree', function(require, _) {\r\n\tvar defaultOptions = {\r\n\t\tstyleBefore: ' ',\r\n\t\tstyleSeparator: '=',\r\n\t\tstyleQuote: '\"',\r\n\t\toffset: 0\r\n\t};\r\n\t\r\n\tvar startTag = /^<([\\w\\:\\-]+)((?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/m;\r\n\t\r\n\tvar XMLEditContainer = require('editTree').EditContainer.extend({\r\n\t\tinitialize: function(source, options) {\r\n\t\t\t_.defaults(this.options, defaultOptions);\r\n\t\t\tthis._positions.name = 1;\r\n\t\t\t\r\n\t\t\tvar attrToken = null;\r\n\t\t\tvar tokens = require('xmlParser').parse(source);\r\n\t\t\tvar range = require('range');\r\n\t\t\t\r\n\t\t\t_.each(tokens, function(token) {\r\n\t\t\t\ttoken.value = range.create(token).substring(source);\r\n\t\t\t\tswitch (token.type) {\r\n\t\t\t\t\tcase 'tag':\r\n\t\t\t\t\t\tif (/^<[^\\/]+/.test(token.value)) {\r\n\t\t\t\t\t\t\tthis._name = token.value.substring(1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tcase 'attribute':\r\n\t\t\t\t\t\t// add empty attribute\r\n\t\t\t\t\t\tif (attrToken) {\r\n\t\t\t\t\t\t\tthis._children.push(new XMLEditElement(this, attrToken));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tattrToken = token;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tcase 'string':\r\n\t\t\t\t\t\tthis._children.push(new XMLEditElement(this, attrToken, token));\r\n\t\t\t\t\t\tattrToken = null;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\t\r\n\t\t\tif (attrToken) {\r\n\t\t\t\tthis._children.push(new XMLEditElement(this, attrToken));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._saveStyle();\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Remembers all styles of properties\r\n\t\t * @private\r\n\t\t */\r\n\t\t_saveStyle: function() {\r\n\t\t\tvar start = this.nameRange().end;\r\n\t\t\tvar source = this.source;\r\n\t\t\t\r\n\t\t\t_.each(this.list(), /** @param {EditElement} p */ function(p) {\r\n\t\t\t\tp.styleBefore = source.substring(start, p.namePosition());\r\n\t\t\t\t\r\n\t\t\t\tif (p.valuePosition() !== -1) {\r\n\t\t\t\t\tp.styleSeparator = source.substring(p.namePosition() + p.name().length, p.valuePosition() - p.styleQuote.length);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tstart = p.range().end;\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Adds new attribute \r\n\t\t * @param {String} name Property name\r\n\t\t * @param {String} value Property value\r\n\t\t * @param {Number} pos Position at which to insert new property. By \r\n\t\t * default the property is inserted at the end of rule \r\n\t\t */\r\n\t\tadd: function(name, value, pos) {\r\n\t\t\tvar list = this.list();\r\n\t\t\tvar start = this.nameRange().end;\r\n\t\t\tvar editTree = require('editTree');\r\n\t\t\tvar styles = _.pick(this.options, 'styleBefore', 'styleSeparator', 'styleQuote');\r\n\t\t\t\r\n\t\t\tif (_.isUndefined(pos))\r\n\t\t\t\tpos = list.length;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t/** @type XMLEditAttribute */\r\n\t\t\tvar donor = list[pos];\r\n\t\t\tif (donor) {\r\n\t\t\t\tstart = donor.fullRange().start;\r\n\t\t\t} else if (donor = list[pos - 1]) {\r\n\t\t\t\tstart = donor.range().end;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (donor) {\r\n\t\t\t\tstyles = _.pick(donor, 'styleBefore', 'styleSeparator', 'styleQuote');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvalue = styles.styleQuote + value + styles.styleQuote;\r\n\t\t\t\r\n\t\t\tvar attribute = new XMLEditElement(this, \r\n\t\t\t\t\teditTree.createToken(start + styles.styleBefore.length, name),\r\n\t\t\t\t\teditTree.createToken(start + styles.styleBefore.length + name.length \r\n\t\t\t\t\t\t\t+ styles.styleSeparator.length, value)\r\n\t\t\t\t\t);\r\n\t\t\t\r\n\t\t\t_.extend(attribute, styles);\r\n\t\t\t\r\n\t\t\t// write new attribute into the source\r\n\t\t\tthis._updateSource(attribute.styleBefore + attribute.toString(), start);\r\n\t\t\t\r\n\t\t\t// insert new attribute\r\n\t\t\tthis._children.splice(pos, 0, attribute);\r\n\t\t\treturn attribute;\r\n\t\t}\r\n\t});\r\n\t\r\n\tvar XMLEditElement = require('editTree').EditElement.extend({\r\n\t\tinitialize: function(parent, nameToken, valueToken) {\r\n\t\t\tthis.styleBefore = parent.options.styleBefore;\r\n\t\t\tthis.styleSeparator = parent.options.styleSeparator;\r\n\t\t\t\r\n\t\t\tvar value = '', quote = parent.options.styleQuote;\r\n\t\t\tif (valueToken) {\r\n\t\t\t\tvalue = valueToken.value;\r\n\t\t\t\tquote = value.charAt(0);\r\n\t\t\t\tif (quote == '\"' || quote == \"'\") {\r\n\t\t\t\t\tvalue = value.substring(1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tquote = '';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (quote && value.charAt(value.length - 1) == quote) {\r\n\t\t\t\t\tvalue = value.substring(0, value.length - 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.styleQuote = quote;\r\n\t\t\t\r\n\t\t\tthis._value = value;\r\n\t\t\tthis._positions.value = valueToken ? valueToken.start + quote.length : -1;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns full rule range, with indentation\r\n\t\t * @param {Boolean} isAbsolute Return absolute range (with respect of\r\n\t\t * rule offset)\r\n\t\t * @returns {Range}\r\n\t\t */\r\n\t\tfullRange: function(isAbsolute) {\r\n\t\t\tvar r = this.range(isAbsolute);\r\n\t\t\tr.start -= this.styleBefore.length;\r\n\t\t\treturn r;\r\n\t\t},\r\n\t\t\r\n\t\ttoString: function() {\r\n\t\t\treturn this.name() + this.styleSeparator\r\n\t\t\t\t+ this.styleQuote + this.value() + this.styleQuote;\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Parses HTML element into editable tree\r\n\t\t * @param {String} source\r\n\t\t * @param {Object} options\r\n\t\t * @memberOf emmet.htmlEditTree\r\n\t\t * @returns {EditContainer}\r\n\t\t */\r\n\t\tparse: function(source, options) {\r\n\t\t\treturn new XMLEditContainer(source, options);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Extract and parse HTML from specified position in <code>content</code> \r\n\t\t * @param {String} content CSS source code\r\n\t\t * @param {Number} pos Character position where to start source code extraction\r\n\t\t * @returns {XMLEditElement}\r\n\t\t */\r\n\t\tparseFromPosition: function(content, pos, isBackward) {\r\n\t\t\tvar bounds = this.extractTag(content, pos, isBackward);\r\n\t\t\tif (!bounds || !bounds.inside(pos))\r\n\t\t\t\t// no matching HTML tag or caret outside tag bounds\r\n\t\t\t\treturn null;\r\n\t\t\t\r\n\t\t\treturn this.parse(bounds.substring(content), {\r\n\t\t\t\toffset: bounds.start\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Extracts nearest HTML tag range from <code>content</code>, starting at \r\n\t\t * <code>pos</code> position\r\n\t\t * @param {String} content\r\n\t\t * @param {Number} pos\r\n\t\t * @param {Boolean} isBackward\r\n\t\t * @returns {Range}\r\n\t\t */\r\n\t\textractTag: function(content, pos, isBackward) {\r\n\t\t\tvar len = content.length, i;\r\n\t\t\tvar range = require('range');\r\n\t\t\t\r\n\t\t\t// max extraction length. I don't think there may be tags larger \r\n\t\t\t// than 2000 characters length\r\n\t\t\tvar maxLen = Math.min(2000, len);\r\n\t\t\t\r\n\t\t\t/** @type Range */\r\n\t\t\tvar r = null;\r\n\t\t\t\r\n\t\t\tvar match = function(pos) {\r\n\t\t\t\tvar m;\r\n\t\t\t\tif (content.charAt(pos) == '<' && (m = content.substr(pos, maxLen).match(startTag)))\r\n\t\t\t\t\treturn range.create(pos, m[0]);\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t// lookup backward, in case we are inside tag already\r\n\t\t\tfor (i = pos; i >= 0; i--) {\r\n\t\t\t\tif (r = match(i)) break;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (r && (r.inside(pos) || isBackward))\r\n\t\t\t\treturn r;\r\n\t\t\t\r\n\t\t\tif (!r && isBackward)\r\n\t\t\t\treturn null;\r\n\t\t\t\r\n\t\t\t// search forward\r\n\t\t\tfor (i = pos; i < len; i++) {\r\n\t\t\t\tif (r = match(i))\r\n\t\t\t\t\treturn r;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n});/**\r\n * 'Expand abbreviation' editor action: extracts abbreviation from current caret \r\n * position and replaces it with formatted output. \r\n * <br><br>\r\n * This behavior can be overridden with custom handlers which can perform \r\n * different actions when 'Expand Abbreviation' action is called.\r\n * For example, a CSS gradient handler that produces vendor-prefixed gradient\r\n * definitions registers its own expand abbreviation handler.  \r\n *  \r\n * @constructor\r\n * @memberOf __expandAbbreviationActionDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('expandAbbreviation', function(require, _) {\r\n\t/**\r\n\t * @type HandlerList List of registered handlers\r\n\t */\r\n\tvar handlers = require('handlerList').create();\r\n\t\r\n\t/** Back-reference to module */\r\n\tvar module = null;\r\n\t\r\n\tvar actions = require('actions');\r\n\t/**\r\n\t * 'Expand abbreviation' editor action \r\n\t * @param {IEmmetEditor} editor Editor instance\r\n\t * @param {String} syntax Syntax type (html, css, etc.)\r\n\t * @param {String} profile Output profile name (html, xml, xhtml)\r\n\t * @return {Boolean} Returns <code>true</code> if abbreviation was expanded \r\n\t * successfully\r\n\t */\r\n\tactions.add('expand_abbreviation', function(editor, syntax, profile) {\r\n\t\tvar args = _.toArray(arguments);\r\n\t\t\r\n\t\t// normalize incoming arguments\r\n\t\tvar info = require('editorUtils').outputInfo(editor, syntax, profile);\r\n\t\targs[1] = info.syntax;\r\n\t\targs[2] = info.profile;\r\n\t\t\r\n\t\treturn handlers.exec(false, args);\r\n\t});\r\n\t\r\n\t/**\r\n\t * A special version of <code>expandAbbreviation</code> function: if it can't\r\n\t * find abbreviation, it will place Tab character at caret position\r\n\t * @param {IEmmetEditor} editor Editor instance\r\n\t * @param {String} syntax Syntax type (html, css, etc.)\r\n\t * @param {String} profile Output profile name (html, xml, xhtml)\r\n\t */\r\n\tactions.add('expand_abbreviation_with_tab', function(editor, syntax, profile) {\r\n\t\tvar sel = editor.getSelection();\r\n\t\tvar indent = require('resources').getVariable('indentation');\r\n\t\tif (sel) {\r\n\t\t\t// indent selection\r\n\t\t\tvar utils = require('utils');\r\n\t\t\tvar selRange = require('range').create(editor.getSelectionRange());\r\n\t\t\tvar content = utils.padString(sel, indent);\r\n\t\t\t\r\n\t\t\teditor.replaceContent(indent + '${0}', editor.getCaretPos());\r\n\t\t\tvar replaceRange = require('range').create(editor.getCaretPos(), selRange.length());\r\n\t\t\teditor.replaceContent(content, replaceRange.start, replaceRange.end, true);\r\n\t\t\teditor.createSelection(replaceRange.start, replaceRange.start + content.length);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif (!actions.run('expand_abbreviation', editor, syntax, profile)) {\r\n\t\t\teditor.replaceContent(indent, editor.getCaretPos());\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t}, {hidden: true});\r\n\t\r\n\t// XXX setup default handler\r\n\t/**\r\n\t * Extracts abbreviation from current caret \r\n\t * position and replaces it with formatted output \r\n\t * @param {IEmmetEditor} editor Editor instance\r\n\t * @param {String} syntax Syntax type (html, css, etc.)\r\n\t * @param {String} profile Output profile name (html, xml, xhtml)\r\n\t * @return {Boolean} Returns <code>true</code> if abbreviation was expanded \r\n\t * successfully\r\n\t */\r\n\thandlers.add(function(editor, syntax, profile) {\r\n\t\tvar caretPos = editor.getSelectionRange().end;\r\n\t\tvar abbr = module.findAbbreviation(editor);\r\n\t\t\t\r\n\t\tif (abbr) {\r\n\t\t\tvar content = emmet.expandAbbreviation(abbr, syntax, profile, \r\n\t\t\t\t\trequire('actionUtils').captureContext(editor));\r\n\t\t\tif (content) {\r\n\t\t\t\teditor.replaceContent(content, caretPos - abbr.length, caretPos);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}, {order: -1});\r\n\t\r\n\treturn module = {\r\n\t\t/**\r\n\t\t * Adds custom expand abbreviation handler. The passed function should \r\n\t\t * return <code>true</code> if it was performed successfully, \r\n\t\t * <code>false</code> otherwise.\r\n\t\t * \r\n\t\t * Added handlers will be called when 'Expand Abbreviation' is called\r\n\t\t * in order they were added\r\n\t\t * @memberOf expandAbbreviation\r\n\t\t * @param {Function} fn\r\n\t\t * @param {Object} options\r\n\t\t */\r\n\t\taddHandler: function(fn, options) {\r\n\t\t\thandlers.add(fn, options);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes registered handler\r\n\t\t * @returns\r\n\t\t */\r\n\t\tremoveHandler: function(fn) {\r\n\t\t\thandlers.remove(fn, options);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Search for abbreviation in editor from current caret position\r\n\t\t * @param {IEmmetEditor} editor Editor instance\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tfindAbbreviation: function(editor) {\r\n\t\t\t/** @type Range */\r\n\t\t\tvar range = require('range').create(editor.getSelectionRange());\r\n\t\t\tvar content = String(editor.getContent());\r\n\t\t\tif (range.length()) {\r\n\t\t\t\t// abbreviation is selected by user\r\n\t\t\t\treturn range.substring(content);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// search for new abbreviation from current caret position\r\n\t\t\tvar curLine = editor.getCurrentLineRange();\r\n\t\t\treturn require('actionUtils').extractAbbreviation(content.substring(curLine.start, range.start));\r\n\t\t}\r\n\t};\r\n});/**\r\n * Action that wraps content with abbreviation. For convenience, action is \r\n * defined as reusable module\r\n * @constructor\r\n * @memberOf __wrapWithAbbreviationDefine\r\n */\r\nemmet.define('wrapWithAbbreviation', function(require, _) {\r\n\t/** Back-references to current module */\r\n\tvar module = null;\r\n\t\r\n\t/**\r\n\t * Wraps content with abbreviation\r\n\t * @param {IEmmetEditor} Editor instance\r\n\t * @param {String} abbr Abbreviation to wrap with\r\n\t * @param {String} syntax Syntax type (html, css, etc.)\r\n\t * @param {String} profile Output profile name (html, xml, xhtml)\r\n\t */\r\n\trequire('actions').add('wrap_with_abbreviation', function (editor, abbr, syntax, profile) {\r\n\t\tvar info = require('editorUtils').outputInfo(editor, syntax, profile);\r\n\t\tvar utils = require('utils');\r\n\t\t/** @type emmet.editorUtils */\r\n\t\tvar editorUtils = require('editorUtils');\r\n\t\tabbr = abbr || editor.prompt(\"Enter abbreviation\");\r\n\t\t\r\n\t\tif (!abbr) \r\n\t\t\treturn null;\r\n\t\t\r\n\t\tabbr = String(abbr);\r\n\t\t\r\n\t\tvar range = require('range').create(editor.getSelectionRange());\r\n\t\t\r\n\t\tif (!range.length()) {\r\n\t\t\t// no selection, find tag pair\r\n\t\t\tvar match = require('htmlMatcher').tag(info.content, range.start);\r\n\t\t\tif (!match) {  // nothing to wrap\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\trange = utils.narrowToNonSpace(info.content, match.range);\r\n\t\t}\r\n\t\t\r\n\t\tvar newContent = utils.escapeText(range.substring(info.content));\r\n\t\tvar result = module\r\n\t\t\t.wrap(abbr, editorUtils.unindent(editor, newContent), info.syntax, \r\n\t\t\t\t\tinfo.profile, require('actionUtils').captureContext(editor));\r\n\t\t\r\n\t\tif (result) {\r\n\t\t\teditor.replaceContent(result, range.start, range.end);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t});\r\n\t\r\n\treturn module = {\r\n\t\t/**\r\n\t\t * Wraps passed text with abbreviation. Text will be placed inside last\r\n\t\t * expanded element\r\n\t\t * @memberOf wrapWithAbbreviation\r\n\t\t * @param {String} abbr Abbreviation\r\n\t\t * @param {String} text Text to wrap\r\n\t\t * @param {String} syntax Document type (html, xml, etc.). Default is 'html'\r\n\t\t * @param {String} profile Output profile's name. Default is 'plain'\r\n\t\t * @param {Object} contextNode Context node inside which abbreviation\r\n\t\t * is wrapped. It will be used as a reference for node name resolvers\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\twrap: function(abbr, text, syntax, profile, contextNode) {\r\n\t\t\t/** @type emmet.filters */\r\n\t\t\tvar filters = require('filters');\r\n\t\t\t/** @type emmet.utils */\r\n\t\t\tvar utils = require('utils');\r\n\t\t\t\r\n\t\t\tsyntax = syntax || emmet.defaultSyntax();\r\n\t\t\tprofile = require('profile').get(profile, syntax);\r\n\t\t\t\r\n\t\t\trequire('tabStops').resetTabstopIndex();\r\n\t\t\t\r\n\t\t\tvar data = filters.extractFromAbbreviation(abbr);\r\n\t\t\tvar parsedTree = require('abbreviationParser').parse(data[0], {\r\n\t\t\t\tsyntax: syntax,\r\n\t\t\t\tpastedContent: text,\r\n\t\t\t\tcontextNode: contextNode\r\n\t\t\t});\r\n\t\t\tif (parsedTree) {\r\n\t\t\t\tvar filtersList = filters.composeList(syntax, profile, data[1]);\r\n\t\t\t\tfilters.apply(parsedTree, filtersList, profile);\r\n\t\t\t\treturn utils.replaceVariables(parsedTree.toString());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n});/**\r\n * Toggles HTML and CSS comments depending on current caret context. Unlike\r\n * the same action in most editors, this action toggles comment on currently\r\n * matched item—HTML tag or CSS selector—when nothing is selected.\r\n * \r\n * @param {Function} require\r\n * @param {Underscore} _\r\n * @memberOf __toggleCommentAction\r\n * @constructor\r\n */\r\nemmet.exec(function(require, _) {\r\n\t/**\r\n\t * Toggle HTML comment on current selection or tag\r\n\t * @param {IEmmetEditor} editor\r\n\t * @return {Boolean} Returns <code>true</code> if comment was toggled\r\n\t */\r\n\tfunction toggleHTMLComment(editor) {\r\n\t\t/** @type Range */\r\n\t\tvar range = require('range').create(editor.getSelectionRange());\r\n\t\tvar info = require('editorUtils').outputInfo(editor);\r\n\t\t\t\r\n\t\tif (!range.length()) {\r\n\t\t\t// no selection, find matching tag\r\n\t\t\tvar tag = require('htmlMatcher').tag(info.content, editor.getCaretPos());\r\n\t\t\tif (tag) { // found pair\r\n\t\t\t\trange = tag.outerRange;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn genericCommentToggle(editor, '<!--', '-->', range);\r\n\t}\r\n\r\n\t/**\r\n\t * Simple CSS commenting\r\n\t * @param {IEmmetEditor} editor\r\n\t * @return {Boolean} Returns <code>true</code> if comment was toggled\r\n\t */\r\n\tfunction toggleCSSComment(editor) {\r\n\t\t/** @type Range */\r\n\t\tvar range = require('range').create(editor.getSelectionRange());\r\n\t\tvar info = require('editorUtils').outputInfo(editor);\r\n\t\t\t\r\n\t\tif (!range.length()) {\r\n\t\t\t// no selection, try to get current rule\r\n\t\t\t/** @type CSSRule */\r\n\t\t\tvar rule = require('cssEditTree').parseFromPosition(info.content, editor.getCaretPos());\r\n\t\t\tif (rule) {\r\n\t\t\t\tvar property = cssItemFromPosition(rule, editor.getCaretPos());\r\n\t\t\t\trange = property \r\n\t\t\t\t\t? property.range(true) \r\n\t\t\t\t\t: require('range').create(rule.nameRange(true).start, rule.source);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (!range.length()) {\r\n\t\t\t// still no selection, get current line\r\n\t\t\trange = require('range').create(editor.getCurrentLineRange());\r\n\t\t\trequire('utils').narrowToNonSpace(info.content, range);\r\n\t\t}\r\n\t\t\r\n\t\treturn genericCommentToggle(editor, '/*', '*/', range);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns CSS property from <code>rule</code> that matches passed position\r\n\t * @param {EditContainer} rule\r\n\t * @param {Number} absPos\r\n\t * @returns {EditElement}\r\n\t */\r\n\tfunction cssItemFromPosition(rule, absPos) {\r\n\t\t// do not use default EditContainer.itemFromPosition() here, because\r\n\t\t// we need to make a few assumptions to make CSS commenting more reliable\r\n\t\tvar relPos = absPos - (rule.options.offset || 0);\r\n\t\tvar reSafeChar = /^[\\s\\n\\r]/;\r\n\t\treturn _.find(rule.list(), function(item) {\r\n\t\t\tif (item.range().end === relPos) {\r\n\t\t\t\t// at the end of property, but outside of it\r\n\t\t\t\t// if there’s a space character at current position,\r\n\t\t\t\t// use current property\r\n\t\t\t\treturn reSafeChar.test(rule.source.charAt(relPos));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn item.range().inside(relPos);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Search for nearest comment in <code>str</code>, starting from index <code>from</code>\r\n\t * @param {String} text Where to search\r\n\t * @param {Number} from Search start index\r\n\t * @param {String} start_token Comment start string\r\n\t * @param {String} end_token Comment end string\r\n\t * @return {Range} Returns null if comment wasn't found\r\n\t */\r\n\tfunction searchComment(text, from, startToken, endToken) {\r\n\t\tvar commentStart = -1;\r\n\t\tvar commentEnd = -1;\r\n\t\t\r\n\t\tvar hasMatch = function(str, start) {\r\n\t\t\treturn text.substr(start, str.length) == str;\r\n\t\t};\r\n\t\t\t\r\n\t\t// search for comment start\r\n\t\twhile (from--) {\r\n\t\t\tif (hasMatch(startToken, from)) {\r\n\t\t\t\tcommentStart = from;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (commentStart != -1) {\r\n\t\t\t// search for comment end\r\n\t\t\tfrom = commentStart;\r\n\t\t\tvar contentLen = text.length;\r\n\t\t\twhile (contentLen >= from++) {\r\n\t\t\t\tif (hasMatch(endToken, from)) {\r\n\t\t\t\t\tcommentEnd = from + endToken.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn (commentStart != -1 && commentEnd != -1) \r\n\t\t\t? require('range').create(commentStart, commentEnd - commentStart) \r\n\t\t\t: null;\r\n\t}\r\n\r\n\t/**\r\n\t * Generic comment toggling routine\r\n\t * @param {IEmmetEditor} editor\r\n\t * @param {String} commentStart Comment start token\r\n\t * @param {String} commentEnd Comment end token\r\n\t * @param {Range} range Selection range\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction genericCommentToggle(editor, commentStart, commentEnd, range) {\r\n\t\tvar editorUtils = require('editorUtils');\r\n\t\tvar content = editorUtils.outputInfo(editor).content;\r\n\t\tvar caretPos = editor.getCaretPos();\r\n\t\tvar newContent = null;\r\n\t\t\r\n\t\tvar utils = require('utils');\r\n\t\t\t\r\n\t\t/**\r\n\t\t * Remove comment markers from string\r\n\t\t * @param {Sting} str\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tfunction removeComment(str) {\r\n\t\t\treturn str\r\n\t\t\t\t.replace(new RegExp('^' + utils.escapeForRegexp(commentStart) + '\\\\s*'), function(str){\r\n\t\t\t\t\tcaretPos -= str.length;\r\n\t\t\t\t\treturn '';\r\n\t\t\t\t}).replace(new RegExp('\\\\s*' + utils.escapeForRegexp(commentEnd) + '$'), '');\r\n\t\t}\r\n\t\t\r\n\t\t// first, we need to make sure that this substring is not inside \r\n\t\t// comment\r\n\t\tvar commentRange = searchComment(content, caretPos, commentStart, commentEnd);\r\n\t\tif (commentRange && commentRange.overlap(range)) {\r\n\t\t\t// we're inside comment, remove it\r\n\t\t\trange = commentRange;\r\n\t\t\tnewContent = removeComment(range.substring(content));\r\n\t\t} else {\r\n\t\t\t// should add comment\r\n\t\t\t// make sure that there's no comment inside selection\r\n\t\t\tnewContent = commentStart + ' ' +\r\n\t\t\t\trange.substring(content)\r\n\t\t\t\t\t.replace(new RegExp(utils.escapeForRegexp(commentStart) + '\\\\s*|\\\\s*' + utils.escapeForRegexp(commentEnd), 'g'), '') +\r\n\t\t\t\t' ' + commentEnd;\r\n\t\t\t\t\r\n\t\t\t// adjust caret position\r\n\t\t\tcaretPos += commentStart.length + 1;\r\n\t\t}\r\n\r\n\t\t// replace editor content\r\n\t\tif (newContent !== null) {\r\n\t\t\tnewContent = utils.escapeText(newContent);\r\n\t\t\teditor.setCaretPos(range.start);\r\n\t\t\teditor.replaceContent(editorUtils.unindent(editor, newContent), range.start, range.end);\r\n\t\t\teditor.setCaretPos(caretPos);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Toggle comment on current editor's selection or HTML tag/CSS rule\r\n\t * @param {IEmmetEditor} editor\r\n\t */\r\n\trequire('actions').add('toggle_comment', function(editor) {\r\n\t\tvar info = require('editorUtils').outputInfo(editor);\r\n\t\tif (info.syntax == 'css') {\r\n\t\t\t// in case our editor is good enough and can recognize syntax from \r\n\t\t\t// current token, we have to make sure that cursor is not inside\r\n\t\t\t// 'style' attribute of html element\r\n\t\t\tvar caretPos = editor.getCaretPos();\r\n\t\t\tvar tag = require('htmlMatcher').tag(info.content, caretPos);\r\n\t\t\tif (tag && tag.open.range.inside(caretPos)) {\r\n\t\t\t\tinfo.syntax = 'html';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (info.syntax == 'css')\r\n\t\t\treturn toggleCSSComment(editor);\r\n\t\t\r\n\t\treturn toggleHTMLComment(editor);\r\n\t});\r\n});/**\r\n * Move between next/prev edit points. 'Edit points' are places between tags \r\n * and quotes of empty attributes in html\r\n * @constructor\r\n * \r\n * @memberOf __editPointActionDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\t/**\r\n\t * Search for new caret insertion point\r\n\t * @param {IEmmetEditor} editor Editor instance\r\n\t * @param {Number} inc Search increment: -1 — search left, 1 — search right\r\n\t * @param {Number} offset Initial offset relative to current caret position\r\n\t * @return {Number} Returns -1 if insertion point wasn't found\r\n\t */\r\n\tfunction findNewEditPoint(editor, inc, offset) {\r\n\t\tinc = inc || 1;\r\n\t\toffset = offset || 0;\r\n\t\t\r\n\t\tvar curPoint = editor.getCaretPos() + offset;\r\n\t\tvar content = String(editor.getContent());\r\n\t\tvar maxLen = content.length;\r\n\t\tvar nextPoint = -1;\r\n\t\tvar reEmptyLine = /^\\s+$/;\r\n\t\t\r\n\t\tfunction getLine(ix) {\r\n\t\t\tvar start = ix;\r\n\t\t\twhile (start >= 0) {\r\n\t\t\t\tvar c = content.charAt(start);\r\n\t\t\t\tif (c == '\\n' || c == '\\r')\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tstart--;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn content.substring(start, ix);\r\n\t\t}\r\n\t\t\t\r\n\t\twhile (curPoint <= maxLen && curPoint >= 0) {\r\n\t\t\tcurPoint += inc;\r\n\t\t\tvar curChar = content.charAt(curPoint);\r\n\t\t\tvar nextChar = content.charAt(curPoint + 1);\r\n\t\t\tvar prevChar = content.charAt(curPoint - 1);\r\n\t\t\t\t\r\n\t\t\tswitch (curChar) {\r\n\t\t\t\tcase '\"':\r\n\t\t\t\tcase '\\'':\r\n\t\t\t\t\tif (nextChar == curChar && prevChar == '=') {\r\n\t\t\t\t\t\t// empty attribute\r\n\t\t\t\t\t\tnextPoint = curPoint + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '>':\r\n\t\t\t\t\tif (nextChar == '<') {\r\n\t\t\t\t\t\t// between tags\r\n\t\t\t\t\t\tnextPoint = curPoint + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '\\n':\r\n\t\t\t\tcase '\\r':\r\n\t\t\t\t\t// empty line\r\n\t\t\t\t\tif (reEmptyLine.test(getLine(curPoint - 1))) {\r\n\t\t\t\t\t\tnextPoint = curPoint;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (nextPoint != -1)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t\treturn nextPoint;\r\n\t}\r\n\t\r\n\t/** @type emmet.actions */\r\n\tvar actions = require('actions');\r\n\t\r\n\t/**\r\n\t * Move caret to previous edit point\r\n\t * @param {IEmmetEditor} editor Editor instance\r\n\t */\r\n\tactions.add('prev_edit_point', function(editor) {\r\n\t\tvar curPos = editor.getCaretPos();\r\n\t\tvar newPoint = findNewEditPoint(editor, -1);\r\n\t\t\t\r\n\t\tif (newPoint == curPos)\r\n\t\t\t// we're still in the same point, try searching from the other place\r\n\t\t\tnewPoint = findNewEditPoint(editor, -1, -2);\r\n\t\t\r\n\t\tif (newPoint != -1) {\r\n\t\t\teditor.setCaretPos(newPoint);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}, {label: 'Previous Edit Point'});\r\n\t\r\n\t/**\r\n\t * Move caret to next edit point\r\n\t * @param {IEmmetEditor} editor Editor instance\r\n\t */\r\n\tactions.add('next_edit_point', function(editor) {\r\n\t\tvar newPoint = findNewEditPoint(editor, 1);\r\n\t\tif (newPoint != -1) {\r\n\t\t\teditor.setCaretPos(newPoint);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t});\r\n});/**\r\n * Actions that use stream parsers and tokenizers for traversing:\r\n * -- Search for next/previous items in HTML\r\n * -- Search for next/previous items in CSS\r\n * @constructor\r\n * @memberOf __selectItemActionDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\tvar startTag = /^<([\\w\\:\\-]+)((?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\r\n\t\r\n\t/**\r\n\t * Generic function for searching for items to select\r\n\t * @param {IEmmetEditor} editor\r\n\t * @param {Boolean} isBackward Search backward (search forward otherwise)\r\n\t * @param {Function} extractFn Function that extracts item content\r\n\t * @param {Function} rangeFn Function that search for next token range\r\n\t */\r\n\tfunction findItem(editor, isBackward, extractFn, rangeFn) {\r\n\t\tvar range = require('range');\r\n\t\tvar content = require('editorUtils').outputInfo(editor).content;\r\n\t\t\r\n\t\tvar contentLength = content.length;\r\n\t\tvar itemRange, rng;\r\n\t\t/** @type Range */\r\n\t\tvar prevRange = range.create(-1, 0);\r\n\t\t/** @type Range */\r\n\t\tvar sel = range.create(editor.getSelectionRange());\r\n\t\t\r\n\t\tvar searchPos = sel.start, loop = 100000; // endless loop protection\r\n\t\twhile (searchPos >= 0 && searchPos < contentLength && --loop > 0) {\r\n\t\t\tif ( (itemRange = extractFn(content, searchPos, isBackward)) ) {\r\n\t\t\t\tif (prevRange.equal(itemRange)) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tprevRange = itemRange.clone();\r\n\t\t\t\trng = rangeFn(itemRange.substring(content), itemRange.start, sel.clone());\r\n\t\t\t\t\r\n\t\t\t\tif (rng) {\r\n\t\t\t\t\teditor.createSelection(rng.start, rng.end);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsearchPos = isBackward ? itemRange.start : itemRange.end - 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsearchPos += isBackward ? -1 : 1;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// XXX HTML section\r\n\t\r\n\t/**\r\n\t * Find next HTML item\r\n\t * @param {IEmmetEditor} editor\r\n\t */\r\n\tfunction findNextHTMLItem(editor) {\r\n\t\tvar isFirst = true;\r\n\t\treturn findItem(editor, false, function(content, searchPos){\r\n\t\t\tif (isFirst) {\r\n\t\t\t\tisFirst = false;\r\n\t\t\t\treturn findOpeningTagFromPosition(content, searchPos);\r\n\t\t\t} else {\r\n\t\t\t\treturn getOpeningTagFromPosition(content, searchPos);\r\n\t\t\t}\r\n\t\t}, function(tag, offset, selRange) {\r\n\t\t\treturn getRangeForHTMLItem(tag, offset, selRange, false);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Find previous HTML item\r\n\t * @param {IEmmetEditor} editor\r\n\t */\r\n\tfunction findPrevHTMLItem(editor) {\r\n\t\treturn findItem(editor, true, getOpeningTagFromPosition, function (tag, offset, selRange) {\r\n\t\t\treturn getRangeForHTMLItem(tag, offset, selRange, true);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates possible selection ranges for HTML tag\r\n\t * @param {String} source Original HTML source for tokens\r\n\t * @param {Array} tokens List of HTML tokens\r\n\t * @returns {Array}\r\n\t */\r\n\tfunction makePossibleRangesHTML(source, tokens, offset) {\r\n\t\toffset = offset || 0;\r\n\t\tvar range = require('range');\r\n\t\tvar result = [];\r\n\t\tvar attrStart = -1, attrName = '', attrValue = '', attrValueRange, tagName;\r\n\t\t_.each(tokens, function(tok) {\r\n\t\t\tswitch (tok.type) {\r\n\t\t\t\tcase 'tag':\r\n\t\t\t\t\ttagName = source.substring(tok.start, tok.end);\r\n\t\t\t\t\tif (/^<[\\w\\:\\-]/.test(tagName)) {\r\n\t\t\t\t\t\t// add tag name\r\n\t\t\t\t\t\tresult.push(range.create({\r\n\t\t\t\t\t\t\tstart: tok.start + 1, \r\n\t\t\t\t\t\t\tend: tok.end\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'attribute':\r\n\t\t\t\t\tattrStart = tok.start;\r\n\t\t\t\t\tattrName = source.substring(tok.start, tok.end);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\t// attribute value\r\n\t\t\t\t\t// push full attribute first\r\n\t\t\t\t\t result.push(range.create(attrStart, tok.end - attrStart));\r\n\t\t\t\t\t \r\n\t\t\t\t\t attrValueRange = range.create(tok);\r\n\t\t\t\t\t attrValue = attrValueRange.substring(source);\r\n\t\t\t\t\t \r\n\t\t\t\t\t // is this a quoted attribute?\r\n\t\t\t\t\t if (isQuote(attrValue.charAt(0)))\r\n\t\t\t\t\t\t attrValueRange.start++;\r\n\t\t\t\t\t \r\n\t\t\t\t\t if (isQuote(attrValue.charAt(attrValue.length - 1)))\r\n\t\t\t\t\t\t attrValueRange.end--;\r\n\t\t\t\t\t \r\n\t\t\t\t\t result.push(attrValueRange);\r\n\t\t\t\t\t \r\n\t\t\t\t\t if (attrName == 'class') {\r\n\t\t\t\t\t\t result = result.concat(classNameRanges(attrValueRange.substring(source), attrValueRange.start));\r\n\t\t\t\t\t }\r\n\t\t\t\t\t \r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// offset ranges\r\n\t\t_.each(result, function(r) {\r\n\t\t\tr.shift(offset);\r\n\t\t});\r\n\t\t\r\n\t\treturn _.chain(result)\r\n\t\t\t.filter(function(item) {        // remove empty\r\n\t\t\t\treturn !!item.length();\r\n\t\t\t})\r\n\t\t\t.uniq(false, function(item) {   // remove duplicates\r\n\t\t\t\treturn item.toString();\r\n\t\t\t})\r\n\t\t\t.value();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns ranges of class names in \"class\" attribute value\r\n\t * @param {String} className\r\n\t * @returns {Array}\r\n\t */\r\n\tfunction classNameRanges(className, offset) {\r\n\t\toffset = offset || 0;\r\n\t\tvar result = [];\r\n\t\t/** @type StringStream */\r\n\t\tvar stream = require('stringStream').create(className);\r\n\t\tvar range = require('range');\r\n\t\t\r\n\t\t// skip whitespace\r\n\t\tstream.eatSpace();\r\n\t\tstream.start = stream.pos;\r\n\t\t\r\n\t\tvar ch;\r\n\t\twhile (ch = stream.next()) {\r\n\t\t\tif (/[\\s\\u00a0]/.test(ch)) {\r\n\t\t\t\tresult.push(range.create(stream.start + offset, stream.pos - stream.start - 1));\r\n\t\t\t\tstream.eatSpace();\r\n\t\t\t\tstream.start = stream.pos;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tresult.push(range.create(stream.start + offset, stream.pos - stream.start));\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns best HTML tag range match for current selection\r\n\t * @param {String} tag Tag declaration\r\n\t * @param {Number} offset Tag's position index inside content\r\n\t * @param {Range} selRange Selection range\r\n\t * @return {Range} Returns range if next item was found, <code>null</code> otherwise\r\n\t */\r\n\tfunction getRangeForHTMLItem(tag, offset, selRange, isBackward) {\r\n\t\tvar ranges = makePossibleRangesHTML(tag, require('xmlParser').parse(tag), offset);\r\n\t\t\r\n\t\tif (isBackward)\r\n\t\t\tranges.reverse();\r\n\t\t\r\n\t\t// try to find selected range\r\n\t\tvar curRange = _.find(ranges, function(r) {\r\n\t\t\treturn r.equal(selRange);\r\n\t\t});\r\n\t\t\r\n\t\tif (curRange) {\r\n\t\t\tvar ix = _.indexOf(ranges, curRange);\r\n\t\t\tif (ix < ranges.length - 1)\r\n\t\t\t\treturn ranges[ix + 1];\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\t// no selected range, find nearest one\r\n\t\tif (isBackward)\r\n\t\t\t// search backward\r\n\t\t\treturn _.find(ranges, function(r) {\r\n\t\t\t\treturn r.start < selRange.start;\r\n\t\t\t});\r\n\t\t\r\n\t\t// search forward\r\n\t\t// to deal with overlapping ranges (like full attribute definition\r\n\t\t// and attribute value) let's find range under caret first\r\n\t\tif (!curRange) {\r\n\t\t\tvar matchedRanges = _.filter(ranges, function(r) {\r\n\t\t\t\treturn r.inside(selRange.end);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif (matchedRanges.length > 1)\r\n\t\t\t\treturn matchedRanges[1];\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\treturn _.find(ranges, function(r) {\r\n\t\t\treturn r.end > selRange.end;\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Search for opening tag in content, starting at specified position\r\n\t * @param {String} html Where to search tag\r\n\t * @param {Number} pos Character index where to start searching\r\n\t * @return {Range} Returns range if valid opening tag was found,\r\n\t * <code>null</code> otherwise\r\n\t */\r\n\tfunction findOpeningTagFromPosition(html, pos) {\r\n\t\tvar tag;\r\n\t\twhile (pos >= 0) {\r\n\t\t\tif (tag = getOpeningTagFromPosition(html, pos))\r\n\t\t\t\treturn tag;\r\n\t\t\tpos--;\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {String} html Where to search tag\r\n\t * @param {Number} pos Character index where to start searching\r\n\t * @return {Range} Returns range if valid opening tag was found,\r\n\t * <code>null</code> otherwise\r\n\t */\r\n\tfunction getOpeningTagFromPosition(html, pos) {\r\n\t\tvar m;\r\n\t\tif (html.charAt(pos) == '<' && (m = html.substring(pos, html.length).match(startTag))) {\r\n\t\t\treturn require('range').create(pos, m[0]);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction isQuote(ch) {\r\n\t\treturn ch == '\"' || ch == \"'\";\r\n\t}\r\n\t\r\n\t/**\r\n\t * Makes all possible selection ranges for specified CSS property\r\n\t * @param {CSSProperty} property\r\n\t * @returns {Array}\r\n\t */\r\n\tfunction makePossibleRangesCSS(property) {\r\n\t\t// find all possible ranges, sorted by position and size\r\n\t\tvar valueRange = property.valueRange(true);\r\n\t\tvar result = [property.range(true), valueRange];\r\n\t\tvar stringStream = require('stringStream');\r\n\t\tvar cssEditTree = require('cssEditTree');\r\n\t\tvar range = require('range');\r\n\t\t\r\n\t\t// locate parts of complex values.\r\n\t\t// some examples:\r\n\t\t// – 1px solid red: 3 parts\r\n\t\t// – arial, sans-serif: enumeration, 2 parts\r\n\t\t// – url(image.png): function value part\r\n\t\tvar value = property.value();\r\n\t\t_.each(property.valueParts(), function(r) {\r\n\t\t\t// add absolute range\r\n\t\t\tvar clone = r.clone();\r\n\t\t\tresult.push(clone.shift(valueRange.start));\r\n\t\t\t\r\n\t\t\t/** @type StringStream */\r\n\t\t\tvar stream = stringStream.create(r.substring(value));\r\n\t\t\tif (stream.match(/^[\\w\\-]+\\(/, true)) {\r\n\t\t\t\t// we have a function, find values in it.\r\n\t\t\t\t// but first add function contents\r\n\t\t\t\tstream.start = stream.pos;\r\n\t\t\t\tstream.skipToPair('(', ')');\r\n\t\t\t\tvar fnBody = stream.current();\r\n\t\t\t\tresult.push(range.create(clone.start + stream.start, fnBody));\r\n\t\t\t\t\r\n\t\t\t\t// find parts\r\n\t\t\t\t_.each(cssEditTree.findParts(fnBody), function(part) {\r\n\t\t\t\t\tresult.push(range.create(clone.start + stream.start + part.start, part.substring(fnBody)));\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// optimize result: remove empty ranges and duplicates\r\n\t\treturn _.chain(result)\r\n\t\t\t.filter(function(item) {\r\n\t\t\t\treturn !!item.length();\r\n\t\t\t})\r\n\t\t\t.uniq(false, function(item) {\r\n\t\t\t\treturn item.toString();\r\n\t\t\t})\r\n\t\t\t.value();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Tries to find matched CSS property and nearest range for selection\r\n\t * @param {CSSRule} rule\r\n\t * @param {Range} selRange\r\n\t * @param {Boolean} isBackward\r\n\t * @returns {Range}\r\n\t */\r\n\tfunction matchedRangeForCSSProperty(rule, selRange, isBackward) {\r\n\t\t/** @type CSSProperty */\r\n\t\tvar property = null;\r\n\t\tvar possibleRanges, curRange = null, ix;\r\n\t\tvar list = rule.list();\r\n\t\tvar searchFn, nearestItemFn;\r\n\t\t\r\n\t\tif (isBackward) {\r\n\t\t\tlist.reverse();\r\n\t\t\tsearchFn = function(p) {\r\n\t\t\t\treturn p.range(true).start <= selRange.start;\r\n\t\t\t};\r\n\t\t\tnearestItemFn = function(r) {\r\n\t\t\t\treturn r.start < selRange.start;\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tsearchFn = function(p) {\r\n\t\t\t\treturn p.range(true).end >= selRange.end;\r\n\t\t\t};\r\n\t\t\tnearestItemFn = function(r) {\r\n\t\t\t\treturn r.end > selRange.start;\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\t// search for nearest to selection CSS property\r\n\t\twhile (property = _.find(list, searchFn)) {\r\n\t\t\tpossibleRanges = makePossibleRangesCSS(property);\r\n\t\t\tif (isBackward)\r\n\t\t\t\tpossibleRanges.reverse();\r\n\t\t\t\r\n\t\t\t// check if any possible range is already selected\r\n\t\t\tcurRange = _.find(possibleRanges, function(r) {\r\n\t\t\t\treturn r.equal(selRange);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif (!curRange) {\r\n\t\t\t\t// no selection, select nearest item\r\n\t\t\t\tvar matchedRanges = _.filter(possibleRanges, function(r) {\r\n\t\t\t\t\treturn r.inside(selRange.end);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tif (matchedRanges.length > 1) {\r\n\t\t\t\t\tcurRange = matchedRanges[1];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (curRange = _.find(possibleRanges, nearestItemFn))\r\n\t\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\tix = _.indexOf(possibleRanges, curRange);\r\n\t\t\t\tif (ix != possibleRanges.length - 1) {\r\n\t\t\t\t\tcurRange = possibleRanges[ix + 1];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcurRange = null;\r\n\t\t\tselRange.start = selRange.end = isBackward \r\n\t\t\t\t? property.range(true).start - 1\r\n\t\t\t\t: property.range(true).end + 1;\r\n\t\t}\r\n\t\t\r\n\t\treturn curRange;\r\n\t}\r\n\t\r\n\tfunction findNextCSSItem(editor) {\r\n\t\treturn findItem(editor, false, require('cssEditTree').extractRule, getRangeForNextItemInCSS);\r\n\t}\r\n\t\r\n\tfunction findPrevCSSItem(editor) {\r\n\t\treturn findItem(editor, true, require('cssEditTree').extractRule, getRangeForPrevItemInCSS);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns range for item to be selected in CSS after current caret \r\n\t * (selection) position\r\n\t * @param {String} rule CSS rule declaration\r\n\t * @param {Number} offset Rule's position index inside content\r\n\t * @param {Range} selRange Selection range\r\n\t * @return {Range} Returns range if next item was found, <code>null</code> otherwise\r\n\t */\r\n\tfunction getRangeForNextItemInCSS(rule, offset, selRange) {\r\n\t\tvar tree = require('cssEditTree').parse(rule, {\r\n\t\t\toffset: offset\r\n\t\t});\r\n\t\t\r\n\t\t// check if selector is matched\r\n\t\tvar range = tree.nameRange(true);\r\n\t\tif (selRange.end < range.end) {\r\n\t\t\treturn range;\r\n\t\t}\r\n\t\t\r\n\t\treturn matchedRangeForCSSProperty(tree, selRange, false);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns range for item to be selected in CSS before current caret \r\n\t * (selection) position\r\n\t * @param {String} rule CSS rule declaration\r\n\t * @param {Number} offset Rule's position index inside content\r\n\t * @param {Range} selRange Selection range\r\n\t * @return {Range} Returns range if previous item was found, <code>null</code> otherwise\r\n\t */\r\n\tfunction getRangeForPrevItemInCSS(rule, offset, selRange) {\r\n\t\tvar tree = require('cssEditTree').parse(rule, {\r\n\t\t\toffset: offset\r\n\t\t});\r\n\t\t\r\n\t\tvar curRange = matchedRangeForCSSProperty(tree, selRange, true);\r\n\t\t\r\n\t\tif (!curRange) {\r\n\t\t\t// no matched property, try to match selector\r\n\t\t\tvar range = tree.nameRange(true);\r\n\t\t\tif (selRange.start > range.start) {\r\n\t\t\t\treturn range;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn curRange;\r\n\t}\r\n\t\r\n\t// XXX register actions\r\n\tvar actions = require('actions');\r\n\tactions.add('select_next_item', function(editor){\r\n\t\tif (editor.getSyntax() == 'css')\r\n\t\t\treturn findNextCSSItem(editor);\r\n\t\telse\r\n\t\t\treturn findNextHTMLItem(editor);\r\n\t});\r\n\t\r\n\tactions.add('select_previous_item', function(editor){\r\n\t\tif (editor.getSyntax() == 'css')\r\n\t\t\treturn findPrevCSSItem(editor);\r\n\t\telse\r\n\t\t\treturn findPrevHTMLItem(editor);\r\n\t});\r\n});/**\r\n * HTML pair matching (balancing) actions\r\n * @constructor\r\n * @memberOf __matchPairActionDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\t/** @type emmet.actions */\r\n\tvar actions = require('actions');\r\n\tvar matcher = require('htmlMatcher');\r\n\tvar lastMatch = null;\r\n\t\r\n\t/**\r\n\t * Find and select HTML tag pair\r\n\t * @param {IEmmetEditor} editor Editor instance\r\n\t * @param {String} direction Direction of pair matching: 'in' or 'out'. \r\n\t * Default is 'out'\r\n\t */\r\n\tfunction matchPair(editor, direction) {\r\n\t\tdirection = String((direction || 'out').toLowerCase());\r\n\t\tvar info = require('editorUtils').outputInfo(editor);\r\n\t\t\r\n\t\tvar range = require('range');\r\n\t\t/** @type Range */\r\n\t\tvar sel = range.create(editor.getSelectionRange());\r\n\t\tvar content = info.content;\r\n\t\t\r\n\t\t// validate previous match\r\n\t\tif (lastMatch && !lastMatch.range.equal(sel)) {\r\n\t\t\tlastMatch = null;\r\n\t\t}\r\n\t\t\r\n\t\tif (lastMatch && sel.length()) {\r\n\t\t\tif (direction == 'in') {\r\n\t\t\t\t// user has previously selected tag and wants to move inward\r\n\t\t\t\tif (lastMatch.type == 'tag' && !lastMatch.close) {\r\n\t\t\t\t\t// unary tag was selected, can't move inward\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (lastMatch.range.equal(lastMatch.outerRange)) {\r\n\t\t\t\t\t\tlastMatch.range = lastMatch.innerRange;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar narrowed = require('utils').narrowToNonSpace(content, lastMatch.innerRange);\r\n\t\t\t\t\t\tlastMatch = matcher.find(content, narrowed.start + 1);\r\n\t\t\t\t\t\tif (lastMatch && lastMatch.range.equal(sel) && lastMatch.outerRange.equal(sel)) {\r\n\t\t\t\t\t\t\tlastMatch.range = lastMatch.innerRange;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (\r\n\t\t\t\t\t\t!lastMatch.innerRange.equal(lastMatch.outerRange) \r\n\t\t\t\t\t\t&& lastMatch.range.equal(lastMatch.innerRange) \r\n\t\t\t\t\t\t&& sel.equal(lastMatch.range)) {\r\n\t\t\t\t\tlastMatch.range = lastMatch.outerRange;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlastMatch = matcher.find(content, sel.start);\r\n\t\t\t\t\tif (lastMatch && lastMatch.range.equal(sel) && lastMatch.innerRange.equal(sel)) {\r\n\t\t\t\t\t\tlastMatch.range = lastMatch.outerRange;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlastMatch = matcher.find(content, sel.start);\r\n\t\t}\r\n\t\t\r\n\t\tif (lastMatch && !lastMatch.range.equal(sel)) {\r\n\t\t\teditor.createSelection(lastMatch.range.start, lastMatch.range.end);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tlastMatch = null;\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tactions.add('match_pair', matchPair, {hidden: true});\r\n\tactions.add('match_pair_inward', function(editor){\r\n\t\treturn matchPair(editor, 'in');\r\n\t}, {label: 'HTML/Match Pair Tag (inward)'});\r\n\r\n\tactions.add('match_pair_outward', function(editor){\r\n\t\treturn matchPair(editor, 'out');\r\n\t}, {label: 'HTML/Match Pair Tag (outward)'});\r\n\t\r\n\t/**\r\n\t * Moves caret to matching opening or closing tag\r\n\t * @param {IEmmetEditor} editor\r\n\t */\r\n\tactions.add('matching_pair', function(editor) {\r\n\t\tvar content = String(editor.getContent());\r\n\t\tvar caretPos = editor.getCaretPos();\r\n\t\t\r\n\t\tif (content.charAt(caretPos) == '<') \r\n\t\t\t// looks like caret is outside of tag pair  \r\n\t\t\tcaretPos++;\r\n\t\t\t\r\n\t\tvar tag = matcher.tag(content, caretPos);\r\n\t\tif (tag && tag.close) { // exclude unary tags\r\n\t\t\tif (tag.open.range.inside(caretPos)) {\r\n\t\t\t\teditor.setCaretPos(tag.close.range.start);\r\n\t\t\t} else {\r\n\t\t\t\teditor.setCaretPos(tag.open.range.start);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}, {label: 'HTML/Go To Matching Tag Pair'});\r\n});/**\r\n * Gracefully removes tag under cursor\r\n * \r\n * @param {Function} require\r\n * @param {Underscore} _ \r\n */\r\nemmet.exec(function(require, _) {\r\n\trequire('actions').add('remove_tag', function(editor) {\r\n\t\tvar utils = require('utils');\r\n\t\tvar info = require('editorUtils').outputInfo(editor);\r\n\t\t\r\n\t\t// search for tag\r\n\t\tvar tag = require('htmlMatcher').tag(info.content, editor.getCaretPos());\r\n\t\tif (tag) {\r\n\t\t\tif (!tag.close) {\r\n\t\t\t\t// simply remove unary tag\r\n\t\t\t\teditor.replaceContent(utils.getCaretPlaceholder(), tag.range.start, tag.range.end);\r\n\t\t\t} else {\r\n\t\t\t\t// remove tag and its newlines\r\n\t\t\t\t/** @type Range */\r\n\t\t\t\tvar tagContentRange = utils.narrowToNonSpace(info.content, tag.innerRange);\r\n\t\t\t\t/** @type Range */\r\n\t\t\t\tvar startLineBounds = utils.findNewlineBounds(info.content, tagContentRange.start);\r\n\t\t\t\tvar startLinePad = utils.getLinePadding(startLineBounds.substring(info.content));\r\n\t\t\t\tvar tagContent = tagContentRange.substring(info.content);\r\n\t\t\t\t\r\n\t\t\t\ttagContent = utils.unindentString(tagContent, startLinePad);\r\n\t\t\t\teditor.replaceContent(utils.getCaretPlaceholder() + utils.escapeText(tagContent), tag.outerRange.start, tag.outerRange.end);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}, {label: 'HTML/Remove Tag'});\r\n});\r\n/**\r\n * Splits or joins tag, e.g. transforms it into a short notation and vice versa:<br>\r\n * &lt;div&gt;&lt;/div&gt; → &lt;div /&gt; : join<br>\r\n * &lt;div /&gt; → &lt;div&gt;&lt;/div&gt; : split\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n * @memberOf __splitJoinTagAction\r\n * @constructor\r\n */\r\nemmet.exec(function(require, _) {\r\n\t/**\r\n\t * @param {IEmmetEditor} editor\r\n\t * @param {Object} profile\r\n\t * @param {Object} tag\r\n\t */\r\n\tfunction joinTag(editor, profile, tag) {\r\n\t\t/** @type emmet.utils */\r\n\t\tvar utils = require('utils');\r\n\t\t\r\n\t\t// empty closing slash is a nonsense for this action\r\n\t\tvar slash = profile.selfClosing() || ' /';\r\n\t\tvar content = tag.open.range.substring(tag.source).replace(/\\s*>$/, slash + '>');\r\n\t\t\r\n\t\tvar caretPos = editor.getCaretPos();\r\n\t\t\r\n\t\t// update caret position\r\n\t\tif (content.length + tag.outerRange.start < caretPos) {\r\n\t\t\tcaretPos = content.length + tag.outerRange.start;\r\n\t\t}\r\n\t\t\r\n\t\tcontent = utils.escapeText(content);\r\n\t\teditor.replaceContent(content, tag.outerRange.start, tag.outerRange.end);\r\n\t\teditor.setCaretPos(caretPos);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction splitTag(editor, profile, tag) {\r\n\t\t/** @type emmet.utils */\r\n\t\tvar utils = require('utils');\r\n\t\t\r\n\t\tvar nl = utils.getNewline();\r\n\t\tvar pad = require('resources').getVariable('indentation');\r\n\t\tvar caretPos = editor.getCaretPos();\r\n\t\t\r\n\t\t// define tag content depending on profile\r\n\t\tvar tagContent = (profile.tag_nl === true) ? nl + pad + nl : '';\r\n\t\tvar content = tag.outerContent().replace(/\\s*\\/>$/, '>');\r\n\t\tcaretPos = tag.outerRange.start + content.length;\r\n\t\tcontent += tagContent + '</' + tag.open.name + '>';\r\n\t\t\r\n\t\tcontent = utils.escapeText(content);\r\n\t\teditor.replaceContent(content, tag.outerRange.start, tag.outerRange.end);\r\n\t\teditor.setCaretPos(caretPos);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\trequire('actions').add('split_join_tag', function(editor, profileName) {\r\n\t\tvar matcher = require('htmlMatcher');\r\n\t\t\r\n\t\tvar info = require('editorUtils').outputInfo(editor, null, profileName);\r\n\t\tvar profile = require('profile').get(info.profile);\r\n\t\t\r\n\t\t// find tag at current position\r\n\t\tvar tag = matcher.tag(info.content, editor.getCaretPos());\r\n\t\tif (tag) {\r\n\t\t\treturn tag.close \r\n\t\t\t\t? joinTag(editor, profile, tag) \r\n\t\t\t\t: splitTag(editor, profile, tag);\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}, {label: 'HTML/Split\\\\Join Tag Declaration'});\r\n});/**\r\n * Reflect CSS value: takes rule's value under caret and pastes it for the same \r\n * rules with vendor prefixes\r\n * @constructor\r\n * @memberOf __reflectCSSActionDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('reflectCSSValue', function(require, _) {\r\n\t/**\r\n\t * @type HandlerList List of registered handlers\r\n\t */\r\n\tvar handlers = require('handlerList').create();\r\n\t\r\n\trequire('actions').add('reflect_css_value', function(editor) {\r\n\t\tif (editor.getSyntax() != 'css') return false;\r\n\t\t\r\n\t\treturn require('actionUtils').compoundUpdate(editor, doCSSReflection(editor));\r\n\t}, {label: 'CSS/Reflect Value'});\r\n\t\r\n\tfunction doCSSReflection(editor) {\r\n\t\t/** @type emmet.cssEditTree */\r\n\t\tvar cssEditTree = require('cssEditTree');\r\n\t\tvar outputInfo = require('editorUtils').outputInfo(editor);\r\n\t\tvar caretPos = editor.getCaretPos();\r\n\t\t\r\n\t\tvar cssRule = cssEditTree.parseFromPosition(outputInfo.content, caretPos);\r\n\t\tif (!cssRule) return;\r\n\t\t\r\n\t\tvar property = cssRule.itemFromPosition(caretPos, true);\r\n\t\t// no property under cursor, nothing to reflect\r\n\t\tif (!property) return;\r\n\t\t\r\n\t\tvar oldRule = cssRule.source;\r\n\t\tvar offset = cssRule.options.offset;\r\n\t\tvar caretDelta = caretPos - offset - property.range().start;\r\n\t\t\r\n\t\thandlers.exec(false, [property]);\r\n\t\t\r\n\t\tif (oldRule !== cssRule.source) {\r\n\t\t\treturn {\r\n\t\t\t\tdata:  cssRule.source,\r\n\t\t\t\tstart: offset,\r\n\t\t\t\tend:   offset + oldRule.length,\r\n\t\t\t\tcaret: offset + property.range().start + caretDelta\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns regexp that should match reflected CSS property names\r\n\t * @param {String} name Current CSS property name\r\n\t * @return {RegExp}\r\n\t */\r\n\tfunction getReflectedCSSName(name) {\r\n\t\tname = require('cssEditTree').baseName(name);\r\n\t\tvar vendorPrefix = '^(?:\\\\-\\\\w+\\\\-)?', m;\r\n\t\t\r\n\t\tif (name == 'opacity' || name == 'filter') {\r\n\t\t\treturn new RegExp(vendorPrefix + '(?:opacity|filter)$');\r\n\t\t} else if (m = name.match(/^border-radius-(top|bottom)(left|right)/)) {\r\n\t\t\t// Mozilla-style border radius\r\n\t\t\treturn new RegExp(vendorPrefix + '(?:' + name + '|border-' + m[1] + '-' + m[2] + '-radius)$');\r\n\t\t} else if (m = name.match(/^border-(top|bottom)-(left|right)-radius/)) { \r\n\t\t\treturn new RegExp(vendorPrefix + '(?:' + name + '|border-radius-' + m[1] + m[2] + ')$');\r\n\t\t}\r\n\t\t\r\n\t\treturn new RegExp(vendorPrefix + name + '$');\r\n\t}\r\n\t\r\n\t/**\r\n\t * Reflects value from <code>donor</code> into <code>receiver</code>\r\n\t * @param {CSSProperty} donor Donor CSS property from which value should\r\n\t * be reflected\r\n\t * @param {CSSProperty} receiver Property that should receive reflected \r\n\t * value from donor\r\n\t */\r\n\tfunction reflectValue(donor, receiver) {\r\n\t\tvar value = getReflectedValue(donor.name(), donor.value(), \r\n\t\t\t\treceiver.name(), receiver.value());\r\n\t\t\r\n\t\treceiver.value(value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns value that should be reflected for <code>refName</code> CSS property\r\n\t * from <code>curName</code> property. This function is used for special cases,\r\n\t * when the same result must be achieved with different properties for different\r\n\t * browsers. For example: opаcity:0.5; → filter:alpha(opacity=50);<br><br>\r\n\t * \r\n\t * This function does value conversion between different CSS properties\r\n\t * \r\n\t * @param {String} curName Current CSS property name\r\n\t * @param {String} curValue Current CSS property value\r\n\t * @param {String} refName Receiver CSS property's name \r\n\t * @param {String} refValue Receiver CSS property's value\r\n\t * @return {String} New value for receiver property\r\n\t */\r\n\tfunction getReflectedValue(curName, curValue, refName, refValue) {\r\n\t\tvar cssEditTree = require('cssEditTree');\r\n\t\tvar utils = require('utils');\r\n\t\tcurName = cssEditTree.baseName(curName);\r\n\t\trefName = cssEditTree.baseName(refName);\r\n\t\t\r\n\t\tif (curName == 'opacity' && refName == 'filter') {\r\n\t\t\treturn refValue.replace(/opacity=[^)]*/i, 'opacity=' + Math.floor(parseFloat(curValue) * 100));\r\n\t\t} else if (curName == 'filter' && refName == 'opacity') {\r\n\t\t\tvar m = curValue.match(/opacity=([^)]*)/i);\r\n\t\t\treturn m ? utils.prettifyNumber(parseInt(m[1]) / 100) : refValue;\r\n\t\t}\r\n\t\t\r\n\t\treturn curValue;\r\n\t}\r\n\t\r\n\t// XXX add default handler\r\n\thandlers.add(function(property) {\r\n\t\tvar reName = getReflectedCSSName(property.name());\r\n\t\t_.each(property.parent.list(), function(p) {\r\n\t\t\tif (reName.test(p.name())) {\r\n\t\t\t\treflectValue(property, p);\r\n\t\t\t}\r\n\t\t});\r\n\t}, {order: -1});\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Adds custom reflect handler. The passed function will receive matched\r\n\t\t * CSS property (as <code>CSSEditElement</code> object) and should\r\n\t\t * return <code>true</code> if it was performed successfully (handled \r\n\t\t * reflection), <code>false</code> otherwise.\r\n\t\t * @param {Function} fn\r\n\t\t * @param {Object} options\r\n\t\t */\r\n\t\taddHandler: function(fn, options) {\r\n\t\t\thandlers.add(fn, options);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes registered handler\r\n\t\t * @returns\r\n\t\t */\r\n\t\tremoveHandler: function(fn) {\r\n\t\t\thandlers.remove(fn, options);\r\n\t\t}\r\n\t};\r\n});/**\r\n * Evaluates simple math expression under caret\r\n * @param {Function} require\r\n * @param {Underscore} _ \r\n */\r\nemmet.exec(function(require, _) {\r\n\trequire('actions').add('evaluate_math_expression', function(editor) {\r\n\t\tvar actionUtils = require('actionUtils');\r\n\t\tvar utils = require('utils');\r\n\t\t\r\n\t\tvar content = String(editor.getContent());\r\n\t\tvar chars = '.+-*/\\\\';\r\n\t\t\r\n\t\t/** @type Range */\r\n\t\tvar sel = require('range').create(editor.getSelectionRange());\r\n\t\tif (!sel.length()) {\r\n\t\t\tsel = actionUtils.findExpressionBounds(editor, function(ch) {\r\n\t\t\t\treturn utils.isNumeric(ch) || chars.indexOf(ch) != -1;\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif (sel && sel.length()) {\r\n\t\t\tvar expr = sel.substring(content);\r\n\t\t\t\r\n\t\t\t// replace integral division: 11\\2 => Math.round(11/2) \r\n\t\t\texpr = expr.replace(/([\\d\\.\\-]+)\\\\([\\d\\.\\-]+)/g, 'Math.round($1/$2)');\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tvar result = utils.prettifyNumber(new Function('return ' + expr)());\r\n\t\t\t\teditor.replaceContent(result, sel.start, sel.end);\r\n\t\t\t\teditor.setCaretPos(sel.start + result.length);\r\n\t\t\t\treturn true;\r\n\t\t\t} catch (e) {}\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}, {label: 'Numbers/Evaluate Math Expression'});\r\n});\r\n/**\r\n * Increment/decrement number under cursor\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\t/**\r\n\t * Extract number from current caret position of the <code>editor</code> and\r\n\t * increment it by <code>step</code>\r\n\t * @param {IEmmetEditor} editor\r\n\t * @param {Number} step Increment step (may be negative)\r\n\t */\r\n\tfunction incrementNumber(editor, step) {\r\n\t\tvar utils = require('utils');\r\n\t\tvar actionUtils = require('actionUtils');\r\n\t\t\r\n\t\tvar hasSign = false;\r\n\t\tvar hasDecimal = false;\r\n\t\t\t\r\n\t\tvar r = actionUtils.findExpressionBounds(editor, function(ch, pos, content) {\r\n\t\t\tif (utils.isNumeric(ch))\r\n\t\t\t\treturn true;\r\n\t\t\tif (ch == '.') {\r\n\t\t\t\t// make sure that next character is numeric too\r\n\t\t\t\tif (!utils.isNumeric(content.charAt(pos + 1)))\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t\r\n\t\t\t\treturn hasDecimal ? false : hasDecimal = true;\r\n\t\t\t}\r\n\t\t\tif (ch == '-')\r\n\t\t\t\treturn hasSign ? false : hasSign = true;\r\n\t\t\t\t\r\n\t\t\treturn false;\r\n\t\t});\r\n\t\t\t\r\n\t\tif (r && r.length()) {\r\n\t\t\tvar strNum = r.substring(String(editor.getContent()));\r\n\t\t\tvar num = parseFloat(strNum);\r\n\t\t\tif (!_.isNaN(num)) {\r\n\t\t\t\tnum = utils.prettifyNumber(num + step);\r\n\t\t\t\t\r\n\t\t\t\t// do we have zero-padded number?\r\n\t\t\t\tif (/^(\\-?)0+[1-9]/.test(strNum)) {\r\n\t\t\t\t\tvar minus = '';\r\n\t\t\t\t\tif (RegExp.$1) {\r\n\t\t\t\t\t\tminus = '-';\r\n\t\t\t\t\t\tnum = num.substring(1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tvar parts = num.split('.');\r\n\t\t\t\t\tparts[0] = utils.zeroPadString(parts[0], intLength(strNum));\r\n\t\t\t\t\tnum = minus + parts.join('.');\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\teditor.replaceContent(num, r.start, r.end);\r\n\t\t\t\teditor.createSelection(r.start, r.start + num.length);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns length of integer part of number\r\n\t * @param {String} num\r\n\t */\r\n\tfunction intLength(num) {\r\n\t\tnum = num.replace(/^\\-/, '');\r\n\t\tif (~num.indexOf('.')) {\r\n\t\t\treturn num.split('.')[0].length;\r\n\t\t}\r\n\t\t\r\n\t\treturn num.length;\r\n\t}\r\n\t\r\n\tvar actions = require('actions');\r\n\t_.each([1, -1, 10, -10, 0.1, -0.1], function(num) {\r\n\t\tvar prefix = num > 0 ? 'increment' : 'decrement';\r\n\t\t\r\n\t\tactions.add(prefix + '_number_by_' + String(Math.abs(num)).replace('.', '').substring(0, 2), function(editor) {\r\n\t\t\treturn incrementNumber(editor, num);\r\n\t\t}, {label: 'Numbers/' + prefix.charAt(0).toUpperCase() + prefix.substring(1) + ' number by ' + Math.abs(num)});\r\n\t});\r\n});/**\r\n * Actions to insert line breaks. Some simple editors (like browser's \r\n * &lt;textarea&gt;, for example) do not provide such simple things\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\tvar actions = require('actions');\r\n\t/** @type emmet.preferences */\r\n\tvar prefs = require('preferences');\r\n\t\r\n\t// setup default preferences\r\n\tprefs.define('css.closeBraceIndentation', '\\n',\r\n\t\t\t'Indentation before closing brace of CSS rule. Some users prefere ' \r\n\t\t\t+ 'indented closing brace of CSS rule for better readability. '\r\n\t\t\t+ 'This preference’s value will be automatically inserted before '\r\n\t\t\t+ 'closing brace when user adds newline in newly created CSS rule '\r\n\t\t\t+ '(e.g. when “Insert formatted linebreak” action will be performed ' \r\n\t\t\t+ 'in CSS file). If you’re such user, you may want to write put a value ' \r\n\t\t\t+ 'like <code>\\\\n\\\\t</code> in this preference.');\r\n\t\r\n\t/**\r\n\t * Inserts newline character with proper indentation in specific positions only.\r\n\t * @param {IEmmetEditor} editor\r\n\t * @return {Boolean} Returns <code>true</code> if line break was inserted \r\n\t */\r\n\tactions.add('insert_formatted_line_break_only', function(editor) {\r\n\t\tvar utils = require('utils');\r\n\t\t/** @type emmet.resources */\r\n\t\tvar res = require('resources');\r\n\t\t\r\n\t\tvar info = require('editorUtils').outputInfo(editor);\r\n\t\tvar caretPos = editor.getCaretPos();\r\n\t\tvar nl = utils.getNewline();\r\n\t\t\r\n\t\tif (_.include(['html', 'xml', 'xsl'], info.syntax)) {\r\n\t\t\tvar pad = res.getVariable('indentation');\r\n\t\t\t// let's see if we're breaking newly created tag\r\n\t\t\tvar tag = require('htmlMatcher').tag(info.content, caretPos);\r\n\t\t\tif (tag && !tag.innerRange.length()) {\r\n\t\t\t\teditor.replaceContent(nl + pad + utils.getCaretPlaceholder() + nl, caretPos);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} else if (info.syntax == 'css') {\r\n\t\t\t/** @type String */\r\n\t\t\tvar content = info.content;\r\n\t\t\tif (caretPos && content.charAt(caretPos - 1) == '{') {\r\n\t\t\t\tvar append = prefs.get('css.closeBraceIndentation');\r\n\t\t\t\tvar pad = res.getVariable('indentation');\r\n\t\t\t\t\r\n\t\t\t\tvar hasCloseBrace = content.charAt(caretPos) == '}';\r\n\t\t\t\tif (!hasCloseBrace) {\r\n\t\t\t\t\t// do we really need special formatting here?\r\n\t\t\t\t\t// check if this is really a newly created rule,\r\n\t\t\t\t\t// look ahead for a closing brace\r\n\t\t\t\t\tfor (var i = caretPos, il = content.length, ch; i < il; i++) {\r\n\t\t\t\t\t\tch = content.charAt(i);\r\n\t\t\t\t\t\tif (ch == '{') {\r\n\t\t\t\t\t\t\t// ok, this is a new rule without closing brace\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (ch == '}') {\r\n\t\t\t\t\t\t\t// not a new rule, just add indentation\r\n\t\t\t\t\t\t\tappend = '';\r\n\t\t\t\t\t\t\thasCloseBrace = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!hasCloseBrace) {\r\n\t\t\t\t\tappend += '}';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// defining rule set\r\n\t\t\t\tvar insValue = nl + pad + utils.getCaretPlaceholder() + append;\r\n\t\t\t\teditor.replaceContent(insValue, caretPos);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\treturn false;\r\n\t}, {hidden: true});\r\n\t\r\n\t/**\r\n\t * Inserts newline character with proper indentation. This action is used in\r\n\t * editors that doesn't have indentation control (like textarea element) to \r\n\t * provide proper indentation\r\n\t * @param {IEmmetEditor} editor Editor instance\r\n\t */\r\n\tactions.add('insert_formatted_line_break', function(editor) {\r\n\t\tif (!actions.run('insert_formatted_line_break_only', editor)) {\r\n\t\t\tvar utils = require('utils');\r\n\t\t\t\r\n\t\t\tvar curPadding = require('editorUtils').getCurrentLinePadding(editor);\r\n\t\t\tvar content = String(editor.getContent());\r\n\t\t\tvar caretPos = editor.getCaretPos();\r\n\t\t\tvar len = content.length;\r\n\t\t\tvar nl = utils.getNewline();\r\n\t\t\t\t\r\n\t\t\t// check out next line padding\r\n\t\t\tvar lineRange = editor.getCurrentLineRange();\r\n\t\t\tvar nextPadding = '';\r\n\t\t\t\t\r\n\t\t\tfor (var i = lineRange.end + 1, ch; i < len; i++) {\r\n\t\t\t\tch = content.charAt(i);\r\n\t\t\t\tif (ch == ' ' || ch == '\\t')\r\n\t\t\t\t\tnextPadding += ch;\r\n\t\t\t\telse\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (nextPadding.length > curPadding.length)\r\n\t\t\t\teditor.replaceContent(nl + nextPadding, caretPos, caretPos, true);\r\n\t\t\telse\r\n\t\t\t\teditor.replaceContent(nl, caretPos);\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t}, {hidden: true});\r\n});/**\r\n * Merges selected lines or lines between XHTML tag pairs\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\trequire('actions').add('merge_lines', function(editor) {\r\n\t\tvar matcher = require('htmlMatcher');\r\n\t\tvar utils = require('utils');\r\n\t\tvar editorUtils = require('editorUtils');\r\n\t\tvar info = editorUtils.outputInfo(editor);\r\n\t\t\r\n\t\t/** @type Range */\r\n\t\tvar selection = require('range').create(editor.getSelectionRange());\r\n\t\tif (!selection.length()) {\r\n\t\t\t// find matching tag\r\n\t\t\tvar pair = matcher.find(info.content, editor.getCaretPos());\r\n\t\t\tif (pair) {\r\n\t\t\t\tselection = pair.outerRange;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (selection.length()) {\r\n\t\t\t// got range, merge lines\r\n\t\t\tvar text =  selection.substring(info.content);\r\n\t\t\tvar lines = utils.splitByLines(text);\r\n\t\t\t\r\n\t\t\tfor (var i = 1; i < lines.length; i++) {\r\n\t\t\t\tlines[i] = lines[i].replace(/^\\s+/, '');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttext = lines.join('').replace(/\\s{2,}/, ' ');\r\n\t\t\tvar textLen = text.length;\r\n\t\t\ttext = utils.escapeText(text);\r\n\t\t\teditor.replaceContent(text, selection.start, selection.end);\r\n\t\t\teditor.createSelection(selection.start, selection.start + textLen);\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t});\r\n});/**\r\n * Encodes/decodes image under cursor to/from base64\r\n * @param {IEmmetEditor} editor\r\n * @since 0.65\r\n * \r\n * @memberOf __base64ActionDefine\r\n * @constructor\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\trequire('actions').add('encode_decode_data_url', function(editor) {\r\n\t\tvar data = String(editor.getSelection());\r\n\t\tvar caretPos = editor.getCaretPos();\r\n\t\t\t\r\n\t\tif (!data) {\r\n\t\t\t// no selection, try to find image bounds from current caret position\r\n\t\t\tvar text = String(editor.getContent()),  m;\r\n\t\t\twhile (caretPos-- >= 0) {\r\n\t\t\t\tif (startsWith('src=', text, caretPos)) { // found <img src=\"\">\r\n\t\t\t\t\tif (m = text.substr(caretPos).match(/^(src=([\"'])?)([^'\"<>\\s]+)\\1?/)) {\r\n\t\t\t\t\t\tdata = m[3];\r\n\t\t\t\t\t\tcaretPos += m[1].length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (startsWith('url(', text, caretPos)) { // found CSS url() pattern\r\n\t\t\t\t\tif (m = text.substr(caretPos).match(/^(url\\((['\"])?)([^'\"\\)\\s]+)\\1?/)) {\r\n\t\t\t\t\t\tdata = m[3];\r\n\t\t\t\t\t\tcaretPos += m[1].length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (data) {\r\n\t\t\tif (startsWith('data:', data))\r\n\t\t\t\treturn decodeFromBase64(editor, data, caretPos);\r\n\t\t\telse\r\n\t\t\t\treturn encodeToBase64(editor, data, caretPos);\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}, {label: 'Encode\\\\Decode data:URL image'});\r\n\t\r\n\t/**\r\n\t * Test if <code>text</code> starts with <code>token</code> at <code>pos</code>\r\n\t * position. If <code>pos</code> is omitted, search from beginning of text \r\n\t * @param {String} token Token to test\r\n\t * @param {String} text Where to search\r\n\t * @param {Number} pos Position where to start search\r\n\t * @return {Boolean}\r\n\t * @since 0.65\r\n\t */\r\n\tfunction startsWith(token, text, pos) {\r\n\t\tpos = pos || 0;\r\n\t\treturn text.charAt(pos) == token.charAt(0) && text.substr(pos, token.length) == token;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Encodes image to base64\r\n\t * \r\n\t * @param {IEmmetEditor} editor\r\n\t * @param {String} imgPath Path to image\r\n\t * @param {Number} pos Caret position where image is located in the editor\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction encodeToBase64(editor, imgPath, pos) {\r\n\t\tvar file = require('file');\r\n\t\tvar actionUtils = require('actionUtils');\r\n\t\t\r\n\t\tvar editorFile = editor.getFilePath();\r\n\t\tvar defaultMimeType = 'application/octet-stream';\r\n\t\t\t\r\n\t\tif (editorFile === null) {\r\n\t\t\tthrow \"You should save your file before using this action\";\r\n\t\t}\r\n\t\t\r\n\t\t// locate real image path\r\n\t\tvar realImgPath = file.locateFile(editorFile, imgPath);\r\n\t\tif (realImgPath === null) {\r\n\t\t\tthrow \"Can't find \" + imgPath + ' file';\r\n\t\t}\r\n\t\t\r\n\t\tfile.read(realImgPath, function(err, content) {\r\n\t\t\tif (err) {\r\n\t\t\t\tthrow 'Unable to read ' + realImgPath + ': ' + err;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar b64 = require('base64').encode(String(content));\r\n\t\t\tif (!b64) {\r\n\t\t\t\tthrow \"Can't encode file content to base64\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tb64 = 'data:' + (actionUtils.mimeTypes[String(file.getExt(realImgPath))] || defaultMimeType) +\r\n\t\t\t\t';base64,' + b64;\r\n\t\t\t\t\r\n\t\t\teditor.replaceContent('$0' + b64, pos, pos + imgPath.length);\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Decodes base64 string back to file.\r\n\t * @param {IEmmetEditor} editor\r\n\t * @param {String} data Base64-encoded file content\r\n\t * @param {Number} pos Caret position where image is located in the editor\r\n\t */\r\n\tfunction decodeFromBase64(editor, data, pos) {\r\n\t\t// ask user to enter path to file\r\n\t\tvar filePath = String(editor.prompt('Enter path to file (absolute or relative)'));\r\n\t\tif (!filePath)\r\n\t\t\treturn false;\r\n\t\t\t\r\n\t\tvar file = require('file');\r\n\t\tvar absPath = file.createPath(editor.getFilePath(), filePath);\r\n\t\tif (!absPath) {\r\n\t\t\tthrow \"Can't save file\";\r\n\t\t}\r\n\t\t\r\n\t\tfile.save(absPath, require('base64').decode( data.replace(/^data\\:.+?;.+?,/, '') ));\r\n\t\teditor.replaceContent('$0' + filePath, pos, pos + data.length);\r\n\t\treturn true;\r\n\t}\r\n});\r\n/**\r\n * Automatically updates image size attributes in HTML's &lt;img&gt; element or\r\n * CSS rule\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n * @constructor\r\n * @memberOf __updateImageSizeAction\r\n */\r\nemmet.exec(function(require, _) {\r\n\t/**\r\n\t * Updates image size of &lt;img src=\"\"&gt; tag\r\n\t * @param {IEmmetEditor} editor\r\n\t */\r\n\tfunction updateImageSizeHTML(editor) {\r\n\t\tvar offset = editor.getCaretPos();\r\n\t\t\r\n\t\t// find tag from current caret position\r\n\t\tvar info = require('editorUtils').outputInfo(editor);\r\n\t\tvar xmlElem = require('xmlEditTree').parseFromPosition(info.content, offset, true);\r\n\t\tif (xmlElem && (xmlElem.name() || '').toLowerCase() == 'img') {\r\n\t\t\tgetImageSizeForSource(editor, xmlElem.value('src'), function(size) {\r\n\t\t\t\tif (size) {\r\n\t\t\t\t\tvar compoundData = xmlElem.range(true);\r\n\t\t\t\t\txmlElem.value('width', size.width);\r\n\t\t\t\t\txmlElem.value('height', size.height, xmlElem.indexOf('width') + 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\trequire('actionUtils').compoundUpdate(editor, _.extend(compoundData, {\r\n\t\t\t\t\t\tdata: xmlElem.toString(),\r\n\t\t\t\t\t\tcaret: offset\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Updates image size of CSS property\r\n\t * @param {IEmmetEditor} editor\r\n\t */\r\n\tfunction updateImageSizeCSS(editor) {\r\n\t\tvar offset = editor.getCaretPos();\r\n\t\t\r\n\t\t// find tag from current caret position\r\n\t\tvar info = require('editorUtils').outputInfo(editor);\r\n\t\tvar cssRule = require('cssEditTree').parseFromPosition(info.content, offset, true);\r\n\t\tif (cssRule) {\r\n\t\t\t// check if there is property with image under caret\r\n\t\t\tvar prop = cssRule.itemFromPosition(offset, true), m;\r\n\t\t\tif (prop && (m = /url\\(([\"']?)(.+?)\\1\\)/i.exec(prop.value() || ''))) {\r\n\t\t\t\tgetImageSizeForSource(editor, m[2], function(size) {\r\n\t\t\t\t\tif (size) {\r\n\t\t\t\t\t\tvar compoundData = cssRule.range(true);\r\n\t\t\t\t\t\tcssRule.value('width', size.width + 'px');\r\n\t\t\t\t\t\tcssRule.value('height', size.height + 'px', cssRule.indexOf('width') + 1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\trequire('actionUtils').compoundUpdate(editor, _.extend(compoundData, {\r\n\t\t\t\t\t\t\tdata: cssRule.toString(),\r\n\t\t\t\t\t\t\tcaret: offset\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns image dimensions for source\r\n\t * @param {IEmmetEditor} editor\r\n\t * @param {String} src Image source (path or data:url)\r\n\t */\r\n\tfunction getImageSizeForSource(editor, src, callback) {\r\n\t\tvar fileContent;\r\n\t\tvar au = require('actionUtils');\r\n\t\tif (src) {\r\n\t\t\t// check if it is data:url\r\n\t\t\tif (/^data:/.test(src)) {\r\n\t\t\t\tfileContent = require('base64').decode( src.replace(/^data\\:.+?;.+?,/, '') );\r\n\t\t\t\treturn callback(au.getImageSize(fileContent));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar file = require('file');\r\n\t\t\tvar absPath = file.locateFile(editor.getFilePath(), src);\r\n\t\t\tif (absPath === null) {\r\n\t\t\t\tthrow \"Can't find \" + src + ' file';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfile.read(absPath, function(err, content) {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tthrow 'Unable to read ' + absPath + ': ' + err;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcontent = String(content);\r\n\t\t\t\tcallback(au.getImageSize(content));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\trequire('actions').add('update_image_size', function(editor) {\r\n\t\t// this action will definitely won’t work in SASS dialect,\r\n\t\t// but may work in SCSS or LESS\r\n\t\tif (_.include(['css', 'less', 'scss'], String(editor.getSyntax()))) {\r\n\t\t\tupdateImageSizeCSS(editor);\r\n\t\t} else {\r\n\t\t\tupdateImageSizeHTML(editor);\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t});\r\n});/**\r\n * Resolver for fast CSS typing. Handles abbreviations with the following \r\n * notation:<br>\r\n * \r\n * <code>(-vendor prefix)?property(value)*(!)?</code>\r\n * \r\n * <br><br>\r\n * <b>Abbreviation handling</b><br>\r\n * \r\n * By default, Emmet searches for matching snippet definition for provided abbreviation.\r\n * If snippet wasn't found, Emmet automatically generates element with \r\n * abbreviation's name. For example, <code>foo</code> abbreviation will generate\r\n * <code>&lt;foo&gt;&lt;/foo&gt;</code> output.\r\n * <br><br>\r\n * This module will capture all expanded properties and upgrade them with values, \r\n * vendor prefixes and !important declarations. All unmatched abbreviations will \r\n * be automatically transformed into <code>property-name: ${1}</code> snippets. \r\n * \r\n * <b>Vendor prefixes<b><br>\r\n * \r\n * If CSS-property is preceded with dash, resolver should output property with\r\n * all <i>known</i> vendor prefixes. For example, if <code>brad</code> \r\n * abbreviation generates <code>border-radius: ${value};</code> snippet,\r\n * the <code>-brad</code> abbreviation should generate:\r\n * <pre><code>\r\n * -webkit-border-radius: ${value};\r\n * -moz-border-radius: ${value};\r\n * border-radius: ${value};\r\n * </code></pre>\r\n * Note that <i>o</i> and <i>ms</i> prefixes are omitted since Opera and IE \r\n * supports unprefixed property.<br><br>\r\n * \r\n * Users can also provide an explicit list of one-character prefixes for any\r\n * CSS property. For example, <code>-wm-float</code> will produce\r\n * \r\n * <pre><code>\r\n * -webkit-float: ${1};\r\n * -moz-float: ${1};\r\n * float: ${1};\r\n * </code></pre>\r\n * \r\n * Although this example looks pointless, users can use this feature to write\r\n * cutting-edge properties implemented by browser vendors recently.  \r\n * \r\n * @constructor\r\n * @memberOf __cssResolverDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('cssResolver', function(require, _) {\r\n\t/** Back-reference to module */\r\n\tvar module = null;\r\n\t\r\n\tvar prefixObj = {\r\n\t\t/** Real vendor prefix name */\r\n\t\tprefix: 'emmet',\r\n\t\t\r\n\t\t/** \r\n\t\t * Indicates this prefix is obsolete and should't be used when user \r\n\t\t * wants to generate all-prefixed properties\r\n\t\t */\r\n\t\tobsolete: false,\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns prefixed CSS property name\r\n\t\t * @param {String} name Unprefixed CSS property\r\n\t\t */\r\n\t\ttransformName: function(name) {\r\n\t\t\treturn '-' + this.prefix + '-' + name;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * List of unprefixed CSS properties that supported by \r\n\t\t * current prefix. This list is used to generate all-prefixed property\r\n\t\t * @returns {Array} \r\n\t\t */\r\n\t\tproperties: function() {\r\n\t\t\treturn getProperties('css.' + this.prefix + 'Properties') || [];\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if given property is supported by current prefix\r\n\t\t * @param name\r\n\t\t */\r\n\t\tsupports: function(name) {\r\n\t\t\treturn _.include(this.properties(), name);\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\t/** \r\n\t * List of registered one-character prefixes. Key is a one-character prefix, \r\n\t * value is an <code>prefixObj</code> object\r\n\t */\r\n\tvar vendorPrefixes = {};\r\n\t\r\n\tvar defaultValue = '${1};';\r\n\t\r\n\t// XXX module preferences\r\n\tvar prefs = require('preferences');\r\n\tprefs.define('css.valueSeparator', ': ',\r\n\t\t\t'Defines a symbol that should be placed between CSS property and ' \r\n\t\t\t+ 'value when expanding CSS abbreviations.');\r\n\tprefs.define('css.propertyEnd', ';',\r\n\t\t\t'Defines a symbol that should be placed at the end of CSS property  ' \r\n\t\t\t+ 'when expanding CSS abbreviations.');\r\n\t\r\n\tprefs.define('stylus.valueSeparator', ' ',\r\n\t\t\t'Defines a symbol that should be placed between CSS property and ' \r\n\t\t\t+ 'value when expanding CSS abbreviations in Stylus dialect.');\r\n\tprefs.define('stylus.propertyEnd', '',\r\n\t\t\t'Defines a symbol that should be placed at the end of CSS property  ' \r\n\t\t\t+ 'when expanding CSS abbreviations in Stylus dialect.');\r\n\t\r\n\tprefs.define('sass.propertyEnd', '',\r\n\t\t\t'Defines a symbol that should be placed at the end of CSS property  ' \r\n\t\t\t+ 'when expanding CSS abbreviations in SASS dialect.');\r\n\t\r\n\tprefs.define('css.autoInsertVendorPrefixes', true,\r\n\t\t\t'Automatically generate vendor-prefixed copies of expanded CSS ' \r\n\t\t\t+ 'property. By default, Emmet will generate vendor-prefixed '\r\n\t\t\t+ 'properties only when you put dash before abbreviation ' \r\n\t\t\t+ '(e.g. <code>-bxsh</code>). With this option enabled, you don’t ' \r\n\t\t\t+ 'need dashes before abbreviations: Emmet will produce ' \r\n\t\t\t+ 'vendor-prefixed properties for you.');\r\n\t\r\n\tvar descTemplate = _.template('A comma-separated list of CSS properties that may have ' \r\n\t\t+ '<code><%= vendor %></code> vendor prefix. This list is used to generate '\r\n\t\t+ 'a list of prefixed properties when expanding <code>-property</code> '\r\n\t\t+ 'abbreviations. Empty list means that all possible CSS values may ' \r\n\t\t+ 'have <code><%= vendor %></code> prefix.');\r\n\t\r\n\tvar descAddonTemplate = _.template('A comma-separated list of <em>additional</em> CSS properties ' \r\n\t\t\t+ 'for <code>css.<%= vendor %>Preperties</code> preference. ' \r\n\t\t\t+ 'You should use this list if you want to add or remove a few CSS ' \r\n\t\t\t+ 'properties to original set. To add a new property, simply write its name, '\r\n\t\t\t+ 'to remove it, precede property with hyphen.<br>'\r\n\t\t\t+ 'For example, to add <em>foo</em> property and remove <em>border-radius</em> one, '\r\n\t\t\t+ 'the preference value will look like this: <code>foo, -border-radius</code>.');\r\n\t\r\n\t// properties list is created from cssFeatures.html file\r\n\tvar props = {\r\n\t\t'webkit': 'animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, backface-visibility, background-clip, background-composite, background-origin, background-size, border-fit, border-horizontal-spacing, border-image, border-vertical-spacing, box-align, box-direction, box-flex, box-flex-group, box-lines, box-ordinal-group, box-orient, box-pack, box-reflect, box-shadow, color-correction, column-break-after, column-break-before, column-break-inside, column-count, column-gap, column-rule-color, column-rule-style, column-rule-width, column-span, column-width, dashboard-region, font-smoothing, highlight, hyphenate-character, hyphenate-limit-after, hyphenate-limit-before, hyphens, line-box-contain, line-break, line-clamp, locale, margin-before-collapse, margin-after-collapse, marquee-direction, marquee-increment, marquee-repetition, marquee-style, mask-attachment, mask-box-image, mask-box-image-outset, mask-box-image-repeat, mask-box-image-slice, mask-box-image-source, mask-box-image-width, mask-clip, mask-composite, mask-image, mask-origin, mask-position, mask-repeat, mask-size, nbsp-mode, perspective, perspective-origin, rtl-ordering, text-combine, text-decorations-in-effect, text-emphasis-color, text-emphasis-position, text-emphasis-style, text-fill-color, text-orientation, text-security, text-stroke-color, text-stroke-width, transform, transition, transform-origin, transform-style, transition-delay, transition-duration, transition-property, transition-timing-function, user-drag, user-modify, user-select, writing-mode, svg-shadow, box-sizing, border-radius',\r\n\t\t'moz': 'animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, backface-visibility, background-inline-policy, binding, border-bottom-colors, border-image, border-left-colors, border-right-colors, border-top-colors, box-align, box-direction, box-flex, box-ordinal-group, box-orient, box-pack, box-shadow, box-sizing, column-count, column-gap, column-rule-color, column-rule-style, column-rule-width, column-width, float-edge, font-feature-settings, font-language-override, force-broken-image-icon, hyphens, image-region, orient, outline-radius-bottomleft, outline-radius-bottomright, outline-radius-topleft, outline-radius-topright, perspective, perspective-origin, stack-sizing, tab-size, text-blink, text-decoration-color, text-decoration-line, text-decoration-style, text-size-adjust, transform, transform-origin, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, user-focus, user-input, user-modify, user-select, window-shadow, background-clip, border-radius',\r\n\t\t'ms': 'accelerator, backface-visibility, background-position-x, background-position-y, behavior, block-progression, box-align, box-direction, box-flex, box-line-progression, box-lines, box-ordinal-group, box-orient, box-pack, content-zoom-boundary, content-zoom-boundary-max, content-zoom-boundary-min, content-zoom-chaining, content-zoom-snap, content-zoom-snap-points, content-zoom-snap-type, content-zooming, filter, flow-from, flow-into, font-feature-settings, grid-column, grid-column-align, grid-column-span, grid-columns, grid-layer, grid-row, grid-row-align, grid-row-span, grid-rows, high-contrast-adjust, hyphenate-limit-chars, hyphenate-limit-lines, hyphenate-limit-zone, hyphens, ime-mode, interpolation-mode, layout-flow, layout-grid, layout-grid-char, layout-grid-line, layout-grid-mode, layout-grid-type, line-break, overflow-style, perspective, perspective-origin, perspective-origin-x, perspective-origin-y, scroll-boundary, scroll-boundary-bottom, scroll-boundary-left, scroll-boundary-right, scroll-boundary-top, scroll-chaining, scroll-rails, scroll-snap-points-x, scroll-snap-points-y, scroll-snap-type, scroll-snap-x, scroll-snap-y, scrollbar-arrow-color, scrollbar-base-color, scrollbar-darkshadow-color, scrollbar-face-color, scrollbar-highlight-color, scrollbar-shadow-color, scrollbar-track-color, text-align-last, text-autospace, text-justify, text-kashida-space, text-overflow, text-size-adjust, text-underline-position, touch-action, transform, transform-origin, transform-origin-x, transform-origin-y, transform-origin-z, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, user-select, word-break, word-wrap, wrap-flow, wrap-margin, wrap-through, writing-mode',\r\n\t\t'o': 'dashboard-region, animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, border-image, link, link-source, object-fit, object-position, tab-size, table-baseline, transform, transform-origin, transition, transition-delay, transition-duration, transition-property, transition-timing-function, accesskey, input-format, input-required, marquee-dir, marquee-loop, marquee-speed, marquee-style'\r\n\t};\r\n\t\r\n\t_.each(props, function(v, k) {\r\n\t\tprefs.define('css.' + k + 'Properties', v, descTemplate({vendor: k}));\r\n\t\tprefs.define('css.' + k + 'PropertiesAddon', '', descAddonTemplate({vendor: k}));\r\n\t});\r\n\t\r\n\tprefs.define('css.unitlessProperties', 'z-index, line-height, opacity, font-weight, zoom', \r\n\t\t\t'The list of properties whose values ​​must not contain units.');\r\n\t\r\n\tprefs.define('css.intUnit', 'px', 'Default unit for integer values');\r\n\tprefs.define('css.floatUnit', 'em', 'Default unit for float values');\r\n\t\r\n\tprefs.define('css.keywords', 'auto, inherit', \r\n\t\t\t'A comma-separated list of valid keywords that can be used in CSS abbreviations.');\r\n\t\r\n\tprefs.define('css.keywordAliases', 'a:auto, i:inherit, s:solid, da:dashed, do:dotted, t:transparent', \r\n\t\t\t'A comma-separated list of keyword aliases, used in CSS abbreviation. '\r\n\t\t\t+ 'Each alias should be defined as <code>alias:keyword_name</code>.');\r\n\t\r\n\tprefs.define('css.unitAliases', 'e:em, p:%, x:ex, r:rem', \r\n\t\t\t'A comma-separated list of unit aliases, used in CSS abbreviation. '\r\n\t\t\t+ 'Each alias should be defined as <code>alias:unit_value</code>.');\r\n\t\r\n\tprefs.define('css.color.short', true, \r\n\t\t\t'Should color values like <code>#ffffff</code> be shortened to '\r\n\t\t\t+ '<code>#fff</code> after abbreviation with color was expanded.');\r\n\t\r\n\tprefs.define('css.color.case', 'keep', \r\n\t\t\t'Letter case of color values generated by abbreviations with color '\r\n\t\t\t+ '(like <code>c#0</code>). Possible values are <code>upper</code>, '\r\n\t\t\t+ '<code>lower</code> and <code>keep</code>.');\r\n\t\r\n\tprefs.define('css.fuzzySearch', true, \r\n\t\t\t'Enable fuzzy search among CSS snippet names. When enabled, every ' \r\n\t\t\t+ '<em>unknown</em> snippet will be scored against available snippet '\r\n\t\t\t+ 'names (not values or CSS properties!). The match with best score '\r\n\t\t\t+ 'will be used to resolve snippet value. For example, with this ' \r\n\t\t\t+ 'preference enabled, the following abbreviations are equal: '\r\n\t\t\t+ '<code>ov:h</code> == <code>ov-h</code> == <code>o-h</code> == '\r\n\t\t\t+ '<code>oh</code>');\r\n\t\r\n\tprefs.define('css.fuzzySearchMinScore', 0.3, \r\n\t\t\t'The minium score (from 0 to 1) that fuzzy-matched abbreviation should ' \r\n\t\t\t+ 'achive. Lower values may produce many false-positive matches, '\r\n\t\t\t+ 'higher values may reduce possible matches.');\r\n\t\r\n\tprefs.define('css.alignVendor', false, \r\n\t\t\t'If set to <code>true</code>, all generated vendor-prefixed properties ' \r\n\t\t\t+ 'will be aligned by real property name.');\r\n\t\r\n\t\r\n\tfunction isNumeric(ch) {\r\n\t\tvar code = ch && ch.charCodeAt(0);\r\n\t\treturn (ch && ch == '.' || (code > 47 && code < 58));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if provided snippet contains only one CSS property and value.\r\n\t * @param {String} snippet\r\n\t * @returns {Boolean}\r\n\t */\r\n\tfunction isSingleProperty(snippet) {\r\n\t\tvar utils = require('utils');\r\n\t\tsnippet = utils.trim(snippet);\r\n\t\t\r\n\t\t// check if it doesn't contain a comment and a newline\r\n\t\tif (~snippet.indexOf('/*') || /[\\n\\r]/.test(snippet)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\t// check if it's a valid snippet definition\r\n\t\tif (!/^[a-z0-9\\-]+\\s*\\:/i.test(snippet)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tsnippet = require('tabStops').processText(snippet, {\r\n\t\t\treplaceCarets: true,\r\n\t\t\ttabstop: function() {\r\n\t\t\t\treturn 'value';\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn snippet.split(':').length == 2;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Normalizes abbreviated value to final CSS one\r\n\t * @param {String} value\r\n\t * @returns {String}\r\n\t */\r\n\tfunction normalizeValue(value) {\r\n\t\tif (value.charAt(0) == '-' && !/^\\-[\\.\\d]/.test(value)) {\r\n\t\t\tvalue = value.replace(/^\\-+/, '');\r\n\t\t}\r\n\t\t\r\n\t\tif (value.charAt(0) == '#') {\r\n\t\t\treturn normalizeHexColor(value);\r\n\t\t}\r\n\t\t\r\n\t\treturn getKeyword(value);\r\n\t}\r\n\t\r\n\tfunction normalizeHexColor(value) {\r\n\t\tvar hex = value.replace(/^#+/, '') || '0';\r\n\t\tif (hex.toLowerCase() == 't') {\r\n\t\t\treturn 'transparent';\r\n\t\t}\r\n\t\t\r\n\t\tvar repeat = require('utils').repeatString;\r\n\t\tvar color = null;\r\n\t\tswitch (hex.length) {\r\n\t\t\tcase 1:\r\n\t\t\t\tcolor = repeat(hex, 6);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tcolor = repeat(hex, 3);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tcolor = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tcolor = hex + hex.substr(0, 2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tcolor = hex + hex.charAt(0);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tcolor = hex.substr(0, 6);\r\n\t\t}\r\n\t\t\r\n\t\t// color must be shortened?\r\n\t\tif (prefs.get('css.color.short')) {\r\n\t\t\tvar p = color.split('');\r\n\t\t\tif (p[0] == p[1] && p[2] == p[3] && p[4] == p[5]) {\r\n\t\t\t\tcolor = p[0] + p[2] + p[4];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// should transform case?\r\n\t\tswitch (prefs.get('css.color.case')) {\r\n\t\t\tcase 'upper':\r\n\t\t\t\tcolor = color.toUpperCase();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'lower':\r\n\t\t\t\tcolor = color.toLowerCase();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t\treturn '#' + color;\r\n\t}\r\n\t\r\n\tfunction getKeyword(name) {\r\n\t\tvar aliases = prefs.getDict('css.keywordAliases');\r\n\t\treturn name in aliases ? aliases[name] : name;\r\n\t}\r\n\t\r\n\tfunction getUnit(name) {\r\n\t\tvar aliases = prefs.getDict('css.unitAliases');\r\n\t\treturn name in aliases ? aliases[name] : name;\r\n\t}\r\n\t\r\n\tfunction isValidKeyword(keyword) {\r\n\t\treturn _.include(prefs.getArray('css.keywords'), getKeyword(keyword));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if passed CSS property support specified vendor prefix \r\n\t * @param {String} property\r\n\t * @param {String} prefix\r\n\t */\r\n\tfunction hasPrefix(property, prefix) {\r\n\t\tvar info = vendorPrefixes[prefix];\r\n\t\t\r\n\t\tif (!info)\r\n\t\t\tinfo = _.find(vendorPrefixes, function(data) {\r\n\t\t\t\treturn data.prefix == prefix;\r\n\t\t\t});\r\n\t\t\r\n\t\treturn info && info.supports(property);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Search for a list of supported prefixes for CSS property. This list\r\n\t * is used to generate all-prefixed snippet\r\n\t * @param {String} property CSS property name\r\n\t * @returns {Array}\r\n\t */\r\n\tfunction findPrefixes(property, noAutofill) {\r\n\t\tvar result = [];\r\n\t\t_.each(vendorPrefixes, function(obj, prefix) {\r\n\t\t\tif (hasPrefix(property, prefix)) {\r\n\t\t\t\tresult.push(prefix);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (!result.length && !noAutofill) {\r\n\t\t\t// add all non-obsolete prefixes\r\n\t\t\t_.each(vendorPrefixes, function(obj, prefix) {\r\n\t\t\t\tif (!obj.obsolete)\r\n\t\t\t\t\tresult.push(prefix);\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\tfunction addPrefix(name, obj) {\r\n\t\tif (_.isString(obj))\r\n\t\t\tobj = {prefix: obj};\r\n\t\t\r\n\t\tvendorPrefixes[name] = _.extend({}, prefixObj, obj);\r\n\t}\r\n\t\r\n\tfunction getSyntaxPreference(name, syntax) {\r\n\t\tif (syntax) {\r\n\t\t\tvar val = prefs.get(syntax + '.' + name);\r\n\t\t\tif (!_.isUndefined(val))\r\n\t\t\t\treturn val;\r\n\t\t}\r\n\t\t\r\n\t\treturn prefs.get('css.' + name);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Format CSS property according to current syntax dialect\r\n\t * @param {String} property\r\n\t * @param {String} syntax\r\n\t * @returns {String}\r\n\t */\r\n\tfunction formatProperty(property, syntax) {\r\n\t\tvar ix = property.indexOf(':');\r\n\t\tproperty = property.substring(0, ix).replace(/\\s+$/, '') \r\n\t\t\t+ getSyntaxPreference('valueSeparator', syntax)\r\n\t\t\t+ require('utils').trim(property.substring(ix + 1));\r\n\t\t\r\n\t\treturn property.replace(/\\s*;\\s*$/, getSyntaxPreference('propertyEnd', syntax));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Transforms snippet value if required. For example, this transformation\r\n\t * may add <i>!important</i> declaration to CSS property\r\n\t * @param {String} snippet\r\n\t * @param {Boolean} isImportant\r\n\t * @returns {String}\r\n\t */\r\n\tfunction transformSnippet(snippet, isImportant, syntax) {\r\n\t\tif (!_.isString(snippet))\r\n\t\t\tsnippet = snippet.data;\r\n\t\t\r\n\t\tif (!isSingleProperty(snippet))\r\n\t\t\treturn snippet;\r\n\t\t\r\n\t\tif (isImportant) {\r\n\t\t\tif (~snippet.indexOf(';')) {\r\n\t\t\t\tsnippet = snippet.split(';').join(' !important;');\r\n\t\t\t} else {\r\n\t\t\t\tsnippet += ' !important';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn formatProperty(snippet, syntax);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Helper function that parses comma-separated list of elements into array\r\n\t * @param {String} list\r\n\t * @returns {Array}\r\n\t */\r\n\tfunction parseList(list) {\r\n\t\tvar result = _.map((list || '').split(','), require('utils').trim);\r\n\t\treturn result.length ? result : null;\r\n\t}\r\n\t\r\n\tfunction getProperties(key) {\r\n\t\tvar list = prefs.getArray(key);\r\n\t\t_.each(prefs.getArray(key + 'Addon'), function(prop) {\r\n\t\t\tif (prop.charAt(0) == '-') {\r\n\t\t\t\tlist = _.without(list, prop.substr(1));\r\n\t\t\t} else {\r\n\t\t\t\tif (prop.charAt(0) == '+')\r\n\t\t\t\t\tprop = prop.substr(1);\r\n\t\t\t\t\r\n\t\t\t\tlist.push(prop);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn list;\r\n\t}\r\n\t\r\n\t\r\n\t// TODO refactor, this looks awkward now\r\n\taddPrefix('w', {\r\n\t\tprefix: 'webkit'\r\n\t});\r\n\taddPrefix('m', {\r\n\t\tprefix: 'moz'\r\n\t});\r\n\taddPrefix('s', {\r\n\t\tprefix: 'ms'\r\n\t});\r\n\taddPrefix('o', {\r\n\t\tprefix: 'o'\r\n\t});\r\n\t\r\n\t// I think nobody uses it\r\n//\taddPrefix('k', {\r\n//\t\tprefix: 'khtml',\r\n//\t\tobsolete: true\r\n//\t});\r\n\t\r\n\tvar cssSyntaxes = ['css', 'less', 'sass', 'scss', 'stylus'];\r\n\t\r\n\t/**\r\n\t * XXX register resolver\r\n\t * @param {TreeNode} node\r\n\t * @param {String} syntax\r\n\t */\r\n\trequire('resources').addResolver(function(node, syntax) {\r\n\t\tif (_.include(cssSyntaxes, syntax) && node.isElement()) {\r\n\t\t\treturn module.expandToSnippet(node.abbreviation, syntax);\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t});\r\n\t\r\n\tvar ea = require('expandAbbreviation');\r\n\t/**\r\n\t * For CSS-like syntaxes, we need to handle a special use case. Some editors\r\n\t * (like Sublime Text 2) may insert semicolons automatically when user types\r\n\t * abbreviation. After expansion, user receives a double semicolon. This\r\n\t * handler automatically removes semicolon from generated content in such cases.\r\n\t * @param {IEmmetEditor} editor\r\n\t * @param {String} syntax\r\n\t * @param {String} profile\r\n\t */\r\n\tea.addHandler(function(editor, syntax, profile) {\r\n\t\tif (!_.include(cssSyntaxes, syntax)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tvar caretPos = editor.getSelectionRange().end;\r\n\t\tvar abbr = ea.findAbbreviation(editor);\r\n\t\t\t\r\n\t\tif (abbr) {\r\n\t\t\tvar content = emmet.expandAbbreviation(abbr, syntax, profile);\r\n\t\t\tif (content) {\r\n\t\t\t\tvar replaceFrom = caretPos - abbr.length;\r\n\t\t\t\tvar replaceTo = caretPos;\r\n\t\t\t\tif (editor.getContent().charAt(caretPos) == ';' && content.charAt(content.length - 1) == ';') {\r\n\t\t\t\t\treplaceTo++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\teditor.replaceContent(content, replaceFrom, replaceTo);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t});\r\n\t\r\n\treturn module = {\r\n\t\t/**\r\n\t\t * Adds vendor prefix\r\n\t\t * @param {String} name One-character prefix name\r\n\t\t * @param {Object} obj Object describing vendor prefix\r\n\t\t * @memberOf cssResolver\r\n\t\t */\r\n\t\taddPrefix: addPrefix,\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if passed CSS property supports specified vendor prefix\r\n\t\t * @param {String} property\r\n\t\t * @param {String} prefix\r\n\t\t */\r\n\t\tsupportsPrefix: hasPrefix,\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns prefixed version of passed CSS property, only if this\r\n\t\t * property supports such prefix\r\n\t\t * @param {String} property\r\n\t\t * @param {String} prefix\r\n\t\t * @returns\r\n\t\t */\r\n\t\tprefixed: function(property, prefix) {\r\n\t\t\treturn hasPrefix(property, prefix) \r\n\t\t\t\t? '-' + prefix + '-' + property \r\n\t\t\t\t: property;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns list of all registered vendor prefixes\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tlistPrefixes: function() {\r\n\t\t\treturn _.map(vendorPrefixes, function(obj) {\r\n\t\t\t\treturn obj.prefix;\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns object describing vendor prefix\r\n\t\t * @param {String} name\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tgetPrefix: function(name) {\r\n\t\t\treturn vendorPrefixes[name];\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes prefix object\r\n\t\t * @param {String} name\r\n\t\t */\r\n\t\tremovePrefix: function(name) {\r\n\t\t\tif (name in vendorPrefixes)\r\n\t\t\t\tdelete vendorPrefixes[name];\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Extract vendor prefixes from abbreviation\r\n\t\t * @param {String} abbr\r\n\t\t * @returns {Object} Object containing array of prefixes and clean \r\n\t\t * abbreviation name\r\n\t\t */\r\n\t\textractPrefixes: function(abbr) {\r\n\t\t\tif (abbr.charAt(0) != '-') {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tproperty: abbr,\r\n\t\t\t\t\tprefixes: null\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// abbreviation may either contain sequence of one-character prefixes\r\n\t\t\t// or just dash, meaning that user wants to produce all possible\r\n\t\t\t// prefixed properties\r\n\t\t\tvar i = 1, il = abbr.length, ch;\r\n\t\t\tvar prefixes = [];\r\n\t\t\t\r\n\t\t\twhile (i < il) {\r\n\t\t\t\tch = abbr.charAt(i);\r\n\t\t\t\tif (ch == '-') {\r\n\t\t\t\t\t// end-sequence character found, stop searching\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (ch in vendorPrefixes) {\r\n\t\t\t\t\tprefixes.push(ch);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// no prefix found, meaning user want to produce all\r\n\t\t\t\t\t// vendor-prefixed properties\r\n\t\t\t\t\tprefixes.length = 0;\r\n\t\t\t\t\ti = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// reached end of abbreviation and no property name left\r\n\t\t\tif (i == il -1) {\r\n\t\t\t\ti = 1;\r\n\t\t\t\tprefixes.length = 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tproperty: abbr.substring(i),\r\n\t\t\t\tprefixes: prefixes.length ? prefixes : 'all'\r\n\t\t\t};\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Search for value substring in abbreviation\r\n\t\t * @param {String} abbr\r\n\t\t * @returns {String} Value substring\r\n\t\t */\r\n\t\tfindValuesInAbbreviation: function(abbr, syntax) {\r\n\t\t\tsyntax = syntax || 'css';\r\n\t\t\t\r\n\t\t\tvar i = 0, il = abbr.length, value = '', ch;\r\n\t\t\twhile (i < il) {\r\n\t\t\t\tch = abbr.charAt(i);\r\n\t\t\t\tif (isNumeric(ch) || ch == '#' || (ch == '-' && isNumeric(abbr.charAt(i + 1)))) {\r\n\t\t\t\t\tvalue = abbr.substring(i);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// try to find keywords in abbreviation\r\n\t\t\tvar property = abbr.substring(0, abbr.length - value.length);\r\n\t\t\tvar res = require('resources');\r\n\t\t\tvar keywords = [];\r\n\t\t\t// try to extract some commonly-used properties\r\n\t\t\twhile (~property.indexOf('-') && !res.findSnippet(syntax, property)) {\r\n\t\t\t\tvar parts = property.split('-');\r\n\t\t\t\tvar lastPart = parts.pop();\r\n\t\t\t\tif (!isValidKeyword(lastPart)) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tkeywords.unshift(lastPart);\r\n\t\t\t\tproperty = parts.join('-');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn keywords.join('-') + value;\r\n\t\t},\r\n\t\t\r\n\t\tparseValues: function(str) {\r\n\t\t\t/** @type StringStream */\r\n\t\t\tvar stream = require('stringStream').create(str);\r\n\t\t\tvar values = [];\r\n\t\t\tvar ch = null;\r\n\t\t\t\r\n\t\t\twhile (ch = stream.next()) {\r\n\t\t\t\tif (ch == '#') {\r\n\t\t\t\t\tstream.match(/^t|[0-9a-f]+/i, true);\r\n\t\t\t\t\tvalues.push(stream.current());\r\n\t\t\t\t} else if (ch == '-') {\r\n\t\t\t\t\tif (isValidKeyword(_.last(values)) || \r\n\t\t\t\t\t\t\t( stream.start && isNumeric(str.charAt(stream.start - 1)) )\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\tstream.start = stream.pos;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tstream.match(/^\\-?[0-9]*(\\.[0-9]+)?[a-z%\\.]*/, true);\r\n\t\t\t\t\tvalues.push(stream.current());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstream.match(/^[0-9]*(\\.[0-9]*)?[a-z%]*/, true);\r\n\t\t\t\t\tvalues.push(stream.current());\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tstream.start = stream.pos;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn _.map(_.compact(values), normalizeValue);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Extracts values from abbreviation\r\n\t\t * @param {String} abbr\r\n\t\t * @returns {Object} Object containing array of values and clean \r\n\t\t * abbreviation name\r\n\t\t */\r\n\t\textractValues: function(abbr) {\r\n\t\t\t// search for value start\r\n\t\t\tvar abbrValues = this.findValuesInAbbreviation(abbr);\r\n\t\t\tif (!abbrValues) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tproperty: abbr,\r\n\t\t\t\t\tvalues: null\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tproperty: abbr.substring(0, abbr.length - abbrValues.length).replace(/-$/, ''),\r\n\t\t\t\tvalues: this.parseValues(abbrValues)\r\n\t\t\t};\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Normalizes value, defined in abbreviation.\r\n\t\t * @param {String} value\r\n\t\t * @param {String} property\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tnormalizeValue: function(value, property) {\r\n\t\t\tproperty = (property || '').toLowerCase();\r\n\t\t\tvar unitlessProps = prefs.getArray('css.unitlessProperties');\r\n\t\t\treturn value.replace(/^(\\-?[0-9\\.]+)([a-z]*)$/, function(str, val, unit) {\r\n\t\t\t\tif (!unit && (val == '0' || _.include(unitlessProps, property)))\r\n\t\t\t\t\treturn val;\r\n\t\t\t\t\r\n\t\t\t\tif (!unit)\r\n\t\t\t\t\treturn val.replace(/\\.$/, '') + prefs.get(~val.indexOf('.') ? 'css.floatUnit' : 'css.intUnit');\r\n\t\t\t\t\r\n\t\t\t\treturn val + getUnit(unit);\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Expands abbreviation into a snippet\r\n\t\t * @param {String} abbr Abbreviation name to expand\r\n\t\t * @param {String} value Abbreviation value\r\n\t\t * @param {String} syntax Currect syntax or dialect. Default is 'css'\r\n\t\t * @returns {Object} Array of CSS properties and values or predefined\r\n\t\t * snippet (string or element)\r\n\t\t */\r\n\t\texpand: function(abbr, value, syntax) {\r\n\t\t\tsyntax = syntax || 'css';\r\n\t\t\tvar resources = require('resources');\r\n\t\t\tvar autoInsertPrefixes = prefs.get('css.autoInsertVendorPrefixes');\r\n\t\t\t\r\n\t\t\t// check if snippet should be transformed to !important\r\n\t\t\tvar isImportant;\r\n\t\t\tif (isImportant = /^(.+)\\!$/.test(abbr)) {\r\n\t\t\t\tabbr = RegExp.$1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// check if we have abbreviated resource\r\n\t\t\tvar snippet = resources.findSnippet(syntax, abbr);\r\n\t\t\tif (snippet && !autoInsertPrefixes) {\r\n\t\t\t\treturn transformSnippet(snippet, isImportant, syntax);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// no abbreviated resource, parse abbreviation\r\n\t\t\tvar prefixData = this.extractPrefixes(abbr);\r\n\t\t\tvar valuesData = this.extractValues(prefixData.property);\r\n\t\t\tvar abbrData = _.extend(prefixData, valuesData);\r\n\t\t\t\r\n\t\t\tif (!snippet) {\r\n\t\t\t\tsnippet = resources.findSnippet(syntax, abbrData.property);\r\n\t\t\t} else {\r\n\t\t\t\tabbrData.values = null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!snippet && prefs.get('css.fuzzySearch')) {\r\n\t\t\t\t// let’s try fuzzy search\r\n\t\t\t\tsnippet = resources.fuzzyFindSnippet(syntax, abbrData.property, parseFloat(prefs.get('css.fuzzySearchMinScore')));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!snippet) {\r\n\t\t\t\tsnippet = abbrData.property + ':' + defaultValue;\r\n\t\t\t} else if (!_.isString(snippet)) {\r\n\t\t\t\tsnippet = snippet.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!isSingleProperty(snippet)) {\r\n\t\t\t\treturn snippet;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar snippetObj = this.splitSnippet(snippet);\r\n\t\t\tvar result = [];\r\n\t\t\tif (!value && abbrData.values) {\r\n\t\t\t\tvalue = _.map(abbrData.values, function(val) {\r\n\t\t\t\t\treturn this.normalizeValue(val, snippetObj.name);\r\n\t\t\t\t}, this).join(' ') + ';';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsnippetObj.value = value || snippetObj.value;\r\n\t\t\t\r\n\t\t\tvar prefixes = abbrData.prefixes == 'all' || (!abbrData.prefixes && autoInsertPrefixes) \r\n\t\t\t\t? findPrefixes(snippetObj.name, autoInsertPrefixes && abbrData.prefixes != 'all')\r\n\t\t\t\t: abbrData.prefixes;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\tvar names = [], propName;\r\n\t\t\t_.each(prefixes, function(p) {\r\n\t\t\t\tif (p in vendorPrefixes) {\r\n\t\t\t\t\tpropName = vendorPrefixes[p].transformName(snippetObj.name);\r\n\t\t\t\t\tnames.push(propName);\r\n\t\t\t\t\tresult.push(transformSnippet(propName + ':' + snippetObj.value,\r\n\t\t\t\t\t\t\tisImportant, syntax));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// put the original property\r\n\t\t\tresult.push(transformSnippet(snippetObj.name + ':' + snippetObj.value, isImportant, syntax));\r\n\t\t\tnames.push(snippetObj.name);\r\n\t\t\t\r\n\t\t\tif (prefs.get('css.alignVendor')) {\r\n\t\t\t\tvar pads = require('utils').getStringsPads(names);\r\n\t\t\t\tresult = _.map(result, function(prop, i) {\r\n\t\t\t\t\treturn pads[i] + prop;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Same as <code>expand</code> method but transforms output into \r\n\t\t * Emmet snippet\r\n\t\t * @param {String} abbr\r\n\t\t * @param {String} syntax\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\texpandToSnippet: function(abbr, syntax) {\r\n\t\t\tvar snippet = this.expand(abbr, null, syntax);\r\n\t\t\tif (_.isArray(snippet)) {\r\n\t\t\t\treturn snippet.join('\\n');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!_.isString(snippet))\r\n\t\t\t\treturn snippet.data;\r\n\t\t\t\r\n\t\t\treturn String(snippet);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Split snippet into a CSS property-value pair\r\n\t\t * @param {String} snippet\r\n\t\t */\r\n\t\tsplitSnippet: function(snippet) {\r\n\t\t\tvar utils = require('utils');\r\n\t\t\tsnippet = utils.trim(snippet);\r\n\t\t\tif (snippet.indexOf(':') == -1) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: snippet,\r\n\t\t\t\t\tvalue: defaultValue\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar pair = snippet.split(':');\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tname: utils.trim(pair.shift()),\r\n\t\t\t\t// replace ${0} tabstop to produce valid vendor-prefixed values\r\n\t\t\t\t// where possible\r\n\t\t\t\tvalue: utils.trim(pair.join(':')).replace(/^(\\$\\{0\\}|\\$0)(\\s*;?)$/, '${1}$2')\r\n\t\t\t};\r\n\t\t},\r\n\t\t\r\n\t\tgetSyntaxPreference: getSyntaxPreference,\r\n\t\ttransformSnippet: transformSnippet\r\n\t};\r\n});\r\n/**\r\n * 'Expand Abbreviation' handler that parses gradient definition from under \r\n * cursor and updates CSS rule with vendor-prefixed values.\r\n * \r\n * @memberOf __cssGradientHandlerDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('cssGradient', function(require, _) {\r\n\tvar defaultLinearDirections = ['top', 'to bottom', '0deg'];\r\n\t/** Back-reference to current module */\r\n\tvar module = null;\r\n\t\r\n\tvar cssSyntaxes = ['css', 'less', 'sass', 'scss', 'stylus', 'styl'];\r\n\t\r\n\tvar reDeg = /\\d+deg/i;\r\n\tvar reKeyword = /top|bottom|left|right/i;\r\n\t\r\n\t// XXX define preferences\r\n\t/** @type preferences */\r\n\tvar prefs = require('preferences');\r\n\tprefs.define('css.gradient.prefixes', 'webkit, moz, o',\r\n\t\t\t'A comma-separated list of vendor-prefixes for which values should ' \r\n\t\t\t+ 'be generated.');\r\n\t\r\n\tprefs.define('css.gradient.oldWebkit', true,\r\n\t\t\t'Generate gradient definition for old Webkit implementations');\r\n\t\r\n\tprefs.define('css.gradient.omitDefaultDirection', true,\r\n\t\t'Do not output default direction definition in generated gradients.');\r\n\t\r\n\tprefs.define('css.gradient.defaultProperty', 'background-image',\r\n\t\t'When gradient expanded outside CSS value context, it will produce '\r\n\t\t\t+ 'properties with this name.');\r\n\t\r\n\tprefs.define('css.gradient.fallback', false,\r\n\t\t\t'With this option enabled, CSS gradient generator will produce '\r\n\t\t\t+ '<code>background-color</code> property with gradient first color '\r\n\t\t\t+ 'as fallback for old browsers.');\r\n\t\r\n\tfunction normalizeSpace(str) {\r\n\t\treturn require('utils').trim(str).replace(/\\s+/g, ' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parses linear gradient definition\r\n\t * @param {String}\r\n\t */\r\n\tfunction parseLinearGradient(gradient) {\r\n\t\tvar direction = defaultLinearDirections[0];\r\n\t\t\r\n\t\t// extract tokens\r\n\t\t/** @type StringStream */\r\n\t\tvar stream = require('stringStream').create(require('utils').trim(gradient));\r\n\t\tvar colorStops = [], ch;\r\n\t\twhile (ch = stream.next()) {\r\n\t\t\tif (stream.peek() == ',') {\r\n\t\t\t\tcolorStops.push(stream.current());\r\n\t\t\t\tstream.next();\r\n\t\t\t\tstream.eatSpace();\r\n\t\t\t\tstream.start = stream.pos;\r\n\t\t\t} else if (ch == '(') { // color definition, like 'rgb(0,0,0)'\r\n\t\t\t\tstream.skipTo(')');\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// add last token\r\n\t\tcolorStops.push(stream.current());\r\n\t\tcolorStops = _.compact(_.map(colorStops, normalizeSpace));\r\n\t\t\r\n\t\tif (!colorStops.length)\r\n\t\t\treturn null;\r\n\t\t\r\n\t\t// let's see if the first color stop is actually a direction\r\n\t\tif (reDeg.test(colorStops[0]) || reKeyword.test(colorStops[0])) {\r\n\t\t\tdirection = colorStops.shift();\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\ttype: 'linear',\r\n\t\t\tdirection: direction,\r\n\t\t\tcolorStops: _.map(colorStops, parseColorStop)\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parses color stop definition\r\n\t * @param {String} colorStop\r\n\t * @returns {Object}\r\n\t */\r\n\tfunction parseColorStop(colorStop) {\r\n\t\tcolorStop = normalizeSpace(colorStop);\r\n\t\t\r\n\t\t// find color declaration\r\n\t\t// first, try complex color declaration, like rgb(0,0,0)\r\n\t\tvar color = null;\r\n\t\tcolorStop = colorStop.replace(/^(\\w+\\(.+?\\))\\s*/, function(str, c) {\r\n\t\t\tcolor = c;\r\n\t\t\treturn '';\r\n\t\t});\r\n\t\t\r\n\t\tif (!color) {\r\n\t\t\t// try simple declaration, like yellow, #fco, #ffffff, etc.\r\n\t\t\tvar parts = colorStop.split(' ');\r\n\t\t\tcolor = parts[0];\r\n\t\t\tcolorStop = parts[1] || '';\r\n\t\t}\r\n\t\t\r\n\t\tvar result = {\r\n\t\t\tcolor: color\r\n\t\t};\r\n\t\t\r\n\t\tif (colorStop) {\r\n\t\t\t// there's position in color stop definition\r\n\t\t\tcolorStop.replace(/^(\\-?[\\d\\.]+)([a-z%]+)?$/, function(str, pos, unit) {\r\n\t\t\t\tresult.position = pos;\r\n\t\t\t\tif (~pos.indexOf('.')) {\r\n\t\t\t\t\tunit = '';\r\n\t\t\t\t} else if (!unit) {\r\n\t\t\t\t\tunit = '%';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (unit)\r\n\t\t\t\t\tresult.unit = unit;\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Resolves property name (abbreviation): searches for snippet definition in \r\n\t * 'resources' and returns new name of matched property\r\n\t */\r\n\tfunction resolvePropertyName(name, syntax) {\r\n\t\tvar res = require('resources');\r\n\t\tvar prefs = require('preferences');\r\n\t\tvar snippet = res.findSnippet(syntax, name);\r\n\t\t\r\n\t\tif (!snippet && prefs.get('css.fuzzySearch')) {\r\n\t\t\tsnippet = res.fuzzyFindSnippet(syntax, name, \r\n\t\t\t\t\tparseFloat(prefs.get('css.fuzzySearchMinScore')));\r\n\t\t}\r\n\t\t\r\n\t\tif (snippet) {\r\n\t\t\tif (!_.isString(snippet)) {\r\n\t\t\t\tsnippet = snippet.data;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn require('cssResolver').splitSnippet(snippet).name;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Fills-out implied positions in color-stops. This function is useful for\r\n\t * old Webkit gradient definitions\r\n\t */\r\n\tfunction fillImpliedPositions(colorStops) {\r\n\t\tvar from = 0;\r\n\t\t\r\n\t\t_.each(colorStops, function(cs, i) {\r\n\t\t\t// make sure that first and last positions are defined\r\n\t\t\tif (!i)\r\n\t\t\t\treturn cs.position = cs.position || 0;\r\n\t\t\t\r\n\t\t\tif (i == colorStops.length - 1 && !('position' in cs))\r\n\t\t\t\tcs.position = 1;\r\n\t\t\t\r\n\t\t\tif ('position' in cs) {\r\n\t\t\t\tvar start = colorStops[from].position || 0;\r\n\t\t\t\tvar step = (cs.position - start) / (i - from);\r\n\t\t\t\t_.each(colorStops.slice(from, i), function(cs2, j) {\r\n\t\t\t\t\tcs2.position = start + step * j;\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tfrom = i;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns textual version of direction expressed in degrees\r\n\t * @param {String} direction\r\n\t * @returns {String}\r\n\t */\r\n\tfunction textualDirection(direction) {\r\n\t\tvar angle = parseFloat(direction);\r\n\t\t\r\n\t\tif(!_.isNaN(angle)) {\r\n\t\t\tswitch(angle % 360) {\r\n\t\t\t\tcase 0:   return 'left';\r\n\t\t\t\tcase 90:  return 'bottom';\r\n\t\t\t\tcase 180: return 'right';\r\n\t\t\t\tcase 240: return 'top';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn direction;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates direction definition for old Webkit gradients\r\n\t * @param {String} direction\r\n\t * @returns {String}\r\n\t */\r\n\tfunction oldWebkitDirection(direction) {\r\n\t\tdirection = textualDirection(direction);\r\n\t\t\r\n\t\tif(reDeg.test(direction))\r\n\t\t\tthrow \"The direction is an angle that can’t be converted.\";\r\n\t\t\r\n\t\tvar v = function(pos) {\r\n\t\t\treturn ~direction.indexOf(pos) ? '100%' : '0';\r\n\t\t};\r\n\t\t\r\n\t\treturn v('right') + ' ' + v('bottom') + ', ' + v('left') + ' ' + v('top');\r\n\t}\r\n\t\r\n\tfunction getPrefixedNames(name) {\r\n\t\tvar prefixes = prefs.getArray('css.gradient.prefixes');\r\n\t\tvar names = prefixes \r\n\t\t\t? _.map(prefixes, function(p) {\r\n\t\t\t\treturn '-' + p + '-' + name;\r\n\t\t\t}) \r\n\t\t\t: [];\r\n\t\t\r\n\t\tnames.push(name);\r\n\t\t\r\n\t\treturn names;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns list of CSS properties with gradient\r\n\t * @param {Object} gradient\r\n\t * @param {String} propertyName Original CSS property name\r\n\t * @returns {Array}\r\n\t */\r\n\tfunction getPropertiesForGradient(gradient, propertyName) {\r\n\t\tvar props = [];\r\n\t\tvar css = require('cssResolver');\r\n\t\t\r\n\t\tif (prefs.get('css.gradient.fallback') && ~propertyName.toLowerCase().indexOf('background')) {\r\n\t\t\tprops.push({\r\n\t\t\t\tname: 'background-color',\r\n\t\t\t\tvalue: '${1:' + gradient.colorStops[0].color + '}'\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t_.each(prefs.getArray('css.gradient.prefixes'), function(prefix) {\r\n\t\t\tvar name = css.prefixed(propertyName, prefix);\r\n\t\t\tif (prefix == 'webkit' && prefs.get('css.gradient.oldWebkit')) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tprops.push({\r\n\t\t\t\t\t\tname: name,\r\n\t\t\t\t\t\tvalue: module.oldWebkitLinearGradient(gradient)\r\n\t\t\t\t\t});\r\n\t\t\t\t} catch(e) {}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tprops.push({\r\n\t\t\t\tname: name,\r\n\t\t\t\tvalue: module.toString(gradient, prefix)\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\treturn props.sort(function(a, b) {\r\n\t\t\treturn b.name.length - a.name.length;\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Pastes gradient definition into CSS rule with correct vendor-prefixes\r\n\t * @param {EditElement} property Matched CSS property\r\n\t * @param {Object} gradient Parsed gradient\r\n\t * @param {Range} valueRange If passed, only this range within property \r\n\t * value will be replaced with gradient. Otherwise, full value will be \r\n\t * replaced\r\n\t */\r\n\tfunction pasteGradient(property, gradient, valueRange) {\r\n\t\tvar rule = property.parent;\r\n\t\tvar utils = require('utils');\r\n\t\tvar alignVendor = require('preferences').get('css.alignVendor');\r\n\t\t\r\n\t\t// we may have aligned gradient definitions: find the smallest value\r\n\t\t// separator\r\n\t\tvar sep = property.styleSeparator;\r\n\t\tvar before = property.styleBefore;\r\n\t\t\r\n\t\t// first, remove all properties within CSS rule with the same name and\r\n\t\t// gradient definition\r\n\t\t_.each(rule.getAll(getPrefixedNames(property.name())), function(item) {\r\n\t\t\tif (item != property && /gradient/i.test(item.value())) {\r\n\t\t\t\tif (item.styleSeparator.length < sep.length) {\r\n\t\t\t\t\tsep = item.styleSeparator;\r\n\t\t\t\t}\r\n\t\t\t\tif (item.styleBefore.length < before.length) {\r\n\t\t\t\t\tbefore = item.styleBefore;\r\n\t\t\t\t}\r\n\t\t\t\trule.remove(item);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (alignVendor) {\r\n\t\t\t// update prefix\r\n\t\t\tif (before != property.styleBefore) {\r\n\t\t\t\tvar fullRange = property.fullRange();\r\n\t\t\t\trule._updateSource(before, fullRange.start, fullRange.start + property.styleBefore.length);\r\n\t\t\t\tproperty.styleBefore = before;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// update separator value\r\n\t\t\tif (sep != property.styleSeparator) {\r\n\t\t\t\trule._updateSource(sep, property.nameRange().end, property.valueRange().start);\r\n\t\t\t\tproperty.styleSeparator = sep;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar value = property.value();\r\n\t\tif (!valueRange)\r\n\t\t\tvalueRange = require('range').create(0, property.value());\r\n\t\t\r\n\t\tvar val = function(v) {\r\n\t\t\treturn utils.replaceSubstring(value, v, valueRange);\r\n\t\t};\r\n\t\t\r\n\t\t// put vanilla-clean gradient definition into current rule\r\n\t\tproperty.value(val(module.toString(gradient)) + '${2}');\r\n\t\t\r\n\t\t// create list of properties to insert\r\n\t\tvar propsToInsert = getPropertiesForGradient(gradient, property.name());\r\n\t\t\r\n\t\t// align prefixed values\r\n\t\tif (alignVendor) {\r\n\t\t\tvar values = _.pluck(propsToInsert, 'value');\r\n\t\t\tvar names = _.pluck(propsToInsert, 'name');\r\n\t\t\tvalues.push(property.value());\r\n\t\t\tnames.push(property.name());\r\n\t\t\t\r\n\t\t\tvar valuePads = utils.getStringsPads(_.map(values, function(v) {\r\n\t\t\t\treturn v.substring(0, v.indexOf('('));\r\n\t\t\t}));\r\n\t\t\t\r\n\t\t\tvar namePads = utils.getStringsPads(names);\r\n\t\t\tproperty.name(_.last(namePads) + property.name());\r\n\t\t\t\r\n\t\t\t_.each(propsToInsert, function(prop, i) {\r\n\t\t\t\tprop.name = namePads[i] + prop.name;\r\n\t\t\t\tprop.value = valuePads[i] + prop.value;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tproperty.value(_.last(valuePads) + property.value());\r\n\t\t}\r\n\t\t\r\n\t\t// put vendor-prefixed definitions before current rule\r\n\t\t_.each(propsToInsert, function(prop) {\r\n\t\t\trule.add(prop.name, prop.value, rule.indexOf(property));\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Search for gradient definition inside CSS property value\r\n\t */\r\n\tfunction findGradient(cssProp) {\r\n\t\tvar value = cssProp.value();\r\n\t\tvar gradient = null;\r\n\t\tvar matchedPart = _.find(cssProp.valueParts(), function(part) {\r\n\t\t\treturn gradient = module.parse(part.substring(value));\r\n\t\t});\r\n\t\t\r\n\t\tif (matchedPart && gradient) {\r\n\t\t\treturn {\r\n\t\t\t\tgradient: gradient,\r\n\t\t\t\tvalueRange: matchedPart\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Tries to expand gradient outside CSS value \r\n\t * @param {IEmmetEditor} editor\r\n\t * @param {String} syntax\r\n\t */\r\n\tfunction expandGradientOutsideValue(editor, syntax) {\r\n\t\tvar propertyName = prefs.get('css.gradient.defaultProperty');\r\n\t\t\r\n\t\tif (!propertyName)\r\n\t\t\treturn false;\r\n\t\t\r\n\t\t// assuming that gradient definition is written on new line,\r\n\t\t// do a simplified parsing\r\n\t\tvar content = String(editor.getContent());\r\n\t\t/** @type Range */\r\n\t\tvar lineRange = require('range').create(editor.getCurrentLineRange());\r\n\t\t\r\n\t\t// get line content and adjust range with padding\r\n\t\tvar line = lineRange.substring(content)\r\n\t\t\t.replace(/^\\s+/, function(pad) {\r\n\t\t\t\tlineRange.start += pad.length;\r\n\t\t\t\treturn '';\r\n\t\t\t})\r\n\t\t\t.replace(/\\s+$/, function(pad) {\r\n\t\t\t\tlineRange.end -= pad.length;\r\n\t\t\t\treturn '';\r\n\t\t\t});\r\n\t\t\r\n\t\tvar css = require('cssResolver');\r\n\t\tvar gradient = module.parse(line);\r\n\t\tif (gradient) {\r\n\t\t\tvar props = getPropertiesForGradient(gradient, propertyName);\r\n\t\t\tprops.push({\r\n\t\t\t\tname: propertyName,\r\n\t\t\t\tvalue: module.toString(gradient) + '${2}'\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar sep = css.getSyntaxPreference('valueSeparator', syntax);\r\n\t\t\tvar end = css.getSyntaxPreference('propertyEnd', syntax);\r\n\t\t\t\r\n\t\t\tif (require('preferences').get('css.alignVendor')) {\r\n\t\t\t\tvar pads = require('utils').getStringsPads(_.map(props, function(prop) {\r\n\t\t\t\t\treturn prop.value.substring(0, prop.value.indexOf('('));\r\n\t\t\t\t}));\r\n\t\t\t\t_.each(props, function(prop, i) {\r\n\t\t\t\t\tprop.value = pads[i] + prop.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tprops = _.map(props, function(item) {\r\n\t\t\t\treturn item.name + sep + item.value + end;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\teditor.replaceContent(props.join('\\n'), lineRange.start, lineRange.end);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Search for gradient definition inside CSS value under cursor\r\n\t * @param {String} content\r\n\t * @param {Number} pos\r\n\t * @returns {Object}\r\n\t */\r\n\tfunction findGradientFromPosition(content, pos) {\r\n\t\tvar cssProp = null;\r\n\t\t/** @type EditContainer */\r\n\t\tvar cssRule = require('cssEditTree').parseFromPosition(content, pos, true);\r\n\t\t\r\n\t\tif (cssRule) {\r\n\t\t\tcssProp = cssRule.itemFromPosition(pos, true);\r\n\t\t\tif (!cssProp) {\r\n\t\t\t\t// in case user just started writing CSS property\r\n\t\t\t\t// and didn't include semicolon–try another approach\r\n\t\t\t\tcssProp = _.find(cssRule.list(), function(elem) {\r\n\t\t\t\t\treturn elem.range(true).end == pos;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\trule: cssRule,\r\n\t\t\tproperty: cssProp\r\n\t\t};\r\n\t}\r\n\t\r\n\t// XXX register expand abbreviation handler\r\n\t/**\r\n\t * @param {IEmmetEditor} editor\r\n\t * @param {String} syntax\r\n\t * @param {String} profile\r\n\t */\r\n\trequire('expandAbbreviation').addHandler(function(editor, syntax, profile) {\r\n\t\tvar info = require('editorUtils').outputInfo(editor, syntax, profile);\r\n\t\tif (!_.include(cssSyntaxes, info.syntax))\r\n\t\t\treturn false;\r\n\t\t\r\n\t\t// let's see if we are expanding gradient definition\r\n\t\tvar caret = editor.getCaretPos();\r\n\t\tvar content = info.content;\r\n\t\tvar css = findGradientFromPosition(content, caret);\r\n\t\t\r\n\t\tif (css.property) {\r\n\t\t\t// make sure that caret is inside property value with gradient \r\n\t\t\t// definition\r\n\t\t\tvar g = findGradient(css.property);\r\n\t\t\tif (g) {\r\n\t\t\t\tvar ruleStart = css.rule.options.offset || 0;\r\n\t\t\t\tvar ruleEnd = ruleStart + css.rule.toString().length;\r\n\t\t\t\t\r\n\t\t\t\t// Handle special case:\r\n\t\t\t\t// user wrote gradient definition between existing CSS \r\n\t\t\t\t// properties and did not finished it with semicolon.\r\n\t\t\t\t// In this case, we have semicolon right after gradient \r\n\t\t\t\t// definition and re-parse rule again\r\n\t\t\t\tif (/[\\n\\r]/.test(css.property.value())) {\r\n\t\t\t\t\t// insert semicolon at the end of gradient definition\r\n\t\t\t\t\tvar insertPos = css.property.valueRange(true).start + g.valueRange.end;\r\n\t\t\t\t\tcontent = require('utils').replaceSubstring(content, ';', insertPos);\r\n\t\t\t\t\tvar newCss = findGradientFromPosition(content, caret);\r\n\t\t\t\t\tif (newCss.property) {\r\n\t\t\t\t\t\tg = findGradient(newCss.property);\r\n\t\t\t\t\t\tcss = newCss;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// make sure current property has terminating semicolon\r\n\t\t\t\tcss.property.end(';');\r\n\t\t\t\t\r\n\t\t\t\t// resolve CSS property name\r\n\t\t\t\tvar resolvedName = resolvePropertyName(css.property.name(), syntax);\r\n\t\t\t\tif (resolvedName) {\r\n\t\t\t\t\tcss.property.name(resolvedName);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tpasteGradient(css.property, g.gradient, g.valueRange);\r\n\t\t\t\teditor.replaceContent(css.rule.toString(), ruleStart, ruleEnd, true);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn expandGradientOutsideValue(editor, syntax);\r\n\t});\r\n\t\r\n\t// XXX register \"Reflect CSS Value\" action delegate\r\n\t/**\r\n\t * @param {EditElement} property\r\n\t */\r\n\trequire('reflectCSSValue').addHandler(function(property) {\r\n\t\tvar utils = require('utils');\r\n\t\t\r\n\t\tvar g = findGradient(property);\r\n\t\tif (!g)\r\n\t\t\treturn false;\r\n\t\t\r\n\t\tvar value = property.value();\r\n\t\tvar val = function(v) {\r\n\t\t\treturn utils.replaceSubstring(value, v, g.valueRange);\r\n\t\t};\r\n\t\t\r\n\t\t// reflect value for properties with the same name\r\n\t\t_.each(property.parent.getAll(getPrefixedNames(property.name())), function(prop) {\r\n\t\t\tif (prop === property)\r\n\t\t\t\treturn;\r\n\t\t\t\r\n\t\t\t// check if property value starts with gradient definition\r\n\t\t\tvar m = prop.value().match(/^\\s*(\\-([a-z]+)\\-)?linear\\-gradient/);\r\n\t\t\tif (m) {\r\n\t\t\t\tprop.value(val(module.toString(g.gradient, m[2] || '')));\r\n\t\t\t} else if (m = prop.value().match(/\\s*\\-webkit\\-gradient/)) {\r\n\t\t\t\t// old webkit gradient definition\r\n\t\t\t\tprop.value(val(module.oldWebkitLinearGradient(g.gradient)));\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn true;\r\n\t});\r\n\t\r\n\treturn module = {\r\n\t\t/**\r\n\t\t * Parses gradient definition\r\n\t\t * @param {String} gradient\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tparse: function(gradient) {\r\n\t\t\tvar result = null;\r\n\t\t\trequire('utils').trim(gradient).replace(/^([\\w\\-]+)\\((.+?)\\)$/, function(str, type, definition) {\r\n\t\t\t\t// remove vendor prefix\r\n\t\t\t\ttype = type.toLowerCase().replace(/^\\-[a-z]+\\-/, '');\r\n\t\t\t\tif (type == 'linear-gradient' || type == 'lg') {\r\n\t\t\t\t\tresult = parseLinearGradient(definition);\r\n\t\t\t\t\treturn '';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn str;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Produces linear gradient definition used in early Webkit \r\n\t\t * implementations\r\n\t\t * @param {Object} gradient Parsed gradient\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\toldWebkitLinearGradient: function(gradient) {\r\n\t\t\tif (_.isString(gradient))\r\n\t\t\t\tgradient = this.parse(gradient);\r\n\t\t\t\r\n\t\t\tif (!gradient)\r\n\t\t\t\treturn null;\r\n\t\t\t\r\n\t\t\tvar colorStops = _.map(gradient.colorStops, _.clone);\r\n\t\t\t\r\n\t\t\t// normalize color-stops position\r\n\t\t\t_.each(colorStops, function(cs) {\r\n\t\t\t\tif (!('position' in cs)) // implied position\r\n\t\t\t\t\treturn;\r\n\t\t\t\t\r\n\t\t\t\tif (~cs.position.indexOf('.') || cs.unit == '%') {\r\n\t\t\t\t\tcs.position = parseFloat(cs.position) / (cs.unit == '%' ? 100 : 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow \"Can't convert color stop '\" + (cs.position + (cs.unit || '')) + \"'\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tfillImpliedPositions(colorStops);\r\n\t\t\t\r\n\t\t\t// transform color-stops into string representation\r\n\t\t\tcolorStops = _.map(colorStops, function(cs, i) {\r\n\t\t\t\tif (!cs.position && !i)\r\n\t\t\t\t\treturn 'from(' + cs.color + ')';\r\n\t\t\t\t\r\n\t\t\t\tif (cs.position == 1 && i == colorStops.length - 1)\r\n\t\t\t\t\treturn 'to(' + cs.color + ')';\r\n\t\t\t\t\r\n\t\t\t\treturn 'color-stop(' + (cs.position.toFixed(2).replace(/\\.?0+$/, '')) + ', ' + cs.color + ')';\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn '-webkit-gradient(linear, ' \r\n\t\t\t\t+ oldWebkitDirection(gradient.direction)\r\n\t\t\t\t+ ', '\r\n\t\t\t\t+ colorStops.join(', ')\r\n\t\t\t\t+ ')';\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns string representation of parsed gradient\r\n\t\t * @param {Object} gradient Parsed gradient\r\n\t\t * @param {String} prefix Vendor prefix\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\ttoString: function(gradient, prefix) {\r\n\t\t\tif (gradient.type == 'linear') {\r\n\t\t\t\tvar fn = (prefix ? '-' + prefix + '-' : '') + 'linear-gradient';\r\n\t\t\t\t\r\n\t\t\t\t// transform color-stops\r\n\t\t\t\tvar colorStops = _.map(gradient.colorStops, function(cs) {\r\n\t\t\t\t\treturn cs.color + ('position' in cs \r\n\t\t\t\t\t\t\t? ' ' + cs.position + (cs.unit || '')\r\n\t\t\t\t\t\t\t: '');\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tif (gradient.direction \r\n\t\t\t\t\t\t&& (!prefs.get('css.gradient.omitDefaultDirection') \r\n\t\t\t\t\t\t|| !_.include(defaultLinearDirections, gradient.direction))) {\r\n\t\t\t\t\tcolorStops.unshift(gradient.direction);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn fn + '(' + colorStops.join(', ') + ')';\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n});/**\r\n * Module adds support for generators: a regexp-based abbreviation resolver \r\n * that can produce custom output.\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\t/** @type HandlerList */\r\n\tvar generators = require('handlerList').create();\r\n\tvar resources = require('resources');\r\n\t\r\n\t_.extend(resources, {\r\n\t\t/**\r\n\t\t * Add generator. A generator function <code>fn</code> will be called \r\n\t\t * only if current abbreviation matches <code>regexp</code> regular \r\n\t\t * expression and this function should return <code>null</code> if\r\n\t\t * abbreviation cannot be resolved\r\n\t\t * @param {RegExp} regexp Regular expression for abbreviation element name\r\n\t\t * @param {Function} fn Resolver function\r\n\t\t * @param {Object} options Options list as described in \r\n\t\t * {@link HandlerList#add()} method\r\n\t\t */\r\n\t\taddGenerator: function(regexp, fn, options) {\r\n\t\t\tif (_.isString(regexp))\r\n\t\t\t\tregexp = new RegExp(regexp);\r\n\t\t\t\r\n\t\t\tgenerators.add(function(node, syntax) {\r\n\t\t\t\tvar m;\r\n\t\t\t\tif ((m = regexp.exec(node.name()))) {\r\n\t\t\t\t\treturn fn(m, node, syntax);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn null;\r\n\t\t\t}, options);\r\n\t\t}\r\n\t});\r\n\t\r\n\tresources.addResolver(function(node, syntax) {\r\n\t\treturn generators.exec(null, _.toArray(arguments));\r\n\t});\r\n});/**\r\n * Module for resolving tag names: returns best matched tag name for child\r\n * element based on passed parent's tag name. Also provides utility function\r\n * for element type detection (inline, block-level, empty)\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.define('tagName', function(require, _) {\r\n\tvar elementTypes = {\r\n//\t\tempty: 'area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed,keygen,command'.split(','),\r\n\t\tempty: [],\r\n\t\tblockLevel: 'address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,link,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul,h1,h2,h3,h4,h5,h6'.split(','),\r\n\t\tinlineLevel: 'a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,select,small,span,strike,strong,sub,sup,textarea,tt,u,var'.split(',')\r\n\t};\r\n\t\r\n\tvar elementMap = {\r\n\t\t'p': 'span',\r\n\t\t'ul': 'li',\r\n\t\t'ol': 'li',\r\n\t\t'table': 'tr',\r\n\t\t'tr': 'td',\r\n\t\t'tbody': 'tr',\r\n\t\t'thead': 'tr',\r\n\t\t'tfoot': 'tr',\r\n\t\t'colgroup': 'col',\r\n\t\t'select': 'option',\r\n\t\t'optgroup': 'option',\r\n\t\t'audio': 'source',\r\n\t\t'video': 'source',\r\n\t\t'object': 'param',\r\n\t\t'map': 'area'\r\n\t};\r\n\t\r\n\treturn {\r\n\t\t/**\r\n\t\t * Returns best matched child element name for passed parent's\r\n\t\t * tag name\r\n\t\t * @param {String} name\r\n\t\t * @returns {String}\r\n\t\t * @memberOf tagName\r\n\t\t */\r\n\t\tresolve: function(name) {\r\n\t\t\tname = (name || '').toLowerCase();\r\n\t\t\t\r\n\t\t\tif (name in elementMap)\r\n\t\t\t\treturn this.getMapping(name);\r\n\t\t\t\r\n\t\t\tif (this.isInlineLevel(name))\r\n\t\t\t\treturn 'span';\r\n\t\t\t\r\n\t\t\treturn 'div';\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns mapped child element name for passed parent's name \r\n\t\t * @param {String} name\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tgetMapping: function(name) {\r\n\t\t\treturn elementMap[name.toLowerCase()];\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if passed element name belongs to inline-level element\r\n\t\t * @param {String} name\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisInlineLevel: function(name) {\r\n\t\t\treturn this.isTypeOf(name, 'inlineLevel');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if passed element belongs to block-level element.\r\n\t\t * For better matching of unknown elements (for XML, for example), \r\n\t\t * you should use <code>!this.isInlineLevel(name)</code>\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisBlockLevel: function(name) {\r\n\t\t\treturn this.isTypeOf(name, 'blockLevel');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if passed element is void (i.e. should not have closing tag).\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisEmptyElement: function(name) {\r\n\t\t\treturn this.isTypeOf(name, 'empty');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Generic function for testing if element name belongs to specified\r\n\t\t * elements collection\r\n\t\t * @param {String} name Element name\r\n\t\t * @param {String} type Collection name\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tisTypeOf: function(name, type) {\r\n\t\t\treturn _.include(elementTypes[type], name);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Adds new parent–child mapping\r\n\t\t * @param {String} parent\r\n\t\t * @param {String} child\r\n\t\t */\r\n\t\taddMapping: function(parent, child) {\r\n\t\t\telementMap[parent] = child;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes parent-child mapping\r\n\t\t */\r\n\t\tremoveMapping: function(parent) {\r\n\t\t\tif (parent in elementMap)\r\n\t\t\t\tdelete elementMap[parent];\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Adds new element into collection\r\n\t\t * @param {String} name Element name\r\n\t\t * @param {String} collection Collection name\r\n\t\t */\r\n\t\taddElementToCollection: function(name, collection) {\r\n\t\t\tif (!elementTypes[collection])\r\n\t\t\t\telementTypes[collection] = [];\r\n\t\t\t\r\n\t\t\tvar col = this.getCollection(collection);\r\n\t\t\tif (!_.include(col, name))\r\n\t\t\t\tcol.push(name);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes element name from specified collection\r\n\t\t * @param {String} name Element name\r\n\t\t * @param {String} collection Collection name\r\n\t\t * @returns\r\n\t\t */\r\n\t\tremoveElementFromCollection: function(name, collection) {\r\n\t\t\tif (collection in elementTypes) {\r\n\t\t\t\telementTypes[collection] = _.without(this.getCollection(collection), name);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns elements name collection\r\n\t\t * @param {String} name Collection name\r\n\t\t * @returns {Array}\r\n\t\t */\r\n\t\tgetCollection: function(name) {\r\n\t\t\treturn elementTypes[name];\r\n\t\t}\r\n\t};\r\n});/**\r\n * Filter for aiding of writing elements with complex class names as described\r\n * in Yandex's BEM (Block, Element, Modifier) methodology. This filter will\r\n * automatically inherit block and element names from parent elements and insert\r\n * them into child element classes\r\n * @memberOf __bemFilterDefine\r\n * @constructor\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\tvar prefs = require('preferences');\r\n\tprefs.define('bem.elementSeparator', '__', 'Class name’s element separator.');\r\n\tprefs.define('bem.modifierSeparator', '_', 'Class name’s modifier separator.');\r\n\tprefs.define('bem.shortElementPrefix', '-', \r\n\t\t\t'Symbol for describing short “block-element” notation. Class names '\r\n\t\t\t+ 'prefixed with this symbol will be treated as element name for parent‘s '\r\n\t\t\t+ 'block name. Each symbol instance traverses one level up in parsed ' \r\n\t\t\t+ 'tree for block name lookup. Empty value will disable short notation.');\r\n\t\r\n\tvar shouldRunHtmlFilter = false;\r\n\t\r\n\tfunction getSeparators() {\r\n\t\treturn {\r\n\t\t\telement: prefs.get('bem.elementSeparator'),\r\n\t\t\tmodifier: prefs.get('bem.modifierSeparator')\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {AbbreviationNode} item\r\n\t */\r\n\tfunction bemParse(item) {\r\n\t\tif (require('abbreviationUtils').isSnippet(item))\r\n\t\t\treturn item;\r\n\t\t\r\n\t\t// save BEM stuff in cache for faster lookups\r\n\t\titem.__bem = {\r\n\t\t\tblock: '',\r\n\t\t\telement: '',\r\n\t\t\tmodifier: ''\r\n\t\t};\r\n\t\t\r\n\t\tvar classNames = normalizeClassName(item.attribute('class')).split(' ');\r\n\t\t\r\n\t\t// guess best match for block name\r\n\t\tvar reBlockName = /^[a-z]\\-/i;\r\n\t\titem.__bem.block = _.find(classNames, function(name) {\r\n\t\t\treturn reBlockName.test(name);\r\n\t\t});\r\n\t\t\r\n\t\t// guessing doesn't worked, pick first class name as block name\r\n\t\tif (!item.__bem.block) {\r\n\t\t\treBlockName = /^[a-z]/i;\r\n\t\t\titem.__bem.block = _.find(classNames, function(name) {\r\n\t\t\t\treturn reBlockName.test(name);\r\n\t\t\t}) || '';\r\n\t\t}\r\n\t\t\r\n\t\tclassNames = _.chain(classNames)\r\n\t\t\t.map(function(name) {return processClassName(name, item);})\r\n\t\t\t.flatten()\r\n\t\t\t.uniq()\r\n\t\t\t.value()\r\n\t\t\t.join(' ');\r\n\t\t\r\n\t\tif (classNames)\r\n\t\t\titem.attribute('class', classNames);\r\n\t\t\r\n\t\treturn item;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {String} className\r\n\t * @returns {String}\r\n\t */\r\n\tfunction normalizeClassName(className) {\r\n\t\tvar utils = require('utils');\r\n\t\tclassName = (' ' + (className || '') + ' ').replace(/\\s+/g, ' ');\r\n\t\t\r\n\t\tvar shortSymbol = prefs.get('bem.shortElementPrefix');\r\n\t\tif (shortSymbol) {\r\n\t\t\tvar re = new RegExp('\\\\s(' + utils.escapeForRegexp(shortSymbol) + '+)', 'g');\r\n\t\t\tclassName = className.replace(re, function(str, p1) {\r\n\t\t\t\treturn ' ' + utils.repeatString(getSeparators().element, p1.length);\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn utils.trim(className);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Processes class name\r\n\t * @param {String} name Class name item to process\r\n\t * @param {AbbreviationNode} item Host node for provided class name\r\n\t * @returns Processed class name. May return <code>Array</code> of\r\n\t * class names \r\n\t */\r\n\tfunction processClassName(name, item) {\r\n\t\tname = transformClassName(name, item, 'element');\r\n\t\tname = transformClassName(name, item, 'modifier');\r\n\t\t\r\n\t\t// expand class name\r\n\t\t// possible values:\r\n\t\t// * block__element\r\n\t\t// * block__element_modifier\r\n\t\t// * block__element_modifier1_modifier2\r\n\t\t// * block_modifier\r\n\t\tvar block = '', element = '', modifier = '';\r\n\t\tvar separators = getSeparators();\r\n\t\tif (~name.indexOf(separators.element)) {\r\n\t\t\tvar blockElem = name.split(separators.element);\r\n\t\t\tvar elemModifiers = blockElem[1].split(separators.modifier);\r\n\t\t\t\r\n\t\t\tblock = blockElem[0];\r\n\t\t\telement = elemModifiers.shift();\r\n\t\t\tmodifier = elemModifiers.join(separators.modifier);\r\n\t\t} else if (~name.indexOf(separators.modifier)) {\r\n\t\t\tvar blockModifiers = name.split(separators.modifier);\r\n\t\t\t\r\n\t\t\tblock = blockModifiers.shift();\r\n\t\t\tmodifier = blockModifiers.join(separators.modifier);\r\n\t\t}\r\n\t\t\r\n\t\tif (block || element || modifier) {\r\n\t\t\tif (!block) {\r\n\t\t\t\tblock = item.__bem.block;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// inherit parent bem element, if exists\r\n//\t\t\tif (item.parent && item.parent.__bem && item.parent.__bem.element)\r\n//\t\t\t\telement = item.parent.__bem.element + separators.element + element;\r\n\t\t\t\r\n\t\t\t// produce multiple classes\r\n\t\t\tvar prefix = block;\r\n\t\t\tvar result = [];\r\n\t\t\t\r\n\t\t\tif (element) {\r\n\t\t\t\tprefix += separators.element + element;\r\n\t\t\t\tresult.push(prefix);\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(prefix);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (modifier) {\r\n\t\t\t\tresult.push(prefix + separators.modifier + modifier);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\titem.__bem.block = block;\r\n\t\t\titem.__bem.element = element;\r\n\t\t\titem.__bem.modifier = modifier;\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\t// ...otherwise, return processed or original class name\r\n\t\treturn name;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Low-level function to transform user-typed class name into full BEM class\r\n\t * @param {String} name Class name item to process\r\n\t * @param {AbbreviationNode} item Host node for provided class name\r\n\t * @param {String} entityType Type of entity to be tried to transform \r\n\t * ('element' or 'modifier')\r\n\t * @returns {String} Processed class name or original one if it can't be\r\n\t * transformed\r\n\t */\r\n\tfunction transformClassName(name, item, entityType) {\r\n\t\tvar separators = getSeparators();\r\n\t\tvar reSep = new RegExp('^(' + separators[entityType] + ')+', 'g');\r\n\t\tif (reSep.test(name)) {\r\n\t\t\tvar depth = 0; // parent lookup depth\r\n\t\t\tvar cleanName = name.replace(reSep, function(str, p1) {\r\n\t\t\t\tdepth = str.length / separators[entityType].length;\r\n\t\t\t\treturn '';\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// find donor element\r\n\t\t\tvar donor = item;\r\n\t\t\twhile (donor.parent && depth--) {\r\n\t\t\t\tdonor = donor.parent;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!donor || !donor.__bem)\r\n\t\t\t\tdonor = item;\r\n\t\t\t\r\n\t\t\tif (donor && donor.__bem) {\r\n\t\t\t\tvar prefix = donor.__bem.block;\r\n\t\t\t\t\r\n\t\t\t\t// decide if we should inherit element name\r\n//\t\t\t\tif (entityType == 'element') {\r\n//\t\t\t\t\tvar curElem = cleanName.split(separators.modifier, 1)[0];\r\n//\t\t\t\t\tif (donor.__bem.element && donor.__bem.element != curElem)\r\n//\t\t\t\t\t\tprefix += separators.element + donor.__bem.element;\r\n//\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (entityType == 'modifier' &&  donor.__bem.element)\r\n\t\t\t\t\tprefix += separators.element + donor.__bem.element;\r\n\t\t\t\t\r\n\t\t\t\treturn prefix + separators[entityType] + cleanName;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn name;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Recursive function for processing tags, which extends class names \r\n\t * according to BEM specs: http://bem.github.com/bem-method/pages/beginning/beginning.ru.html\r\n\t * <br><br>\r\n\t * It does several things:<br>\r\n\t * <ul>\r\n\t * <li>Expands complex class name (according to BEM symbol semantics):\r\n\t * .block__elem_modifier → .block.block__elem.block__elem_modifier\r\n\t * </li>\r\n\t * <li>Inherits block name on child elements: \r\n\t * .b-block > .__el > .__el → .b-block > .b-block__el > .b-block__el__el\r\n\t * </li>\r\n\t * <li>Treats first dash symbol as '__'</li>\r\n\t * <li>Double underscore (or typographic '–') is also treated as an element \r\n\t * level lookup, e.g. ____el will search for element definition in parent’s \r\n\t * parent element:\r\n\t * .b-block > .__el1 > .____el2 → .b-block > .b-block__el1 > .b-block__el2\r\n\t * </li>\r\n\t * </ul>\r\n\t * \r\n\t * @param {AbbreviationNode} tree\r\n\t * @param {Object} profile\r\n\t */\r\n\tfunction process(tree, profile) {\r\n\t\tif (tree.name)\r\n\t\t\tbemParse(tree, profile);\r\n\t\t\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\t_.each(tree.children, function(item) {\r\n\t\t\tprocess(item, profile);\r\n\t\t\tif (!abbrUtils.isSnippet(item) && item.start)\r\n\t\t\t\tshouldRunHtmlFilter = true;\r\n\t\t});\r\n\t\t\r\n\t\treturn tree;\r\n\t};\r\n\t\r\n\trequire('filters').add('bem', function(tree, profile) {\r\n\t\tshouldRunHtmlFilter = false;\r\n\t\ttree = process(tree, profile);\r\n\t\t// in case 'bem' filter is applied after 'html' filter: run it again\r\n\t\t// to update output\r\n\t\tif (shouldRunHtmlFilter) {\r\n\t\t\ttree = require('filters').apply(tree, 'html', profile);\r\n\t\t}\r\n\t\t\r\n\t\treturn tree;\r\n\t});\r\n});\r\n\r\n/**\r\n * Comment important tags (with 'id' and 'class' attributes)\r\n * @author Sergey Chikuyonok (serge.che@gmail.com)\r\n * @link http://chikuyonok.ru\r\n * @constructor\r\n * @memberOf __commentFilterDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\t// define some preferences\r\n\t/** @type emmet.preferences */\r\n\tvar prefs = require('preferences');\r\n\t\r\n\tprefs.define('filter.commentAfter', \r\n\t\t\t'\\n<!-- /<%= attr(\"id\", \"#\") %><%= attr(\"class\", \".\") %> -->',\r\n\t\t\t'A definition of comment that should be placed <i>after</i> matched '\r\n\t\t\t+ 'element when <code>comment</code> filter is applied. This definition '\r\n\t\t\t+ 'is an ERB-style template passed to <code>_.template()</code> '\r\n\t\t\t+ 'function (see Underscore.js docs for details). In template context, '\r\n\t\t\t+ 'the following properties and functions are availabe:\\n'\r\n\t\t\t+ '<ul>'\r\n\t\t\t\r\n\t\t\t+ '<li><code>attr(name, before, after)</code> – a function that outputs' \r\n\t\t\t+ 'specified attribute value concatenated with <code>before</code> ' \r\n\t\t\t+ 'and <code>after</code> strings. If attribute doesn\\'t exists, the ' \r\n\t\t\t+ 'empty string will be returned.</li>'\r\n\t\t\t\r\n\t\t\t+ '<li><code>node</code> – current node (instance of <code>AbbreviationNode</code>)</li>'\r\n\t\t\t\r\n\t\t\t+ '<li><code>name</code> – name of current tag</li>'\r\n\t\t\t\r\n\t\t\t+ '<li><code>padding</code> – current string padding, can be used ' \r\n\t\t\t+ 'for formatting</li>'\r\n\t\t\t\r\n\t\t\t+'</ul>');\r\n\t\r\n\tprefs.define('filter.commentBefore', \r\n\t\t\t'',\r\n\t\t\t'A definition of comment that should be placed <i>before</i> matched '\r\n\t\t\t+ 'element when <code>comment</code> filter is applied. '\r\n\t\t\t+ 'For more info, read description of <code>filter.commentAfter</code> '\r\n\t\t\t+ 'property');\r\n\t\r\n\tprefs.define('filter.commentTrigger', 'id, class',\r\n\t\t\t'A comma-separated list of attribute names that should exist in abbreviatoin '\r\n\t\t\t+ 'where comment should be added. If you wish to add comment for '\r\n\t\t\t+ 'every element, set this option to <code>*</code>');\r\n\t\r\n\t/**\r\n\t * Add comments to tag\r\n\t * @param {AbbreviationNode} node\r\n\t */\r\n\tfunction addComments(node, templateBefore, templateAfter) {\r\n\t\tvar utils = require('utils');\r\n\t\t\r\n\t\t// check if comments should be added\r\n\t\tvar trigger = prefs.get('filter.commentTrigger');\r\n\t\tif (trigger != '*') {\r\n\t\t\tvar shouldAdd = _.find(trigger.split(','), function(name) {\r\n\t\t\t\treturn !!node.attribute(utils.trim(name));\r\n\t\t\t});\r\n\t\t\tif (!shouldAdd) return;\r\n\t\t}\r\n\t\t\r\n\t\tvar ctx = {\r\n\t\t\tnode: node,\r\n\t\t\tname: node.name(),\r\n\t\t\tpadding: node.parent ? node.parent.padding : '',\r\n\t\t\tattr: function(name, before, after) {\r\n\t\t\t\tvar attr = node.attribute(name);\r\n\t\t\t\tif (attr) {\r\n\t\t\t\t\treturn (before || '') + attr + (after || '');\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tvar nodeBefore = utils.normalizeNewline(templateBefore ? templateBefore(ctx) : '');\r\n\t\tvar nodeAfter = utils.normalizeNewline(templateAfter ? templateAfter(ctx) : '');\r\n\t\t\r\n\t\tnode.start = node.start.replace(/</, nodeBefore + '<');\r\n\t\tnode.end = node.end.replace(/>/, '>' + nodeAfter);\r\n\t}\r\n\t\r\n\tfunction process(tree, before, after) {\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\t_.each(tree.children, function(item) {\r\n\t\t\tif (abbrUtils.isBlock(item))\r\n\t\t\t\taddComments(item, before, after);\r\n\t\t\t\r\n\t\t\tprocess(item, before, after);\r\n\t\t});\r\n\t\t\t\r\n\t\treturn tree;\r\n\t}\r\n\t\r\n\trequire('filters').add('c', function(tree) {\r\n\t\tvar templateBefore = _.template(prefs.get('filter.commentBefore'));\r\n\t\tvar templateAfter = _.template(prefs.get('filter.commentAfter'));\r\n\t\t\r\n\t\treturn process(tree, templateBefore, templateAfter);\r\n\t});\r\n});\r\n/**\r\n * Filter for escaping unsafe XML characters: <, >, &\r\n * @author Sergey Chikuyonok (serge.che@gmail.com)\r\n * @link http://chikuyonok.ru\r\n */\r\nemmet.exec(function(require, _) {\r\n\tvar charMap = {\r\n\t\t'<': '&lt;',\r\n\t\t'>': '&gt;',\r\n\t\t'&': '&amp;'\r\n\t};\r\n\t\r\n\tfunction escapeChars(str) {\r\n\t\treturn str.replace(/([<>&])/g, function(str, p1){\r\n\t\t\treturn charMap[p1];\r\n\t\t});\r\n\t}\r\n\t\r\n\trequire('filters').add('e', function process(tree) {\r\n\t\t_.each(tree.children, function(item) {\r\n\t\t\titem.start = escapeChars(item.start);\r\n\t\t\titem.end = escapeChars(item.end);\r\n\t\t\titem.content = escapeChars(item.content);\r\n\t\t\tprocess(item);\r\n\t\t});\r\n\t\t\r\n\t\treturn tree;\r\n\t});\r\n});/**\r\n * Generic formatting filter: creates proper indentation for each tree node,\r\n * placing \"%s\" placeholder where the actual output should be. You can use\r\n * this filter to preformat tree and then replace %s placeholder to whatever you\r\n * need. This filter should't be called directly from editor as a part \r\n * of abbreviation.\r\n * @author Sergey Chikuyonok (serge.che@gmail.com)\r\n * @link http://chikuyonok.ru\r\n * @constructor\r\n * @memberOf __formatFilterDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _){\r\n\tvar placeholder = '%s';\r\n\t\r\n\t/** @type preferences */\r\n\tvar prefs = require('preferences');\r\n\tprefs.define('format.noIndentTags', 'html', \r\n\t\t\t'A comma-separated list of tag names that should not get inner indentation.');\r\n\t\r\n\tprefs.define('format.forceIndentationForTags', 'body', \r\n\t\t'A comma-separated list of tag names that should <em>always</em> get inner indentation.');\r\n\t\r\n\t/**\r\n\t * Get indentation for given node\r\n\t * @param {AbbreviationNode} node\r\n\t * @returns {String}\r\n\t */\r\n\tfunction getIndentation(node) {\r\n\t\tif (_.include(prefs.getArray('format.noIndentTags') || [], node.name())) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\t\r\n\t\treturn require('resources').getVariable('indentation');\r\n\t}\r\n\t\r\n\t/**\r\n\t * Test if passed node has block-level sibling element\r\n\t * @param {AbbreviationNode} item\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction hasBlockSibling(item) {\r\n\t\treturn item.parent && require('abbreviationUtils').hasBlockChildren(item.parent);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Test if passed item is very first child in parsed tree\r\n\t * @param {AbbreviationNode} item\r\n\t */\r\n\tfunction isVeryFirstChild(item) {\r\n\t\treturn item.parent && !item.parent.parent && !item.index();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if a newline should be added before element\r\n\t * @param {AbbreviationNode} node\r\n\t * @param {OutputProfile} profile\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction shouldAddLineBreak(node, profile) {\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\tif (profile.tag_nl === true || abbrUtils.isBlock(node))\r\n\t\t\treturn true;\r\n\t\t\r\n\t\tif (!node.parent || !profile.inline_break)\r\n\t\t\treturn false;\r\n\t\t\r\n\t\t// check if there are required amount of adjacent inline element\r\n\t\treturn shouldFormatInline(node.parent, profile);\r\n}\r\n\t\r\n\t/**\r\n\t * Need to add newline because <code>item</code> has too many inline children\r\n\t * @param {AbbreviationNode} node\r\n\t * @param {OutputProfile} profile\r\n\t */\r\n\tfunction shouldBreakChild(node, profile) {\r\n\t\t// we need to test only one child element, because \r\n\t\t// hasBlockChildren() method will do the rest\r\n\t\treturn node.children.length && shouldAddLineBreak(node.children[0], profile);\r\n\t}\r\n\t\r\n\tfunction shouldFormatInline(node, profile) {\r\n\t\tvar nodeCount = 0;\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\treturn !!_.find(node.children, function(child) {\r\n\t\t\tif (child.isTextNode() || !abbrUtils.isInline(child))\r\n\t\t\t\tnodeCount = 0;\r\n\t\t\telse if (abbrUtils.isInline(child))\r\n\t\t\t\tnodeCount++;\r\n\t\t\t\r\n\t\t\tif (nodeCount >= profile.inline_break)\r\n\t\t\t\treturn true;\r\n\t\t});\r\n\t}\r\n\t\r\n\tfunction isRoot(item) {\r\n\t\treturn !item.parent;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Processes element with matched resource of type <code>snippet</code>\r\n\t * @param {AbbreviationNode} item\r\n\t * @param {OutputProfile} profile\r\n\t * @param {Number} level Depth level\r\n\t */\r\n\tfunction processSnippet(item, profile, level) {\r\n\t\titem.start = item.end = '';\r\n\t\tif (!isVeryFirstChild(item) && profile.tag_nl !== false && shouldAddLineBreak(item, profile)) {\r\n\t\t\t// check if we’re not inside inline element\r\n\t\t\tif (isRoot(item.parent) || !require('abbreviationUtils').isInline(item.parent)) {\r\n\t\t\t\titem.start = require('utils').getNewline() + item.start;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn item;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if we should add line breaks inside inline element\r\n\t * @param {AbbreviationNode} node\r\n\t * @param {OutputProfile} profile\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction shouldBreakInsideInline(node, profile) {\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\tvar hasBlockElems = _.any(node.children, function(child) {\r\n\t\t\tif (abbrUtils.isSnippet(child))\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\treturn !abbrUtils.isInline(child);\r\n\t\t});\r\n\t\t\r\n\t\tif (!hasBlockElems) {\r\n\t\t\treturn shouldFormatInline(node, profile);\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Processes element with <code>tag</code> type\r\n\t * @param {AbbreviationNode} item\r\n\t * @param {OutputProfile} profile\r\n\t * @param {Number} level Depth level\r\n\t */\r\n\tfunction processTag(item, profile, level) {\r\n\t\titem.start = item.end = placeholder;\r\n\t\tvar utils = require('utils');\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\tvar isUnary = abbrUtils.isUnary(item);\r\n\t\tvar nl = utils.getNewline();\r\n\t\tvar indent = getIndentation(item);\r\n\t\t\t\r\n\t\t// formatting output\r\n\t\tif (profile.tag_nl !== false) {\r\n\t\t\tvar forceNl = profile.tag_nl === true && (profile.tag_nl_leaf || item.children.length);\r\n\t\t\tif (!forceNl) {\r\n\t\t\t\tforceNl = _.include(prefs.getArray('format.forceIndentationForTags') || [], item.name());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// formatting block-level elements\r\n\t\t\tif (!item.isTextNode()) {\r\n\t\t\t\tif (shouldAddLineBreak(item, profile)) {\r\n\t\t\t\t\t// - do not indent the very first element\r\n\t\t\t\t\t// - do not indent first child of a snippet\r\n\t\t\t\t\tif (!isVeryFirstChild(item) && (!abbrUtils.isSnippet(item.parent) || item.index()))\r\n\t\t\t\t\t\titem.start = nl + item.start;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tif (abbrUtils.hasBlockChildren(item) || shouldBreakChild(item, profile) || (forceNl && !isUnary))\r\n\t\t\t\t\t\titem.end = nl + item.end;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tif (abbrUtils.hasTagsInContent(item) || (forceNl && !item.children.length && !isUnary))\r\n\t\t\t\t\t\titem.start += nl + indent;\r\n\t\t\t\t} else if (abbrUtils.isInline(item) && hasBlockSibling(item) && !isVeryFirstChild(item)) {\r\n\t\t\t\t\titem.start = nl + item.start;\r\n\t\t\t\t} else if (abbrUtils.isInline(item) && shouldBreakInsideInline(item, profile)) {\r\n\t\t\t\t\titem.end = nl + item.end;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\titem.padding = indent;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn item;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Processes simplified tree, making it suitable for output as HTML structure\r\n\t * @param {AbbreviationNode} tree\r\n\t * @param {OutputProfile} profile\r\n\t * @param {Number} level Depth level\r\n\t */\r\n\trequire('filters').add('_format', function process(tree, profile, level) {\r\n\t\tlevel = level || 0;\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\t\r\n\t\t_.each(tree.children, function(item) {\r\n\t\t\tif (abbrUtils.isSnippet(item))\r\n\t\t\t\tprocessSnippet(item, profile, level);\r\n\t\t\telse\r\n\t\t\t\tprocessTag(item, profile, level);\r\n\t\t\t\r\n\t\t\tprocess(item, profile, level + 1);\r\n\t\t});\r\n\t\t\r\n\t\treturn tree;\r\n\t});\r\n});/**\r\n * Filter for producing HAML code from abbreviation.\r\n * @author Sergey Chikuyonok (serge.che@gmail.com)\r\n * @link http://chikuyonok.ru\r\n * @constructor\r\n * @memberOf __hamlFilterDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\tvar childToken = '${child}';\r\n\t\r\n\tfunction transformClassName(className) {\r\n\t\treturn require('utils').trim(className).replace(/\\s+/g, '.');\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates HAML attributes string from tag according to profile settings\r\n\t * @param {AbbreviationNode} tag\r\n\t * @param {Object} profile\r\n\t */\r\n\tfunction makeAttributesString(tag, profile) {\r\n\t\tvar attrs = '';\r\n\t\tvar otherAttrs = [];\r\n\t\tvar attrQuote = profile.attributeQuote();\r\n\t\tvar cursor = profile.cursor();\r\n\t\t\r\n\t\t_.each(tag.attributeList(), function(a) {\r\n\t\t\tvar attrName = profile.attributeName(a.name);\r\n\t\t\tswitch (attrName.toLowerCase()) {\r\n\t\t\t\t// use short notation for ID and CLASS attributes\r\n\t\t\t\tcase 'id':\r\n\t\t\t\t\tattrs += '#' + (a.value || cursor);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'class':\r\n\t\t\t\t\tattrs += '.' + transformClassName(a.value || cursor);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t// process other attributes\r\n\t\t\t\tdefault:\r\n\t\t\t\t\totherAttrs.push(':' +attrName + ' => ' + attrQuote + (a.value || cursor) + attrQuote);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (otherAttrs.length)\r\n\t\t\tattrs += '{' + otherAttrs.join(', ') + '}';\r\n\t\t\r\n\t\treturn attrs;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Test if passed node has block-level sibling element\r\n\t * @param {AbbreviationNode} item\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction hasBlockSibling(item) {\r\n\t\treturn item.parent && item.parent.hasBlockChildren();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Processes element with <code>tag</code> type\r\n\t * @param {AbbreviationNode} item\r\n\t * @param {OutputProfile} profile\r\n\t * @param {Number} level Depth level\r\n\t */\r\n\tfunction processTag(item, profile, level) {\r\n\t\tif (!item.parent)\r\n\t\t\t// looks like it's root element\r\n\t\t\treturn item;\r\n\t\t\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\tvar utils = require('utils');\r\n\t\t\r\n\t\tvar attrs = makeAttributesString(item, profile);\r\n\t\tvar cursor = profile.cursor();\r\n\t\tvar isUnary = abbrUtils.isUnary(item);\r\n\t\tvar selfClosing = profile.self_closing_tag && isUnary ? '/' : '';\r\n\t\tvar start= '';\r\n\t\t\t\r\n\t\t// define tag name\r\n\t\tvar tagName = '%' + profile.tagName(item.name());\r\n\t\tif (tagName.toLowerCase() == '%div' && attrs && attrs.indexOf('{') == -1)\r\n\t\t\t// omit div tag\r\n\t\t\ttagName = '';\r\n\t\t\t\r\n\t\titem.end = '';\r\n\t\tstart = tagName + attrs + selfClosing + ' ';\r\n\t\t\r\n\t\tvar placeholder = '%s';\r\n\t\t// We can't just replace placeholder with new value because\r\n\t\t// JavaScript will treat double $ character as a single one, assuming\r\n\t\t// we're using RegExp literal.\r\n\t\titem.start = utils.replaceSubstring(item.start, start, item.start.indexOf(placeholder), placeholder);\r\n\t\t\r\n\t\tif (!item.children.length && !isUnary)\r\n\t\t\titem.start += cursor;\r\n\t\t\r\n\t\treturn item;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Processes simplified tree, making it suitable for output as HTML structure\r\n\t * @param {AbbreviationNode} tree\r\n\t * @param {Object} profile\r\n\t * @param {Number} level Depth level\r\n\t */\r\n\trequire('filters').add('haml', function process(tree, profile, level) {\r\n\t\tlevel = level || 0;\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\t\r\n\t\tif (!level) {\r\n\t\t\ttree = require('filters').apply(tree, '_format', profile);\r\n\t\t}\r\n\t\t\r\n\t\t_.each(tree.children, function(item) {\r\n\t\t\tif (!abbrUtils.isSnippet(item))\r\n\t\t\t\tprocessTag(item, profile, level);\r\n\t\t\t\r\n\t\t\tprocess(item, profile, level + 1);\r\n\t\t});\r\n\t\t\r\n\t\treturn tree;\r\n\t});\r\n});/**\r\n * Filter that produces HTML tree\r\n * @author Sergey Chikuyonok (serge.che@gmail.com)\r\n * @link http://chikuyonok.ru\r\n * @constructor\r\n * @memberOf __htmlFilterDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\t/**\r\n\t * Creates HTML attributes string from tag according to profile settings\r\n\t * @param {AbbreviationNode} node\r\n\t * @param {OutputProfile} profile\r\n\t */\r\n\tfunction makeAttributesString(node, profile) {\r\n\t\tvar attrQuote = profile.attributeQuote();\r\n\t\tvar cursor = profile.cursor();\r\n\t\t\r\n\t\treturn _.map(node.attributeList(), function(a) {\r\n\t\t\tvar attrName = profile.attributeName(a.name);\r\n\t\t\treturn ' ' + attrName + '=' + attrQuote + (a.value || cursor) + attrQuote;\r\n\t\t}).join('');\r\n\t}\r\n\t\r\n\t/**\r\n\t * Processes element with <code>tag</code> type\r\n\t * @param {AbbreviationNode} item\r\n\t * @param {OutputProfile} profile\r\n\t * @param {Number} level Depth level\r\n\t */\r\n\tfunction processTag(item, profile, level) {\r\n\t\tif (!item.parent) // looks like it's root element\r\n\t\t\treturn item;\r\n\t\t\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\tvar utils = require('utils');\r\n\t\t\r\n\t\tvar attrs = makeAttributesString(item, profile); \r\n\t\tvar cursor = profile.cursor();\r\n\t\tvar isUnary = abbrUtils.isUnary(item);\r\n\t\tvar start= '';\r\n\t\tvar end = '';\r\n\t\t\t\r\n\t\t// define opening and closing tags\r\n\t\tif (!item.isTextNode()) {\r\n\t\t\tvar tagName = profile.tagName(item.name());\r\n\t\t\tif (isUnary) {\r\n\t\t\t\tstart = '<' + tagName + attrs + profile.selfClosing() + '>';\r\n\t\t\t\titem.end = '';\r\n\t\t\t} else {\r\n\t\t\t\tstart = '<' + tagName + attrs + '>';\r\n\t\t\t\tend = '</' + tagName + '>';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar placeholder = '%s';\r\n\t\t// We can't just replace placeholder with new value because\r\n\t\t// JavaScript will treat double $ character as a single one, assuming\r\n\t\t// we're using RegExp literal.\r\n\t\titem.start = utils.replaceSubstring(item.start, start, item.start.indexOf(placeholder), placeholder);\r\n\t\titem.end = utils.replaceSubstring(item.end, end, item.end.indexOf(placeholder), placeholder);\r\n\t\t\r\n\t\t// should we put caret placeholder after opening tag?\r\n\t\tif (\r\n\t\t\t\t!item.children.length \r\n\t\t\t\t&& !isUnary \r\n\t\t\t\t&& !~item.content.indexOf(cursor)\r\n\t\t\t\t&& !require('tabStops').extract(item.content).tabstops.length\r\n\t\t\t) {\r\n\t\t\titem.start += cursor;\r\n\t\t}\r\n\t\t\r\n\t\treturn item;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Processes simplified tree, making it suitable for output as HTML structure\r\n\t * @param {AbbreviationNode} tree\r\n\t * @param {Object} profile\r\n\t * @param {Number} level Depth level\r\n\t */\r\n\trequire('filters').add('html', function process(tree, profile, level) {\r\n\t\tlevel = level || 0;\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\t\r\n\t\tif (!level) {\r\n\t\t\ttree = require('filters').apply(tree, '_format', profile);\r\n\t\t}\r\n\t\t\r\n\t\t_.each(tree.children, function(item) {\r\n\t\t\tif (!abbrUtils.isSnippet(item))\r\n\t\t\t\tprocessTag(item, profile, level);\r\n\t\t\t\r\n\t\t\tprocess(item, profile, level + 1);\r\n\t\t});\r\n\t\t\r\n\t\treturn tree;\r\n\t});\r\n});/**\r\n * Output abbreviation on a single line (i.e. no line breaks)\r\n * @author Sergey Chikuyonok (serge.che@gmail.com)\r\n * @link http://chikuyonok.ru\r\n * @constructor\r\n * @memberOf __singleLineFilterDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\tvar rePad = /^\\s+/;\r\n\tvar reNl = /[\\n\\r]/g;\r\n\t\r\n\trequire('filters').add('s', function process(tree, profile, level) {\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\t\r\n\t\t_.each(tree.children, function(item) {\r\n\t\t\tif (!abbrUtils.isSnippet(item)) {\r\n\t\t\t\t// remove padding from item \r\n\t\t\t\titem.start = item.start.replace(rePad, '');\r\n\t\t\t\titem.end = item.end.replace(rePad, '');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// remove newlines \r\n\t\t\titem.start = item.start.replace(reNl, '');\r\n\t\t\titem.end = item.end.replace(reNl, '');\r\n\t\t\titem.content = item.content.replace(reNl, '');\r\n\t\t\t\r\n\t\t\tprocess(item);\r\n\t\t});\r\n\t\t\r\n\t\treturn tree;\r\n\t});\r\n});\r\n/**\r\n * Trim filter: removes characters at the beginning of the text\r\n * content that indicates lists: numbers, #, *, -, etc.\r\n * \r\n * Useful for wrapping lists with abbreviation.\r\n * \r\n * @author Sergey Chikuyonok (serge.che@gmail.com)\r\n * @link http://chikuyonok.ru\r\n * \r\n * @constructor\r\n * @memberOf __trimFilterDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\trequire('preferences').define('filter.trimRegexp', '[\\\\s|\\\\u00a0]*[\\\\d|#|\\\\-|\\*|\\\\u2022]+\\\\.?\\\\s*',\r\n\t\t\t'Regular expression used to remove list markers (numbers, dashes, ' \r\n\t\t\t+ 'bullets, etc.) in <code>t</code> (trim) filter. The trim filter '\r\n\t\t\t+ 'is useful for wrapping with abbreviation lists, pased from other ' \r\n\t\t\t+ 'documents (for example, Word documents).');\r\n\t\r\n\tfunction process(tree, re) {\r\n\t\t_.each(tree.children, function(item) {\r\n\t\t\tif (item.content)\r\n\t\t\t\titem.content = item.content.replace(re, '');\r\n\t\t\t\r\n\t\t\tprocess(item, re);\r\n\t\t});\r\n\t\t\r\n\t\treturn tree;\r\n\t}\r\n\t\r\n\trequire('filters').add('t', function(tree) {\r\n\t\tvar re = new RegExp(require('preferences').get('filter.trimRegexp'));\r\n\t\treturn process(tree, re);\r\n\t});\r\n});\r\n/**\r\n * Filter for trimming \"select\" attributes from some tags that contains\r\n * child elements\r\n * @author Sergey Chikuyonok (serge.che@gmail.com)\r\n * @link http://chikuyonok.ru\r\n * \r\n * @constructor\r\n * @memberOf __xslFilterDefine\r\n * @param {Function} require\r\n * @param {Underscore} _\r\n */\r\nemmet.exec(function(require, _) {\r\n\tvar tags = {\r\n\t\t'xsl:variable': 1,\r\n\t\t'xsl:with-param': 1\r\n\t};\r\n\t\r\n\t/**\r\n\t * Removes \"select\" attribute from node\r\n\t * @param {AbbreviationNode} node\r\n\t */\r\n\tfunction trimAttribute(node) {\r\n\t\tnode.start = node.start.replace(/\\s+select\\s*=\\s*(['\"]).*?\\1/, '');\r\n\t}\r\n\t\r\n\trequire('filters').add('xsl', function process(tree) {\r\n\t\tvar abbrUtils = require('abbreviationUtils');\r\n\t\t_.each(tree.children, function(item) {\r\n\t\t\tif (!abbrUtils.isSnippet(item)\r\n\t\t\t\t\t&& (item.name() || '').toLowerCase() in tags \r\n\t\t\t\t\t&& item.children.length)\r\n\t\t\t\ttrimAttribute(item);\r\n\t\t\tprocess(item);\r\n\t\t});\r\n\t\t\r\n\t\treturn tree;\r\n\t});\r\n});/**\r\n * \"Lorem ipsum\" text generator. Matches <code>lipsum(num)?</code> or \r\n * <code>lorem(num)?</code> abbreviation.\r\n * This code is based on Django's contribution: \r\n * https://code.djangoproject.com/browser/django/trunk/django/contrib/webdesign/lorem_ipsum.py\r\n * <br><br>\r\n * Examples to test:<br>\r\n * <code>lipsum</code> – generates 30 words text.<br>\r\n * <code>lipsum*6</code> – generates 6 paragraphs (autowrapped with &lt;p&gt; element) of text.<br>\r\n * <code>ol>lipsum10*5</code> — generates ordered list with 5 list items (autowrapped with &lt;li&gt; tag)\r\n * with text of 10 words on each line<br>\r\n * <code>span*3>lipsum20</code> – generates 3 paragraphs of 20-words text, each wrapped with &lt;span&gt; element .\r\n * Each paragraph phrase is unique   \r\n * @param {Function} require\r\n * @param {Underscore} _ \r\n * @constructor\r\n * @memberOf __loremIpsumGeneratorDefine\r\n */\r\nemmet.define('lorem', function(require, _) {\r\n\tvar langs = {\r\n\t\ten: {\r\n\t\t\tcommon: ['lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetur', 'adipisicing', 'elit'],\r\n\t\t\twords: ['exercitationem', 'perferendis', 'perspiciatis', 'laborum', 'eveniet',\r\n\t             'sunt', 'iure', 'nam', 'nobis', 'eum', 'cum', 'officiis', 'excepturi',\r\n\t             'odio', 'consectetur', 'quasi', 'aut', 'quisquam', 'vel', 'eligendi',\r\n\t             'itaque', 'non', 'odit', 'tempore', 'quaerat', 'dignissimos',\r\n\t             'facilis', 'neque', 'nihil', 'expedita', 'vitae', 'vero', 'ipsum',\r\n\t             'nisi', 'animi', 'cumque', 'pariatur', 'velit', 'modi', 'natus',\r\n\t             'iusto', 'eaque', 'sequi', 'illo', 'sed', 'ex', 'et', 'voluptatibus',\r\n\t             'tempora', 'veritatis', 'ratione', 'assumenda', 'incidunt', 'nostrum',\r\n\t             'placeat', 'aliquid', 'fuga', 'provident', 'praesentium', 'rem',\r\n\t             'necessitatibus', 'suscipit', 'adipisci', 'quidem', 'possimus',\r\n\t             'voluptas', 'debitis', 'sint', 'accusantium', 'unde', 'sapiente',\r\n\t             'voluptate', 'qui', 'aspernatur', 'laudantium', 'soluta', 'amet',\r\n\t             'quo', 'aliquam', 'saepe', 'culpa', 'libero', 'ipsa', 'dicta',\r\n\t             'reiciendis', 'nesciunt', 'doloribus', 'autem', 'impedit', 'minima',\r\n\t             'maiores', 'repudiandae', 'ipsam', 'obcaecati', 'ullam', 'enim',\r\n\t             'totam', 'delectus', 'ducimus', 'quis', 'voluptates', 'dolores',\r\n\t             'molestiae', 'harum', 'dolorem', 'quia', 'voluptatem', 'molestias',\r\n\t             'magni', 'distinctio', 'omnis', 'illum', 'dolorum', 'voluptatum', 'ea',\r\n\t             'quas', 'quam', 'corporis', 'quae', 'blanditiis', 'atque', 'deserunt',\r\n\t             'laboriosam', 'earum', 'consequuntur', 'hic', 'cupiditate',\r\n\t             'quibusdam', 'accusamus', 'ut', 'rerum', 'error', 'minus', 'eius',\r\n\t             'ab', 'ad', 'nemo', 'fugit', 'officia', 'at', 'in', 'id', 'quos',\r\n\t             'reprehenderit', 'numquam', 'iste', 'fugiat', 'sit', 'inventore',\r\n\t             'beatae', 'repellendus', 'magnam', 'recusandae', 'quod', 'explicabo',\r\n\t             'doloremque', 'aperiam', 'consequatur', 'asperiores', 'commodi',\r\n\t             'optio', 'dolor', 'labore', 'temporibus', 'repellat', 'veniam',\r\n\t             'architecto', 'est', 'esse', 'mollitia', 'nulla', 'a', 'similique',\r\n\t             'eos', 'alias', 'dolore', 'tenetur', 'deleniti', 'porro', 'facere',\r\n\t             'maxime', 'corrupti']\r\n\t\t},\r\n\t\tru: {\r\n\t\t\tcommon: ['далеко-далеко', 'за', 'словесными', 'горами', 'в стране', 'гласных', 'и согласных', 'живут', 'рыбные', 'тексты'],\r\n\t\t\twords: ['вдали', 'от всех', 'они', 'буквенных', 'домах', 'на берегу', 'семантика', \r\n\t\t            'большого', 'языкового', 'океана', 'маленький', 'ручеек', 'даль', \r\n\t\t            'журчит', 'по всей', 'обеспечивает', 'ее','всеми', 'необходимыми', \r\n\t\t            'правилами', 'эта', 'парадигматическая', 'страна', 'которой', 'жаренные', \r\n\t\t            'предложения', 'залетают', 'прямо', 'рот', 'даже', 'всемогущая', \r\n\t\t            'пунктуация', 'не', 'имеет', 'власти', 'над', 'рыбными', 'текстами', \r\n\t\t            'ведущими', 'безорфографичный', 'образ', 'жизни', 'однажды', 'одна', \r\n\t\t            'маленькая', 'строчка','рыбного', 'текста', 'имени', 'lorem', 'ipsum', \r\n\t\t            'решила', 'выйти', 'большой', 'мир', 'грамматики', 'великий', 'оксмокс', \r\n\t\t            'предупреждал', 'о', 'злых', 'запятых', 'диких', 'знаках', 'вопроса', \r\n\t\t            'коварных', 'точках', 'запятой', 'но', 'текст', 'дал', 'сбить', \r\n\t\t            'себя', 'толку', 'он', 'собрал', 'семь', 'своих', 'заглавных', 'букв', \r\n\t\t            'подпоясал', 'инициал', 'за', 'пояс', 'пустился', 'дорогу', \r\n\t\t            'взобравшись', 'первую', 'вершину', 'курсивных', 'гор', 'бросил', \r\n\t\t            'последний', 'взгляд', 'назад', 'силуэт', 'своего', 'родного', 'города', \r\n\t\t            'буквоград', 'заголовок', 'деревни', 'алфавит', 'подзаголовок', 'своего', \r\n\t\t            'переулка', 'грустный', 'реторический', 'вопрос', 'скатился', 'его', \r\n\t\t            'щеке', 'продолжил', 'свой', 'путь', 'дороге', 'встретил', 'рукопись', \r\n\t\t            'она', 'предупредила',  'моей', 'все', 'переписывается', 'несколько', \r\n\t\t            'раз', 'единственное', 'что', 'меня', 'осталось', 'это', 'приставка', \r\n\t\t            'возвращайся', 'ты', 'лучше', 'свою', 'безопасную', 'страну', 'послушавшись', \r\n\t\t            'рукописи', 'наш', 'продолжил', 'свой', 'путь', 'вскоре', 'ему', \r\n\t\t            'повстречался', 'коварный', 'составитель', 'рекламных', 'текстов', \r\n\t\t            'напоивший', 'языком', 'речью', 'заманивший', 'свое', 'агенство', \r\n\t\t            'которое', 'использовало', 'снова', 'снова', 'своих', 'проектах', \r\n\t\t            'если', 'переписали', 'то', 'живет', 'там', 'до', 'сих', 'пор']\r\n\t\t}\r\n\t};\r\n\r\n\tvar prefs = require('preferences');\r\n\tprefs.define('lorem.defaultLang', 'en');\r\n\r\n\t/**\r\n\t * @param {AbbreviationNode} tree\r\n\t * @param {Object} options\r\n\t */\r\n\trequire('abbreviationParser').addPreprocessor(function(tree, options) {\r\n\t\tvar re = /^(?:lorem|lipsum)([a-z]{2})?(\\d*)$/i, match;\r\n\t\t\r\n\t\t/** @param {AbbreviationNode} node */\r\n\t\ttree.findAll(function(node) {\r\n\t\t\tif (node._name && (match = node._name.match(re))) {\r\n\t\t\t\tvar wordCound = match[2] || 30;\r\n\t\t\t\tvar lang = match[1] || prefs.get('lorem.defaultLang') || 'en';\r\n\t\t\t\t\r\n\t\t\t\t// force node name resolving if node should be repeated\r\n\t\t\t\t// or contains attributes. In this case, node should be outputed\r\n\t\t\t\t// as tag, otherwise as text-only node\r\n\t\t\t\tnode._name = '';\r\n\t\t\t\tnode.data('forceNameResolving', node.isRepeating() || node.attributeList().length);\r\n\t\t\t\tnode.data('pasteOverwrites', true);\r\n\t\t\t\tnode.data('paste', function(i, content) {\r\n\t\t\t\t\treturn paragraph(lang, wordCound, !i);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\t\r\n\t/**\r\n\t * Returns random integer between <code>from</code> and <code>to</code> values\r\n\t * @param {Number} from\r\n\t * @param {Number} to\r\n\t * @returns {Number}\r\n\t */\r\n\tfunction randint(from, to) {\r\n\t\treturn Math.round(Math.random() * (to - from) + from);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {Array} arr\r\n\t * @param {Number} count\r\n\t * @returns {Array}\r\n\t */\r\n\tfunction sample(arr, count) {\r\n\t\tvar len = arr.length;\r\n\t\tvar iterations = Math.min(len, count);\r\n\t\tvar result = [];\r\n\t\twhile (result.length < iterations) {\r\n\t\t\tvar randIx = randint(0, len - 1);\r\n\t\t\tif (!_.include(result, randIx))\r\n\t\t\t\tresult.push(randIx);\r\n\t\t}\r\n\t\t\r\n\t\treturn _.map(result, function(ix) {\r\n\t\t\treturn arr[ix];\r\n\t\t});\r\n\t}\r\n\t\r\n\tfunction choice(val) {\r\n\t\tif (_.isString(val))\r\n\t\t\treturn val.charAt(randint(0, val.length - 1));\r\n\t\t\r\n\t\treturn val[randint(0, val.length - 1)];\r\n\t}\r\n\t\r\n\tfunction sentence(words, end) {\r\n\t\tif (words.length) {\r\n\t\t\twords[0] = words[0].charAt(0).toUpperCase() + words[0].substring(1);\r\n\t\t}\r\n\t\t\r\n\t\treturn words.join(' ') + (end || choice('?!...')); // more dots that question marks\r\n\t}\r\n\t\r\n\t/**\r\n\t * Insert commas at randomly selected words. This function modifies values\r\n\t * inside <code>words</code> array \r\n\t * @param {Array} words\r\n\t */\r\n\tfunction insertCommas(words) {\r\n\t\tvar len = words.length;\r\n\t\tvar totalCommas = 0;\r\n\t\t\r\n\t\tif (len > 3 && len <= 6) {\r\n\t\t\ttotalCommas = randint(0, 1);\r\n\t\t} else if (len > 6 && len <= 12) {\r\n\t\t\ttotalCommas = randint(0, 2);\r\n\t\t} else {\r\n\t\t\ttotalCommas = randint(1, 4);\r\n\t\t}\r\n\r\n\t\t_.each(_.range(totalCommas), function(ix) {\r\n\t\t\tif (ix < words.length - 1) {\r\n\t\t\t\twords[ix] += ',';\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Generate a paragraph of \"Lorem ipsum\" text\r\n\t * @param {Number} wordCount Words count in paragraph\r\n\t * @param {Boolean} startWithCommon Should paragraph start with common \r\n\t * \"lorem ipsum\" sentence.\r\n\t * @returns {String}\r\n\t */\r\n\tfunction paragraph(lang, wordCount, startWithCommon) {\r\n\t\tvar data = langs[lang];\r\n\t\tif (!data) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\r\n\t\tvar result = [];\r\n\t\tvar totalWords = 0;\r\n\t\tvar words;\r\n\t\t\r\n\t\twordCount = parseInt(wordCount, 10);\r\n\t\t\r\n\t\tif (startWithCommon && data.common) {\r\n\t\t\twords = data.common.slice(0, wordCount);\r\n\t\t\tif (words.length > 5)\r\n\t\t\t\twords[4] += ',';\r\n\t\t\ttotalWords += words.length;\r\n\t\t\tresult.push(sentence(words, '.'));\r\n\t\t}\r\n\t\t\r\n\t\twhile (totalWords < wordCount) {\r\n\t\t\twords = sample(data.words, Math.min(randint(3, 12) * randint(1, 5), wordCount - totalWords));\r\n\t\t\ttotalWords += words.length;\r\n\t\t\tinsertCommas(words);\r\n\t\t\tresult.push(sentence(words));\r\n\t\t}\r\n\t\t\r\n\t\treturn result.join(' ');\r\n\t}\r\n\r\n\treturn {\r\n\t\t/**\r\n\t\t * Adds new language words for Lorem Ipsum generator\r\n\t\t * @param {String} lang Two-letter lang definition\r\n\t\t * @param {Object} data Words for language. Maight be either a space-separated \r\n\t\t * list of words (String), Array of words or object with <code>text</code> and\r\n\t\t * <code>common</code> properties\r\n\t\t */\r\n\t\taddLang: function(lang, data) {\r\n\t\t\tif (_.isString(data)) {\r\n\t\t\t\tdata = {words: _.compact(data.split(' '))};\r\n\t\t\t} else if (_.isArray(data)) {\r\n\t\t\t\tdata = {words: data};\r\n\t\t\t}\r\n\r\n\t\t\tlangs[lang] = data;\r\n\t\t}\r\n\t}\r\n});/**\r\n * A back-end bootstrap module with commonly used methods for loading user data\r\n * @param {Function} require\r\n * @param {Underscore} _  \r\n */\r\nemmet.define('bootstrap', function(require, _) {\r\nvar snippets = {\r\n\t\"variables\": {\r\n\t\t\"lang\": \"en\",\r\n\t\t\"locale\": \"en-US\",\r\n\t\t\"charset\": \"UTF-8\",\r\n\t\t\"indentation\": \"\\t\",\r\n\t\t\"newline\": \"\\n\"\r\n\t},\r\n\t\r\n\t\"css\": {\r\n\t\t\"filters\": \"html\",\r\n\t\t\"snippets\": {\r\n\t\t\t\"@i\": \"@import url(|);\",\r\n\t\t\t\"@import\": \"@import url(|);\",\r\n\t\t\t\"@m\": \"@media ${1:screen} {\\n\\t|\\n}\",\r\n\t\t\t\"@media\": \"@media ${1:screen} {\\n\\t|\\n}\",\r\n\t\t\t\"@f\": \"@font-face {\\n\\tfont-family:|;\\n\\tsrc:url(|);\\n}\",\r\n\t\t\t\"@f+\": \"@font-face {\\n\\tfont-family: '${1:FontName}';\\n\\tsrc: url('${2:FileName}.eot');\\n\\tsrc: url('${2:FileName}.eot?#iefix') format('embedded-opentype'),\\n\\t\\t url('${2:FileName}.woff') format('woff'),\\n\\t\\t url('${2:FileName}.ttf') format('truetype'),\\n\\t\\t url('${2:FileName}.svg#${1:FontName}') format('svg');\\n\\tfont-style: ${3:normal};\\n\\tfont-weight: ${4:normal};\\n}\",\r\n\r\n\t\t\t\"@kf\": \"@-webkit-keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\\n@-o-keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\\n@-moz-keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\\n@keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\",\r\n\r\n\r\n\t\t\t\"anim\": \"animation:|;\",\r\n\t\t\t\"anim-\": \"animation:${1:name} ${2:duration} ${3:timing-function} ${4:delay} ${5:iteration-count} ${6:direction} ${7:fill-mode};\",\r\n\t\t\t\"animdel\": \"animation-delay:${1:time};\",\r\n\t\t\t\r\n\t\t\t\"animdir\": \"animation-direction:${1:normal};\",\r\n\t\t\t\"animdir:n\": \"animation-direction:normal;\",\r\n\t\t\t\"animdir:r\": \"animation-direction:reverse;\",\r\n\t\t\t\"animdir:a\": \"animation-direction:alternate;\",\r\n\t\t\t\"animdir:ar\": \"animation-direction:alternate-reverse;\",\r\n\t\t\t\r\n\t\t\t\"animdur\": \"animation-duration:${1:0}s;\",\r\n\t\t\t\r\n\t\t\t\"animfm\": \"animation-fill-mode:${1:both};\",\r\n\t\t\t\"animfm:f\": \"animation-fill-mode:forwards;\",\r\n\t\t\t\"animfm:b\": \"animation-fill-mode:backwards;\",\r\n\t\t\t\"animfm:bt\": \"animation-fill-mode:both;\",\r\n\t\t\t\"animfm:bh\": \"animation-fill-mode:both;\",\r\n\t\t\t\r\n\t\t\t\"animic\": \"animation-iteration-count:${1:1};\",\r\n\t\t\t\"animic:i\": \"animation-iteration-count:infinite;\",\r\n\t\t\t\r\n\t\t\t\"animn\": \"animation-name:${1:none};\",\r\n\r\n\t\t\t\"animps\": \"animation-play-state:${1:running};\",\r\n\t\t\t\"animps:p\": \"animation-play-state:paused;\",\r\n\t\t\t\"animps:r\": \"animation-play-state:running;\",\r\n\r\n\t\t\t\"animtf\": \"animation-timing-function:${1:linear};\",\r\n\t\t\t\"animtf:e\": \"animation-timing-function:ease;\",\r\n\t\t\t\"animtf:ei\": \"animation-timing-function:ease-in;\",\r\n\t\t\t\"animtf:eo\": \"animation-timing-function:ease-out;\",\r\n\t\t\t\"animtf:eio\": \"animation-timing-function:ease-in-out;\",\r\n\t\t\t\"animtf:l\": \"animation-timing-function:linear;\",\r\n\t\t\t\"animtf:cb\": \"animation-timing-function:cubic-bezier(${1:0.1}, ${2:0.7}, ${3:1.0}, ${3:0.1});\",\r\n\t\t\t\r\n\t\t\t\"ap\": \"appearance:${none};\",\r\n\r\n\t\t\t\"!\": \"!important\",\r\n\t\t\t\"pos\": \"position:${1:relative};\",\r\n\t\t\t\"pos:s\": \"position:static;\",\r\n\t\t\t\"pos:a\": \"position:absolute;\",\r\n\t\t\t\"pos:r\": \"position:relative;\",\r\n\t\t\t\"pos:f\": \"position:fixed;\",\r\n\t\t\t\"t\": \"top:|;\",\r\n\t\t\t\"t:a\": \"top:auto;\",\r\n\t\t\t\"r\": \"right:|;\",\r\n\t\t\t\"r:a\": \"right:auto;\",\r\n\t\t\t\"b\": \"bottom:|;\",\r\n\t\t\t\"b:a\": \"bottom:auto;\",\r\n\t\t\t\"l\": \"left:|;\",\r\n\t\t\t\"l:a\": \"left:auto;\",\r\n\t\t\t\"z\": \"z-index:|;\",\r\n\t\t\t\"z:a\": \"z-index:auto;\",\r\n\t\t\t\"fl\": \"float:${1:left};\",\r\n\t\t\t\"fl:n\": \"float:none;\",\r\n\t\t\t\"fl:l\": \"float:left;\",\r\n\t\t\t\"fl:r\": \"float:right;\",\r\n\t\t\t\"cl\": \"clear:${1:both};\",\r\n\t\t\t\"cl:n\": \"clear:none;\",\r\n\t\t\t\"cl:l\": \"clear:left;\",\r\n\t\t\t\"cl:r\": \"clear:right;\",\r\n\t\t\t\"cl:b\": \"clear:both;\",\r\n\r\n\t\t\t\"colm\": \"columns:|;\",\r\n\t\t\t\"colmc\": \"column-count:|;\",\r\n\t\t\t\"colmf\": \"column-fill:|;\",\r\n\t\t\t\"colmg\": \"column-gap:|;\",\r\n\t\t\t\"colmr\": \"column-rule:|;\",\r\n\t\t\t\"colmrc\": \"column-rule-color:|;\",\r\n\t\t\t\"colmrs\": \"column-rule-style:|;\",\r\n\t\t\t\"colmrw\": \"column-rule-width:|;\",\r\n\t\t\t\"colms\": \"column-span:|;\",\r\n\t\t\t\"colmw\": \"column-width:|;\",\r\n\r\n\t\t\t\"d\": \"display:${1:block};\",\r\n\t\t\t\"d:n\": \"display:none;\",\r\n\t\t\t\"d:b\": \"display:block;\",\r\n\t\t\t\"d:i\": \"display:inline;\",\r\n\t\t\t\"d:ib\": \"display:inline-block;\",\r\n\t\t\t\"d:ib+\": \"display: inline-block;\\n*display: inline;\\n*zoom: 1;\",\r\n\t\t\t\"d:li\": \"display:list-item;\",\r\n\t\t\t\"d:ri\": \"display:run-in;\",\r\n\t\t\t\"d:cp\": \"display:compact;\",\r\n\t\t\t\"d:tb\": \"display:table;\",\r\n\t\t\t\"d:itb\": \"display:inline-table;\",\r\n\t\t\t\"d:tbcp\": \"display:table-caption;\",\r\n\t\t\t\"d:tbcl\": \"display:table-column;\",\r\n\t\t\t\"d:tbclg\": \"display:table-column-group;\",\r\n\t\t\t\"d:tbhg\": \"display:table-header-group;\",\r\n\t\t\t\"d:tbfg\": \"display:table-footer-group;\",\r\n\t\t\t\"d:tbr\": \"display:table-row;\",\r\n\t\t\t\"d:tbrg\": \"display:table-row-group;\",\r\n\t\t\t\"d:tbc\": \"display:table-cell;\",\r\n\t\t\t\"d:rb\": \"display:ruby;\",\r\n\t\t\t\"d:rbb\": \"display:ruby-base;\",\r\n\t\t\t\"d:rbbg\": \"display:ruby-base-group;\",\r\n\t\t\t\"d:rbt\": \"display:ruby-text;\",\r\n\t\t\t\"d:rbtg\": \"display:ruby-text-group;\",\r\n\t\t\t\"v\": \"visibility:${1:hidden};\",\r\n\t\t\t\"v:v\": \"visibility:visible;\",\r\n\t\t\t\"v:h\": \"visibility:hidden;\",\r\n\t\t\t\"v:c\": \"visibility:collapse;\",\r\n\t\t\t\"ov\": \"overflow:${1:hidden};\",\r\n\t\t\t\"ov:v\": \"overflow:visible;\",\r\n\t\t\t\"ov:h\": \"overflow:hidden;\",\r\n\t\t\t\"ov:s\": \"overflow:scroll;\",\r\n\t\t\t\"ov:a\": \"overflow:auto;\",\r\n\t\t\t\"ovx\": \"overflow-x:${1:hidden};\",\r\n\t\t\t\"ovx:v\": \"overflow-x:visible;\",\r\n\t\t\t\"ovx:h\": \"overflow-x:hidden;\",\r\n\t\t\t\"ovx:s\": \"overflow-x:scroll;\",\r\n\t\t\t\"ovx:a\": \"overflow-x:auto;\",\r\n\t\t\t\"ovy\": \"overflow-y:${1:hidden};\",\r\n\t\t\t\"ovy:v\": \"overflow-y:visible;\",\r\n\t\t\t\"ovy:h\": \"overflow-y:hidden;\",\r\n\t\t\t\"ovy:s\": \"overflow-y:scroll;\",\r\n\t\t\t\"ovy:a\": \"overflow-y:auto;\",\r\n\t\t\t\"ovs\": \"overflow-style:${1:scrollbar};\",\r\n\t\t\t\"ovs:a\": \"overflow-style:auto;\",\r\n\t\t\t\"ovs:s\": \"overflow-style:scrollbar;\",\r\n\t\t\t\"ovs:p\": \"overflow-style:panner;\",\r\n\t\t\t\"ovs:m\": \"overflow-style:move;\",\r\n\t\t\t\"ovs:mq\": \"overflow-style:marquee;\",\r\n\t\t\t\"zoo\": \"zoom:1;\",\r\n\t\t\t\"zm\": \"zoom:1;\",\r\n\t\t\t\"cp\": \"clip:|;\",\r\n\t\t\t\"cp:a\": \"clip:auto;\",\r\n\t\t\t\"cp:r\": \"clip:rect(${1:top} ${2:right} ${3:bottom} ${4:left});\",\r\n\t\t\t\"bxz\": \"box-sizing:${1:border-box};\",\r\n\t\t\t\"bxz:cb\": \"box-sizing:content-box;\",\r\n\t\t\t\"bxz:bb\": \"box-sizing:border-box;\",\r\n\t\t\t\"bxsh\": \"box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} ${5:color};\",\r\n\t\t\t\"bxsh:r\": \"box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} ${5:spread }rgb(${6:0}, ${7:0}, ${8:0});\",\r\n\t\t\t\"bxsh:ra\": \"box-shadow:${1:inset }${2:h} ${3:v} ${4:blur} ${5:spread }rgba(${6:0}, ${7:0}, ${8:0}, .${9:5});\",\r\n\t\t\t\"bxsh:n\": \"box-shadow:none;\",\r\n\t\t\t\"m\": \"margin:|;\",\r\n\t\t\t\"m:a\": \"margin:auto;\",\r\n\t\t\t\"mt\": \"margin-top:|;\",\r\n\t\t\t\"mt:a\": \"margin-top:auto;\",\r\n\t\t\t\"mr\": \"margin-right:|;\",\r\n\t\t\t\"mr:a\": \"margin-right:auto;\",\r\n\t\t\t\"mb\": \"margin-bottom:|;\",\r\n\t\t\t\"mb:a\": \"margin-bottom:auto;\",\r\n\t\t\t\"ml\": \"margin-left:|;\",\r\n\t\t\t\"ml:a\": \"margin-left:auto;\",\r\n\t\t\t\"p\": \"padding:|;\",\r\n\t\t\t\"pt\": \"padding-top:|;\",\r\n\t\t\t\"pr\": \"padding-right:|;\",\r\n\t\t\t\"pb\": \"padding-bottom:|;\",\r\n\t\t\t\"pl\": \"padding-left:|;\",\r\n\t\t\t\"w\": \"width:|;\",\r\n\t\t\t\"w:a\": \"width:auto;\",\r\n\t\t\t\"h\": \"height:|;\",\r\n\t\t\t\"h:a\": \"height:auto;\",\r\n\t\t\t\"maw\": \"max-width:|;\",\r\n\t\t\t\"maw:n\": \"max-width:none;\",\r\n\t\t\t\"mah\": \"max-height:|;\",\r\n\t\t\t\"mah:n\": \"max-height:none;\",\r\n\t\t\t\"miw\": \"min-width:|;\",\r\n\t\t\t\"mih\": \"min-height:|;\",\r\n\t\t\t\"mar\": \"max-resolution:${1:res};\",\r\n\t\t\t\"mir\": \"min-resolution:${1:res};\",\r\n\t\t\t\"ori\": \"orientation:|;\",\r\n\t\t\t\"ori:l\": \"orientation:landscape;\",\r\n\t\t\t\"ori:p\": \"orientation:portrait;\",\r\n\t\t\t\"ol\": \"outline:|;\",\r\n\t\t\t\"ol:n\": \"outline:none;\",\r\n\t\t\t\"olo\": \"outline-offset:|;\",\r\n\t\t\t\"olw\": \"outline-width:|;\",\r\n\t\t\t\"olw:tn\": \"outline-width:thin;\",\r\n\t\t\t\"olw:m\": \"outline-width:medium;\",\r\n\t\t\t\"olw:tc\": \"outline-width:thick;\",\r\n\t\t\t\"ols\": \"outline-style:|;\",\r\n\t\t\t\"ols:n\": \"outline-style:none;\",\r\n\t\t\t\"ols:dt\": \"outline-style:dotted;\",\r\n\t\t\t\"ols:ds\": \"outline-style:dashed;\",\r\n\t\t\t\"ols:s\": \"outline-style:solid;\",\r\n\t\t\t\"ols:db\": \"outline-style:double;\",\r\n\t\t\t\"ols:g\": \"outline-style:groove;\",\r\n\t\t\t\"ols:r\": \"outline-style:ridge;\",\r\n\t\t\t\"ols:i\": \"outline-style:inset;\",\r\n\t\t\t\"ols:o\": \"outline-style:outset;\",\r\n\t\t\t\"olc\": \"outline-color:#${1:000};\",\r\n\t\t\t\"olc:i\": \"outline-color:invert;\",\r\n\t\t\t\"bd\": \"border:|;\",\r\n\t\t\t\"bd+\": \"border:${1:1px} ${2:solid} ${3:#000};\",\r\n\t\t\t\"bd:n\": \"border:none;\",\r\n\t\t\t\"bdbk\": \"border-break:${1:close};\",\r\n\t\t\t\"bdbk:c\": \"border-break:close;\",\r\n\t\t\t\"bdcl\": \"border-collapse:|;\",\r\n\t\t\t\"bdcl:c\": \"border-collapse:collapse;\",\r\n\t\t\t\"bdcl:s\": \"border-collapse:separate;\",\r\n\t\t\t\"bdc\": \"border-color:#${1:000};\",\r\n\t\t\t\"bdc:t\": \"border-color:transparent;\",\r\n\t\t\t\"bdi\": \"border-image:url(|);\",\r\n\t\t\t\"bdi:n\": \"border-image:none;\",\r\n\t\t\t\"bdti\": \"border-top-image:url(|);\",\r\n\t\t\t\"bdti:n\": \"border-top-image:none;\",\r\n\t\t\t\"bdri\": \"border-right-image:url(|);\",\r\n\t\t\t\"bdri:n\": \"border-right-image:none;\",\r\n\t\t\t\"bdbi\": \"border-bottom-image:url(|);\",\r\n\t\t\t\"bdbi:n\": \"border-bottom-image:none;\",\r\n\t\t\t\"bdli\": \"border-left-image:url(|);\",\r\n\t\t\t\"bdli:n\": \"border-left-image:none;\",\r\n\t\t\t\"bdci\": \"border-corner-image:url(|);\",\r\n\t\t\t\"bdci:n\": \"border-corner-image:none;\",\r\n\t\t\t\"bdci:c\": \"border-corner-image:continue;\",\r\n\t\t\t\"bdtli\": \"border-top-left-image:url(|);\",\r\n\t\t\t\"bdtli:n\": \"border-top-left-image:none;\",\r\n\t\t\t\"bdtli:c\": \"border-top-left-image:continue;\",\r\n\t\t\t\"bdtri\": \"border-top-right-image:url(|);\",\r\n\t\t\t\"bdtri:n\": \"border-top-right-image:none;\",\r\n\t\t\t\"bdtri:c\": \"border-top-right-image:continue;\",\r\n\t\t\t\"bdbri\": \"border-bottom-right-image:url(|);\",\r\n\t\t\t\"bdbri:n\": \"border-bottom-right-image:none;\",\r\n\t\t\t\"bdbri:c\": \"border-bottom-right-image:continue;\",\r\n\t\t\t\"bdbli\": \"border-bottom-left-image:url(|);\",\r\n\t\t\t\"bdbli:n\": \"border-bottom-left-image:none;\",\r\n\t\t\t\"bdbli:c\": \"border-bottom-left-image:continue;\",\r\n\t\t\t\"bdf\": \"border-fit:${1:repeat};\",\r\n\t\t\t\"bdf:c\": \"border-fit:clip;\",\r\n\t\t\t\"bdf:r\": \"border-fit:repeat;\",\r\n\t\t\t\"bdf:sc\": \"border-fit:scale;\",\r\n\t\t\t\"bdf:st\": \"border-fit:stretch;\",\r\n\t\t\t\"bdf:ow\": \"border-fit:overwrite;\",\r\n\t\t\t\"bdf:of\": \"border-fit:overflow;\",\r\n\t\t\t\"bdf:sp\": \"border-fit:space;\",\r\n\t\t\t\"bdlen\": \"border-length:|;\",\r\n\t\t\t\"bdlen:a\": \"border-length:auto;\",\r\n\t\t\t\"bdsp\": \"border-spacing:|;\",\r\n\t\t\t\"bds\": \"border-style:|;\",\r\n\t\t\t\"bds:n\": \"border-style:none;\",\r\n\t\t\t\"bds:h\": \"border-style:hidden;\",\r\n\t\t\t\"bds:dt\": \"border-style:dotted;\",\r\n\t\t\t\"bds:ds\": \"border-style:dashed;\",\r\n\t\t\t\"bds:s\": \"border-style:solid;\",\r\n\t\t\t\"bds:db\": \"border-style:double;\",\r\n\t\t\t\"bds:dtds\": \"border-style:dot-dash;\",\r\n\t\t\t\"bds:dtdtds\": \"border-style:dot-dot-dash;\",\r\n\t\t\t\"bds:w\": \"border-style:wave;\",\r\n\t\t\t\"bds:g\": \"border-style:groove;\",\r\n\t\t\t\"bds:r\": \"border-style:ridge;\",\r\n\t\t\t\"bds:i\": \"border-style:inset;\",\r\n\t\t\t\"bds:o\": \"border-style:outset;\",\r\n\t\t\t\"bdw\": \"border-width:|;\",\r\n\t\t\t\"bdtw\": \"border-top-width:|;\",\r\n\t\t\t\"bdrw\": \"border-right-width:|;\",\r\n\t\t\t\"bdbw\": \"border-bottom-width:|;\",\r\n\t\t\t\"bdlw\": \"border-left-width:|;\",\r\n\t\t\t\"bdt\": \"border-top:|;\",\r\n\t\t\t\"bt\": \"border-top:|;\",\r\n\t\t\t\"bdt+\": \"border-top:${1:1px} ${2:solid} ${3:#000};\",\r\n\t\t\t\"bdt:n\": \"border-top:none;\",\r\n\t\t\t\"bdts\": \"border-top-style:|;\",\r\n\t\t\t\"bdts:n\": \"border-top-style:none;\",\r\n\t\t\t\"bdtc\": \"border-top-color:#${1:000};\",\r\n\t\t\t\"bdtc:t\": \"border-top-color:transparent;\",\r\n\t\t\t\"bdr\": \"border-right:|;\",\r\n\t\t\t\"br\": \"border-right:|;\",\r\n\t\t\t\"bdr+\": \"border-right:${1:1px} ${2:solid} ${3:#000};\",\r\n\t\t\t\"bdr:n\": \"border-right:none;\",\r\n\t\t\t\"bdrst\": \"border-right-style:|;\",\r\n\t\t\t\"bdrst:n\": \"border-right-style:none;\",\r\n\t\t\t\"bdrc\": \"border-right-color:#${1:000};\",\r\n\t\t\t\"bdrc:t\": \"border-right-color:transparent;\",\r\n\t\t\t\"bdb\": \"border-bottom:|;\",\r\n\t\t\t\"bb\": \"border-bottom:|;\",\r\n\t\t\t\"bdb+\": \"border-bottom:${1:1px} ${2:solid} ${3:#000};\",\r\n\t\t\t\"bdb:n\": \"border-bottom:none;\",\r\n\t\t\t\"bdbs\": \"border-bottom-style:|;\",\r\n\t\t\t\"bdbs:n\": \"border-bottom-style:none;\",\r\n\t\t\t\"bdbc\": \"border-bottom-color:#${1:000};\",\r\n\t\t\t\"bdbc:t\": \"border-bottom-color:transparent;\",\r\n\t\t\t\"bdl\": \"border-left:|;\",\r\n\t\t\t\"bl\": \"border-left:|;\",\r\n\t\t\t\"bdl+\": \"border-left:${1:1px} ${2:solid} ${3:#000};\",\r\n\t\t\t\"bdl:n\": \"border-left:none;\",\r\n\t\t\t\"bdls\": \"border-left-style:|;\",\r\n\t\t\t\"bdls:n\": \"border-left-style:none;\",\r\n\t\t\t\"bdlc\": \"border-left-color:#${1:000};\",\r\n\t\t\t\"bdlc:t\": \"border-left-color:transparent;\",\r\n\t\t\t\"bdrs\": \"border-radius:|;\",\r\n\t\t\t\"bdtrrs\": \"border-top-right-radius:|;\",\r\n\t\t\t\"bdtlrs\": \"border-top-left-radius:|;\",\r\n\t\t\t\"bdbrrs\": \"border-bottom-right-radius:|;\",\r\n\t\t\t\"bdblrs\": \"border-bottom-left-radius:|;\",\r\n\t\t\t\"bg\": \"background:#${1:000};\",\r\n\t\t\t\"bg+\": \"background:${1:#fff} url(${2}) ${3:0} ${4:0} ${5:no-repeat};\",\r\n\t\t\t\"bg:n\": \"background:none;\",\r\n\t\t\t\"bg:ie\": \"filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='${1:x}.png',sizingMethod='${2:crop}');\",\r\n\t\t\t\"bgc\": \"background-color:#${1:fff};\",\r\n\t\t\t\"bgc:t\": \"background-color:transparent;\",\r\n\t\t\t\"bgi\": \"background-image:url(|);\",\r\n\t\t\t\"bgi:n\": \"background-image:none;\",\r\n\t\t\t\"bgr\": \"background-repeat:|;\",\r\n\t\t\t\"bgr:n\": \"background-repeat:no-repeat;\",\r\n\t\t\t\"bgr:x\": \"background-repeat:repeat-x;\",\r\n\t\t\t\"bgr:y\": \"background-repeat:repeat-y;\",\r\n\t\t\t\"bgr:sp\": \"background-repeat:space;\",\r\n\t\t\t\"bgr:rd\": \"background-repeat:round;\",\r\n\t\t\t\"bga\": \"background-attachment:|;\",\r\n\t\t\t\"bga:f\": \"background-attachment:fixed;\",\r\n\t\t\t\"bga:s\": \"background-attachment:scroll;\",\r\n\t\t\t\"bgp\": \"background-position:${1:0} ${2:0};\",\r\n\t\t\t\"bgpx\": \"background-position-x:|;\",\r\n\t\t\t\"bgpy\": \"background-position-y:|;\",\r\n\t\t\t\"bgbk\": \"background-break:|;\",\r\n\t\t\t\"bgbk:bb\": \"background-break:bounding-box;\",\r\n\t\t\t\"bgbk:eb\": \"background-break:each-box;\",\r\n\t\t\t\"bgbk:c\": \"background-break:continuous;\",\r\n\t\t\t\"bgcp\": \"background-clip:${1:padding-box};\",\r\n\t\t\t\"bgcp:bb\": \"background-clip:border-box;\",\r\n\t\t\t\"bgcp:pb\": \"background-clip:padding-box;\",\r\n\t\t\t\"bgcp:cb\": \"background-clip:content-box;\",\r\n\t\t\t\"bgcp:nc\": \"background-clip:no-clip;\",\r\n\t\t\t\"bgo\": \"background-origin:|;\",\r\n\t\t\t\"bgo:pb\": \"background-origin:padding-box;\",\r\n\t\t\t\"bgo:bb\": \"background-origin:border-box;\",\r\n\t\t\t\"bgo:cb\": \"background-origin:content-box;\",\r\n\t\t\t\"bgsz\": \"background-size:|;\",\r\n\t\t\t\"bgsz:a\": \"background-size:auto;\",\r\n\t\t\t\"bgsz:ct\": \"background-size:contain;\",\r\n\t\t\t\"bgsz:cv\": \"background-size:cover;\",\r\n\t\t\t\"c\": \"color:#${1:000};\",\r\n\t\t\t\"c:r\": \"color:rgb(${1:0}, ${2:0}, ${3:0});\",\r\n\t\t\t\"c:ra\": \"color:rgba(${1:0}, ${2:0}, ${3:0}, .${4:5});\",\r\n\t\t\t\"cm\": \"/* |${child} */\",\r\n\t\t\t\"cnt\": \"content:'|';\",\r\n\t\t\t\"cnt:n\": \"content:normal;\",\r\n\t\t\t\"cnt:oq\": \"content:open-quote;\",\r\n\t\t\t\"cnt:noq\": \"content:no-open-quote;\",\r\n\t\t\t\"cnt:cq\": \"content:close-quote;\",\r\n\t\t\t\"cnt:ncq\": \"content:no-close-quote;\",\r\n\t\t\t\"cnt:a\": \"content:attr(|);\",\r\n\t\t\t\"cnt:c\": \"content:counter(|);\",\r\n\t\t\t\"cnt:cs\": \"content:counters(|);\",\r\n\r\n\r\n\t\t\t\"tbl\": \"table-layout:|;\",\r\n\t\t\t\"tbl:a\": \"table-layout:auto;\",\r\n\t\t\t\"tbl:f\": \"table-layout:fixed;\",\r\n\t\t\t\"cps\": \"caption-side:|;\",\r\n\t\t\t\"cps:t\": \"caption-side:top;\",\r\n\t\t\t\"cps:b\": \"caption-side:bottom;\",\r\n\t\t\t\"ec\": \"empty-cells:|;\",\r\n\t\t\t\"ec:s\": \"empty-cells:show;\",\r\n\t\t\t\"ec:h\": \"empty-cells:hide;\",\r\n\t\t\t\"lis\": \"list-style:|;\",\r\n\t\t\t\"lis:n\": \"list-style:none;\",\r\n\t\t\t\"lisp\": \"list-style-position:|;\",\r\n\t\t\t\"lisp:i\": \"list-style-position:inside;\",\r\n\t\t\t\"lisp:o\": \"list-style-position:outside;\",\r\n\t\t\t\"list\": \"list-style-type:|;\",\r\n\t\t\t\"list:n\": \"list-style-type:none;\",\r\n\t\t\t\"list:d\": \"list-style-type:disc;\",\r\n\t\t\t\"list:c\": \"list-style-type:circle;\",\r\n\t\t\t\"list:s\": \"list-style-type:square;\",\r\n\t\t\t\"list:dc\": \"list-style-type:decimal;\",\r\n\t\t\t\"list:dclz\": \"list-style-type:decimal-leading-zero;\",\r\n\t\t\t\"list:lr\": \"list-style-type:lower-roman;\",\r\n\t\t\t\"list:ur\": \"list-style-type:upper-roman;\",\r\n\t\t\t\"lisi\": \"list-style-image:|;\",\r\n\t\t\t\"lisi:n\": \"list-style-image:none;\",\r\n\t\t\t\"q\": \"quotes:|;\",\r\n\t\t\t\"q:n\": \"quotes:none;\",\r\n\t\t\t\"q:ru\": \"quotes:'\\\\00AB' '\\\\00BB' '\\\\201E' '\\\\201C';\",\r\n\t\t\t\"q:en\": \"quotes:'\\\\201C' '\\\\201D' '\\\\2018' '\\\\2019';\",\r\n\t\t\t\"ct\": \"content:|;\",\r\n\t\t\t\"ct:n\": \"content:normal;\",\r\n\t\t\t\"ct:oq\": \"content:open-quote;\",\r\n\t\t\t\"ct:noq\": \"content:no-open-quote;\",\r\n\t\t\t\"ct:cq\": \"content:close-quote;\",\r\n\t\t\t\"ct:ncq\": \"content:no-close-quote;\",\r\n\t\t\t\"ct:a\": \"content:attr(|);\",\r\n\t\t\t\"ct:c\": \"content:counter(|);\",\r\n\t\t\t\"ct:cs\": \"content:counters(|);\",\r\n\t\t\t\"coi\": \"counter-increment:|;\",\r\n\t\t\t\"cor\": \"counter-reset:|;\",\r\n\t\t\t\"va\": \"vertical-align:${1:top};\",\r\n\t\t\t\"va:sup\": \"vertical-align:super;\",\r\n\t\t\t\"va:t\": \"vertical-align:top;\",\r\n\t\t\t\"va:tt\": \"vertical-align:text-top;\",\r\n\t\t\t\"va:m\": \"vertical-align:middle;\",\r\n\t\t\t\"va:bl\": \"vertical-align:baseline;\",\r\n\t\t\t\"va:b\": \"vertical-align:bottom;\",\r\n\t\t\t\"va:tb\": \"vertical-align:text-bottom;\",\r\n\t\t\t\"va:sub\": \"vertical-align:sub;\",\r\n\t\t\t\"ta\": \"text-align:${1:left};\",\r\n\t\t\t\"ta:l\": \"text-align:left;\",\r\n\t\t\t\"ta:c\": \"text-align:center;\",\r\n\t\t\t\"ta:r\": \"text-align:right;\",\r\n\t\t\t\"ta:j\": \"text-align:justify;\",\r\n\t\t\t\"ta-lst\": \"text-align-last:|;\",\r\n\t\t\t\"tal:a\": \"text-align-last:auto;\",\r\n\t\t\t\"tal:l\": \"text-align-last:left;\",\r\n\t\t\t\"tal:c\": \"text-align-last:center;\",\r\n\t\t\t\"tal:r\": \"text-align-last:right;\",\r\n\t\t\t\"td\": \"text-decoration:${1:none};\",\r\n\t\t\t\"td:n\": \"text-decoration:none;\",\r\n\t\t\t\"td:u\": \"text-decoration:underline;\",\r\n\t\t\t\"td:o\": \"text-decoration:overline;\",\r\n\t\t\t\"td:l\": \"text-decoration:line-through;\",\r\n\t\t\t\"te\": \"text-emphasis:|;\",\r\n\t\t\t\"te:n\": \"text-emphasis:none;\",\r\n\t\t\t\"te:ac\": \"text-emphasis:accent;\",\r\n\t\t\t\"te:dt\": \"text-emphasis:dot;\",\r\n\t\t\t\"te:c\": \"text-emphasis:circle;\",\r\n\t\t\t\"te:ds\": \"text-emphasis:disc;\",\r\n\t\t\t\"te:b\": \"text-emphasis:before;\",\r\n\t\t\t\"te:a\": \"text-emphasis:after;\",\r\n\t\t\t\"th\": \"text-height:|;\",\r\n\t\t\t\"th:a\": \"text-height:auto;\",\r\n\t\t\t\"th:f\": \"text-height:font-size;\",\r\n\t\t\t\"th:t\": \"text-height:text-size;\",\r\n\t\t\t\"th:m\": \"text-height:max-size;\",\r\n\t\t\t\"ti\": \"text-indent:|;\",\r\n\t\t\t\"ti:-\": \"text-indent:-9999px;\",\r\n\t\t\t\"tj\": \"text-justify:|;\",\r\n\t\t\t\"tj:a\": \"text-justify:auto;\",\r\n\t\t\t\"tj:iw\": \"text-justify:inter-word;\",\r\n\t\t\t\"tj:ii\": \"text-justify:inter-ideograph;\",\r\n\t\t\t\"tj:ic\": \"text-justify:inter-cluster;\",\r\n\t\t\t\"tj:d\": \"text-justify:distribute;\",\r\n\t\t\t\"tj:k\": \"text-justify:kashida;\",\r\n\t\t\t\"tj:t\": \"text-justify:tibetan;\",\r\n\t\t\t\"tov\": \"text-overflow:${ellipsis};\",\r\n\t\t\t\"tov:e\": \"text-overflow:ellipsis;\",\r\n\t\t\t\"tov:c\": \"text-overflow:clip;\",\r\n\t\t\t\"to\": \"text-outline:|;\",\r\n\t\t\t\"to+\": \"text-outline:${1:0} ${2:0} ${3:#000};\",\r\n\t\t\t\"to:n\": \"text-outline:none;\",\r\n\t\t\t\"tr\": \"text-replace:|;\",\r\n\t\t\t\"tr:n\": \"text-replace:none;\",\r\n\t\t\t\"tt\": \"text-transform:${1:uppercase};\",\r\n\t\t\t\"tt:n\": \"text-transform:none;\",\r\n\t\t\t\"tt:c\": \"text-transform:capitalize;\",\r\n\t\t\t\"tt:u\": \"text-transform:uppercase;\",\r\n\t\t\t\"tt:l\": \"text-transform:lowercase;\",\r\n\t\t\t\"tw\": \"text-wrap:|;\",\r\n\t\t\t\"tw:n\": \"text-wrap:normal;\",\r\n\t\t\t\"tw:no\": \"text-wrap:none;\",\r\n\t\t\t\"tw:u\": \"text-wrap:unrestricted;\",\r\n\t\t\t\"tw:s\": \"text-wrap:suppress;\",\r\n\t\t\t\"tsh\": \"text-shadow:${1:hoff} ${2:voff} ${3:blur} ${4:#000};\",\r\n\t\t\t\"tsh:r\": \"text-shadow:${1:h} ${2:v} ${3:blur} rgb(${4:0}, ${5:0}, ${6:0});\",\r\n\t\t\t\"tsh:ra\": \"text-shadow:${1:h} ${2:v} ${3:blur} rgba(${4:0}, ${5:0}, ${6:0}, .${7:5});\",\r\n\t\t\t\"tsh+\": \"text-shadow:${1:0} ${2:0} ${3:0} ${4:#000};\",\r\n\t\t\t\"tsh:n\": \"text-shadow:none;\",\r\n\t\t\t\"trf\": \"transform:|;\",\r\n\t\t\t\"trf:skx\": \"transform: skewX(${1:angle});\",\r\n\t\t\t\"trf:sky\": \"transform: skewY(${1:angle});\",\r\n\t\t\t\"trf:sc\": \"transform: scale(${1:x}, ${2:y});\",\r\n\t\t\t\"trf:scx\": \"transform: scaleX(${1:x});\",\r\n\t\t\t\"trf:scy\": \"transform: scaleY(${1:y});\",\r\n\t\t\t\"trf:r\": \"transform: rotate(${1:angle});\",\r\n\t\t\t\"trf:t\": \"transform: translate(${1:x}, ${2:y});\",\r\n\t\t\t\"trf:tx\": \"transform: translateX(${1:x});\",\r\n\t\t\t\"trf:ty\": \"transform: translateY(${1:y});\",\r\n\t\t\t\"trfo\": \"transform-origin:|;\",\r\n\t\t\t\"trfs\": \"transform-style:${1:preserve-3d};\",\r\n\t\t\t\"trs\": \"transition:${1:prop} ${2:time};\",\r\n\t\t\t\"trsde\": \"transition-delay:${1:time};\",\r\n\t\t\t\"trsdu\": \"transition-duration:${1:time};\",\r\n\t\t\t\"trsp\": \"transition-property:${1:prop};\",\r\n\t\t\t\"trstf\": \"transition-timing-function:${1:tfunc};\",\r\n\t\t\t\"lh\": \"line-height:|;\",\r\n\t\t\t\"whs\": \"white-space:|;\",\r\n\t\t\t\"whs:n\": \"white-space:normal;\",\r\n\t\t\t\"whs:p\": \"white-space:pre;\",\r\n\t\t\t\"whs:nw\": \"white-space:nowrap;\",\r\n\t\t\t\"whs:pw\": \"white-space:pre-wrap;\",\r\n\t\t\t\"whs:pl\": \"white-space:pre-line;\",\r\n\t\t\t\"whsc\": \"white-space-collapse:|;\",\r\n\t\t\t\"whsc:n\": \"white-space-collapse:normal;\",\r\n\t\t\t\"whsc:k\": \"white-space-collapse:keep-all;\",\r\n\t\t\t\"whsc:l\": \"white-space-collapse:loose;\",\r\n\t\t\t\"whsc:bs\": \"white-space-collapse:break-strict;\",\r\n\t\t\t\"whsc:ba\": \"white-space-collapse:break-all;\",\r\n\t\t\t\"wob\": \"word-break:|;\",\r\n\t\t\t\"wob:n\": \"word-break:normal;\",\r\n\t\t\t\"wob:k\": \"word-break:keep-all;\",\r\n\t\t\t\"wob:ba\": \"word-break:break-all;\",\r\n\t\t\t\"wos\": \"word-spacing:|;\",\r\n\t\t\t\"wow\": \"word-wrap:|;\",\r\n\t\t\t\"wow:nm\": \"word-wrap:normal;\",\r\n\t\t\t\"wow:n\": \"word-wrap:none;\",\r\n\t\t\t\"wow:u\": \"word-wrap:unrestricted;\",\r\n\t\t\t\"wow:s\": \"word-wrap:suppress;\",\r\n\t\t\t\"wow:b\": \"word-wrap:break-word;\",\r\n\t\t\t\"wm\": \"writing-mode:${1:lr-tb};\",\r\n\t\t\t\"wm:lrt\": \"writing-mode:lr-tb;\",\r\n\t\t\t\"wm:lrb\": \"writing-mode:lr-bt;\",\r\n\t\t\t\"wm:rlt\": \"writing-mode:rl-tb;\",\r\n\t\t\t\"wm:rlb\": \"writing-mode:rl-bt;\",\r\n\t\t\t\"wm:tbr\": \"writing-mode:tb-rl;\",\r\n\t\t\t\"wm:tbl\": \"writing-mode:tb-lr;\",\r\n\t\t\t\"wm:btl\": \"writing-mode:bt-lr;\",\r\n\t\t\t\"wm:btr\": \"writing-mode:bt-rl;\",\r\n\t\t\t\"lts\": \"letter-spacing:|;\",\r\n\t\t\t\"lts-n\": \"letter-spacing:normal;\",\r\n\t\t\t\"f\": \"font:|;\",\r\n\t\t\t\"f+\": \"font:${1:1em} ${2:Arial,sans-serif};\",\r\n\t\t\t\"fw\": \"font-weight:|;\",\r\n\t\t\t\"fw:n\": \"font-weight:normal;\",\r\n\t\t\t\"fw:b\": \"font-weight:bold;\",\r\n\t\t\t\"fw:br\": \"font-weight:bolder;\",\r\n\t\t\t\"fw:lr\": \"font-weight:lighter;\",\r\n\t\t\t\"fs\": \"font-style:${italic};\",\r\n\t\t\t\"fs:n\": \"font-style:normal;\",\r\n\t\t\t\"fs:i\": \"font-style:italic;\",\r\n\t\t\t\"fs:o\": \"font-style:oblique;\",\r\n\t\t\t\"fv\": \"font-variant:|;\",\r\n\t\t\t\"fv:n\": \"font-variant:normal;\",\r\n\t\t\t\"fv:sc\": \"font-variant:small-caps;\",\r\n\t\t\t\"fz\": \"font-size:|;\",\r\n\t\t\t\"fza\": \"font-size-adjust:|;\",\r\n\t\t\t\"fza:n\": \"font-size-adjust:none;\",\r\n\t\t\t\"ff\": \"font-family:|;\",\r\n\t\t\t\"ff:s\": \"font-family:serif;\",\r\n\t\t\t\"ff:ss\": \"font-family:sans-serif;\",\r\n\t\t\t\"ff:c\": \"font-family:cursive;\",\r\n\t\t\t\"ff:f\": \"font-family:fantasy;\",\r\n\t\t\t\"ff:m\": \"font-family:monospace;\",\r\n\t\t\t\"ff:a\": \"font-family: Arial, \\\"Helvetica Neue\\\", Helvetica, sans-serif;\",\r\n\t\t\t\"ff:t\": \"font-family: \\\"Times New Roman\\\", Times, Baskerville, Georgia, serif;\",\r\n\t\t\t\"ff:v\": \"font-family: Verdana, Geneva, sans-serif;\",\r\n\t\t\t\"fef\": \"font-effect:|;\",\r\n\t\t\t\"fef:n\": \"font-effect:none;\",\r\n\t\t\t\"fef:eg\": \"font-effect:engrave;\",\r\n\t\t\t\"fef:eb\": \"font-effect:emboss;\",\r\n\t\t\t\"fef:o\": \"font-effect:outline;\",\r\n\t\t\t\"fem\": \"font-emphasize:|;\",\r\n\t\t\t\"femp\": \"font-emphasize-position:|;\",\r\n\t\t\t\"femp:b\": \"font-emphasize-position:before;\",\r\n\t\t\t\"femp:a\": \"font-emphasize-position:after;\",\r\n\t\t\t\"fems\": \"font-emphasize-style:|;\",\r\n\t\t\t\"fems:n\": \"font-emphasize-style:none;\",\r\n\t\t\t\"fems:ac\": \"font-emphasize-style:accent;\",\r\n\t\t\t\"fems:dt\": \"font-emphasize-style:dot;\",\r\n\t\t\t\"fems:c\": \"font-emphasize-style:circle;\",\r\n\t\t\t\"fems:ds\": \"font-emphasize-style:disc;\",\r\n\t\t\t\"fsm\": \"font-smooth:|;\",\r\n\t\t\t\"fsm:a\": \"font-smooth:auto;\",\r\n\t\t\t\"fsm:n\": \"font-smooth:never;\",\r\n\t\t\t\"fsm:aw\": \"font-smooth:always;\",\r\n\t\t\t\"fst\": \"font-stretch:|;\",\r\n\t\t\t\"fst:n\": \"font-stretch:normal;\",\r\n\t\t\t\"fst:uc\": \"font-stretch:ultra-condensed;\",\r\n\t\t\t\"fst:ec\": \"font-stretch:extra-condensed;\",\r\n\t\t\t\"fst:c\": \"font-stretch:condensed;\",\r\n\t\t\t\"fst:sc\": \"font-stretch:semi-condensed;\",\r\n\t\t\t\"fst:se\": \"font-stretch:semi-expanded;\",\r\n\t\t\t\"fst:e\": \"font-stretch:expanded;\",\r\n\t\t\t\"fst:ee\": \"font-stretch:extra-expanded;\",\r\n\t\t\t\"fst:ue\": \"font-stretch:ultra-expanded;\",\r\n\t\t\t\"op\": \"opacity:|;\",\r\n\t\t\t\"op+\": \"opacity: $1;\\nfilter: alpha(opacity=$2);\",\r\n\t\t\t\"op:ie\": \"filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=100);\",\r\n\t\t\t\"op:ms\": \"-ms-filter:'progid:DXImageTransform.Microsoft.Alpha(Opacity=100)';\",\r\n\t\t\t\"rsz\": \"resize:|;\",\r\n\t\t\t\"rsz:n\": \"resize:none;\",\r\n\t\t\t\"rsz:b\": \"resize:both;\",\r\n\t\t\t\"rsz:h\": \"resize:horizontal;\",\r\n\t\t\t\"rsz:v\": \"resize:vertical;\",\r\n\t\t\t\"cur\": \"cursor:${pointer};\",\r\n\t\t\t\"cur:a\": \"cursor:auto;\",\r\n\t\t\t\"cur:d\": \"cursor:default;\",\r\n\t\t\t\"cur:c\": \"cursor:crosshair;\",\r\n\t\t\t\"cur:ha\": \"cursor:hand;\",\r\n\t\t\t\"cur:he\": \"cursor:help;\",\r\n\t\t\t\"cur:m\": \"cursor:move;\",\r\n\t\t\t\"cur:p\": \"cursor:pointer;\",\r\n\t\t\t\"cur:t\": \"cursor:text;\",\r\n\t\t\t\"pgbb\": \"page-break-before:|;\",\r\n\t\t\t\"pgbb:au\": \"page-break-before:auto;\",\r\n\t\t\t\"pgbb:al\": \"page-break-before:always;\",\r\n\t\t\t\"pgbb:l\": \"page-break-before:left;\",\r\n\t\t\t\"pgbb:r\": \"page-break-before:right;\",\r\n\t\t\t\"pgbi\": \"page-break-inside:|;\",\r\n\t\t\t\"pgbi:au\": \"page-break-inside:auto;\",\r\n\t\t\t\"pgbi:av\": \"page-break-inside:avoid;\",\r\n\t\t\t\"pgba\": \"page-break-after:|;\",\r\n\t\t\t\"pgba:au\": \"page-break-after:auto;\",\r\n\t\t\t\"pgba:al\": \"page-break-after:always;\",\r\n\t\t\t\"pgba:l\": \"page-break-after:left;\",\r\n\t\t\t\"pgba:r\": \"page-break-after:right;\",\r\n\t\t\t\"orp\": \"orphans:|;\",\r\n\t\t\t\"us\": \"user-select:${none};\",\r\n\t\t\t\"wid\": \"widows:|;\",\r\n\t\t\t\"wfsm\": \"-webkit-font-smoothing:${antialiased};\",\r\n\t\t\t\"wfsm:a\": \"-webkit-font-smoothing:antialiased;\",\r\n\t\t\t\"wfsm:s\": \"-webkit-font-smoothing:subpixel-antialiased;\",\r\n\t\t\t\"wfsm:sa\": \"-webkit-font-smoothing:subpixel-antialiased;\",\r\n\t\t\t\"wfsm:n\": \"-webkit-font-smoothing:none;\"\r\n\t\t}\r\n\t},\r\n\t\r\n\t\"html\": {\r\n\t\t\"filters\": \"html\",\r\n\t\t\"profile\": \"html\",\r\n\t\t\"snippets\": {\r\n\t\t\t\"!!!\":    \"<!doctype html>\",\r\n\t\t\t\"!!!4t\":  \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\",\r\n\t\t\t\"!!!4s\":  \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\" \\\"http://www.w3.org/TR/html4/strict.dtd\\\">\",\r\n\t\t\t\"!!!xt\":  \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\",\r\n\t\t\t\"!!!xs\":  \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\",\r\n\t\t\t\"!!!xxs\": \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.1//EN\\\" \\\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\\\">\",\r\n\r\n\t\t\t\"c\": \"<!-- |${child} -->\",\r\n\t\t\t\"cc:ie6\": \"<!--[if lte IE 6]>\\n\\t${child}|\\n<![endif]-->\",\r\n\t\t\t\"cc:ie\": \"<!--[if IE]>\\n\\t${child}|\\n<![endif]-->\",\r\n\t\t\t\"cc:noie\": \"<!--[if !IE]><!-->\\n\\t${child}|\\n<!--<![endif]-->\"\r\n\t\t},\r\n\t\t\r\n\t\t\"abbreviations\": {\r\n\t\t\t\"!\": \"html:5\",\r\n\t\t\t\"a\": \"<a href=\\\"\\\">\",\r\n\t\t\t\"a:link\": \"<a href=\\\"http://|\\\">\",\r\n\t\t\t\"a:mail\": \"<a href=\\\"mailto:|\\\">\",\r\n\t\t\t\"abbr\": \"<abbr title=\\\"\\\">\",\r\n\t\t\t\"acronym\": \"<acronym title=\\\"\\\">\",\r\n\t\t\t\"base\": \"<base href=\\\"\\\" />\",\r\n\t\t\t\"basefont\": \"<basefont/>\",\r\n\t\t\t\"br\": \"<br/>\",\r\n\t\t\t\"frame\": \"<frame/>\",\r\n\t\t\t\"hr\": \"<hr/>\",\r\n\t\t\t\"bdo\": \"<bdo dir=\\\"\\\">\",\r\n\t\t\t\"bdo:r\": \"<bdo dir=\\\"rtl\\\">\",\r\n\t\t\t\"bdo:l\": \"<bdo dir=\\\"ltr\\\">\",\r\n\t\t\t\"col\": \"<col/>\",\r\n\t\t\t\"link\": \"<link rel=\\\"stylesheet\\\" href=\\\"\\\" />\",\r\n\t\t\t\"link:css\": \"<link rel=\\\"stylesheet\\\" href=\\\"${1:style}.css\\\" />\",\r\n\t\t\t\"link:print\": \"<link rel=\\\"stylesheet\\\" href=\\\"${1:print}.css\\\" media=\\\"print\\\" />\",\r\n\t\t\t\"link:favicon\": \"<link rel=\\\"shortcut icon\\\" type=\\\"image/x-icon\\\" href=\\\"${1:favicon.ico}\\\" />\",\r\n\t\t\t\"link:touch\": \"<link rel=\\\"apple-touch-icon\\\" href=\\\"${1:favicon.png}\\\" />\",\r\n\t\t\t\"link:rss\": \"<link rel=\\\"alternate\\\" type=\\\"application/rss+xml\\\" title=\\\"RSS\\\" href=\\\"${1:rss.xml}\\\" />\",\r\n\t\t\t\"link:atom\": \"<link rel=\\\"alternate\\\" type=\\\"application/atom+xml\\\" title=\\\"Atom\\\" href=\\\"${1:atom.xml}\\\" />\",\r\n\t\t\t\"meta\": \"<meta/>\",\r\n\t\t\t\"meta:utf\": \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=UTF-8\\\" />\",\r\n\t\t\t\"meta:win\": \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=windows-1251\\\" />\",\r\n\t\t\t\"meta:vp\": \"<meta name=\\\"viewport\\\" content=\\\"width=${1:device-width}, user-scalable=${2:no}, initial-scale=${3:1.0}, maximum-scale=${4:1.0}, minimum-scale=${5:1.0}\\\" />\",\r\n\t\t\t\"meta:compat\": \"<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"${1:IE=7}\\\" />\",\r\n\t\t\t\"style\": \"<style>\",\r\n\t\t\t\"script\": \"<script>\",\r\n\t\t\t\"script:src\": \"<script src=\\\"\\\">\",\r\n\t\t\t\"img\": \"<img src=\\\"\\\" alt=\\\"\\\" />\",\r\n\t\t\t\"iframe\": \"<iframe src=\\\"\\\" frameborder=\\\"0\\\">\",\r\n\t\t\t\"embed\": \"<embed src=\\\"\\\" type=\\\"\\\" />\",\r\n\t\t\t\"object\": \"<object data=\\\"\\\" type=\\\"\\\">\",\r\n\t\t\t\"param\": \"<param name=\\\"\\\" value=\\\"\\\" />\",\r\n\t\t\t\"map\": \"<map name=\\\"\\\">\",\r\n\t\t\t\"area\": \"<area shape=\\\"\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\r\n\t\t\t\"area:d\": \"<area shape=\\\"default\\\" href=\\\"\\\" alt=\\\"\\\" />\",\r\n\t\t\t\"area:c\": \"<area shape=\\\"circle\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\r\n\t\t\t\"area:r\": \"<area shape=\\\"rect\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\r\n\t\t\t\"area:p\": \"<area shape=\\\"poly\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\r\n\t\t\t\"form\": \"<form action=\\\"\\\">\",\r\n\t\t\t\"form:get\": \"<form action=\\\"\\\" method=\\\"get\\\">\",\r\n\t\t\t\"form:post\": \"<form action=\\\"\\\" method=\\\"post\\\">\",\r\n\t\t\t\"label\": \"<label for=\\\"\\\">\",\r\n\t\t\t\"input\": \"<input type=\\\"${1:text}\\\" />\",\r\n\t\t\t\"inp\": \"<input type=\\\"${1:text}\\\" name=\\\"\\\" id=\\\"\\\" />\",\r\n\t\t\t\"input:hidden\": \"input[type=hidden name]\",\r\n\t\t\t\"input:h\": \"input:hidden\",\r\n\t\t\t\"input:text\": \"inp\",\r\n\t\t\t\"input:t\": \"inp\",\r\n\t\t\t\"input:search\": \"inp[type=search]\",\r\n\t\t\t\"input:email\": \"inp[type=email]\",\r\n\t\t\t\"input:url\": \"inp[type=url]\",\r\n\t\t\t\"input:password\": \"inp[type=password]\",\r\n\t\t\t\"input:p\": \"input:password\",\r\n\t\t\t\"input:datetime\": \"inp[type=datetime]\",\r\n\t\t\t\"input:date\": \"inp[type=date]\",\r\n\t\t\t\"input:datetime-local\": \"inp[type=datetime-local]\",\r\n\t\t\t\"input:month\": \"inp[type=month]\",\r\n\t\t\t\"input:week\": \"inp[type=week]\",\r\n\t\t\t\"input:time\": \"inp[type=time]\",\r\n\t\t\t\"input:number\": \"inp[type=number]\",\r\n\t\t\t\"input:color\": \"inp[type=color]\",\r\n\t\t\t\"input:checkbox\": \"inp[type=checkbox]\",\r\n\t\t\t\"input:c\": \"input:checkbox\",\r\n\t\t\t\"input:radio\": \"inp[type=radio]\",\r\n\t\t\t\"input:r\": \"input:radio\",\r\n\t\t\t\"input:range\": \"inp[type=range]\",\r\n\t\t\t\"input:file\": \"inp[type=file]\",\r\n\t\t\t\"input:f\": \"input:file\",\r\n\t\t\t\"input:submit\": \"<input type=\\\"submit\\\" value=\\\"\\\" />\",\r\n\t\t\t\"input:s\": \"input:submit\",\r\n\t\t\t\"input:image\": \"<input type=\\\"image\\\" src=\\\"\\\" alt=\\\"\\\" />\",\r\n\t\t\t\"input:i\": \"input:image\",\r\n\t\t\t\"input:button\": \"<input type=\\\"button\\\" value=\\\"\\\" />\",\r\n\t\t\t\"input:b\": \"input:button\",\r\n\t\t\t\"isindex\": \"<isindex/>\",\r\n\t\t\t\"input:reset\": \"input:button[type=reset]\",\r\n\t\t\t\"select\": \"<select name=\\\"\\\" id=\\\"\\\">\",\r\n\t\t\t\"select:disabled\": \"select[disabled]\",\r\n\t\t\t\"select:d\": \"select[disabled]\",\r\n\t\t\t\"option\": \"<option value=\\\"\\\">\",\r\n\t\t\t\"textarea\": \"<textarea name=\\\"\\\" id=\\\"\\\" cols=\\\"${1:30}\\\" rows=\\\"${2:10}\\\">\",\r\n\t\t\t\"marquee\": \"<marquee behavior=\\\"\\\" direction=\\\"\\\">\",\r\n\t\t\t\"menu:context\": \"menu[type=context]>\",\r\n\t\t\t\"menu:c\": \"menu:context\",\r\n\t\t\t\"menu:toolbar\": \"menu[type=toolbar]>\",\r\n\t\t\t\"menu:t\": \"menu:toolbar\",\r\n\t\t\t\"video\": \"<video src=\\\"\\\">\",\r\n\t\t\t\"audio\": \"<audio src=\\\"\\\">\",\r\n\t\t\t\"html:xml\": \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\",\r\n\t\t\t\"keygen\": \"<keygen/>\",\r\n\t\t\t\"command\": \"<command/>\",\r\n\t\t\t\"button:submit\" : \"button[type=submit]\",\r\n\t\t\t\"button:s\" : \"button[type=submit]\",\r\n\t\t\t\"button:reset\" : \"button[type=reset]\",\r\n\t\t\t\"button:r\" : \"button[type=reset]\",\r\n\t\t\t\"button:disabled\" : \"button[disabled]\",\r\n\t\t\t\"button:d\" : \"button[disabled]\",\r\n\t\t\t\"fieldset:disabled\" : \"fieldset[disabled]\",\r\n\t\t\t\"fieldset:d\" : \"fieldset[disabled]\",\r\n\t\t\t\r\n\t\t\t\"bq\": \"blockquote\",\r\n\t\t\t\"acr\": \"acronym\",\r\n\t\t\t\"fig\": \"figure\",\r\n\t\t\t\"figc\": \"figcaption\",\r\n\t\t\t\"ifr\": \"iframe\",\r\n\t\t\t\"emb\": \"embed\",\r\n\t\t\t\"obj\": \"object\",\r\n\t\t\t\"src\": \"source\",\r\n\t\t\t\"cap\": \"caption\",\r\n\t\t\t\"colg\": \"colgroup\",\r\n\t\t\t\"fst\": \"fieldset\",\r\n\t\t\t\"fst:d\": \"fieldset[disabled]\",\r\n\t\t\t\"btn\": \"button\",\r\n\t\t\t\"btn:b\": \"button[type=button]\",\r\n\t\t\t\"btn:r\": \"button[type=reset]\",\r\n\t\t\t\"btn:s\": \"button[type=submit]\",\r\n\t\t\t\"btn:d\": \"button[disabled]\",\r\n\t\t\t\"optg\": \"optgroup\",\r\n\t\t\t\"opt\": \"option\",\r\n\t\t\t\"tarea\": \"textarea\",\r\n\t\t\t\"leg\": \"legend\",\r\n\t\t\t\"sect\": \"section\",\r\n\t\t\t\"art\": \"article\",\r\n\t\t\t\"hdr\": \"header\",\r\n\t\t\t\"ftr\": \"footer\",\r\n\t\t\t\"adr\": \"address\",\r\n\t\t\t\"dlg\": \"dialog\",\r\n\t\t\t\"str\": \"strong\",\r\n\t\t\t\"prog\": \"progress\",\r\n\t\t\t\"fset\": \"fieldset\",\r\n\t\t\t\"fset:d\": \"fieldset[disabled]\",\r\n\t\t\t\"datag\": \"datagrid\",\r\n\t\t\t\"datal\": \"datalist\",\r\n\t\t\t\"kg\": \"keygen\",\r\n\t\t\t\"out\": \"output\",\r\n\t\t\t\"det\": \"details\",\r\n\t\t\t\"cmd\": \"command\",\r\n\t\t\t\"doc\": \"html>(head>meta[charset=UTF-8]+title{${1:Document}})+body\",\r\n\t\t\t\"doc4\": \"html>(head>meta[http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=${charset}\\\"]+title{${1:Document}})+body\",\r\n\r\n\t\t\t\"html:4t\":  \"!!!4t+doc4[lang=${lang}]\",\r\n\t\t\t\"html:4s\":  \"!!!4s+doc4[lang=${lang}]\",\r\n\t\t\t\"html:xt\":  \"!!!xt+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]\",\r\n\t\t\t\"html:xs\":  \"!!!xs+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]\",\r\n\t\t\t\"html:xxs\": \"!!!xxs+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]\",\r\n\t\t\t\"html:5\":   \"!!!+doc[lang=${lang}]\",\r\n\t\t\t\r\n\t\t\t\"ol+\": \"ol>li\",\r\n\t\t\t\"ul+\": \"ul>li\",\r\n\t\t\t\"dl+\": \"dl>dt+dd\",\r\n\t\t\t\"map+\": \"map>area\",\r\n\t\t\t\"table+\": \"table>tr>td\",\r\n\t\t\t\"colgroup+\": \"colgroup>col\",\r\n\t\t\t\"colg+\": \"colgroup>col\",\r\n\t\t\t\"tr+\": \"tr>td\",\r\n\t\t\t\"select+\": \"select>option\",\r\n\t\t\t\"optgroup+\": \"optgroup>option\",\r\n\t\t\t\"optg+\": \"optgroup>option\"\r\n\t\t}\r\n\t},\r\n\t\r\n\t\"xml\": {\r\n\t\t\"extends\": \"html\",\r\n\t\t\"profile\": \"xml\",\r\n\t\t\"filters\": \"html\"\r\n\t},\r\n\t\r\n\t\"xsl\": {\r\n\t\t\"extends\": \"html\",\r\n\t\t\"profile\": \"xml\",\r\n\t\t\"filters\": \"html, xsl\",\r\n\t\t\"abbreviations\": {\r\n\t\t\t\"tm\": \"<xsl:template match=\\\"\\\" mode=\\\"\\\">\",\r\n\t\t\t\"tmatch\": \"tm\",\r\n\t\t\t\"tn\": \"<xsl:template name=\\\"\\\">\",\r\n\t\t\t\"tname\": \"tn\",\r\n\t\t\t\"call\": \"<xsl:call-template name=\\\"\\\"/>\",\r\n\t\t\t\"ap\": \"<xsl:apply-templates select=\\\"\\\" mode=\\\"\\\"/>\",\r\n\t\t\t\"api\": \"<xsl:apply-imports/>\",\r\n\t\t\t\"imp\": \"<xsl:import href=\\\"\\\"/>\",\r\n\t\t\t\"inc\": \"<xsl:include href=\\\"\\\"/>\",\r\n\r\n\t\t\t\"ch\": \"<xsl:choose>\",\r\n\t\t\t\"xsl:when\": \"<xsl:when test=\\\"\\\">\",\r\n\t\t\t\"wh\": \"xsl:when\",\r\n\t\t\t\"ot\": \"<xsl:otherwise>\",\r\n\t\t\t\"if\": \"<xsl:if test=\\\"\\\">\",\r\n\r\n\t\t\t\"par\": \"<xsl:param name=\\\"\\\">\",\r\n\t\t\t\"pare\": \"<xsl:param name=\\\"\\\" select=\\\"\\\"/>\",\r\n\t\t\t\"var\": \"<xsl:variable name=\\\"\\\">\",\r\n\t\t\t\"vare\": \"<xsl:variable name=\\\"\\\" select=\\\"\\\"/>\",\r\n\t\t\t\"wp\": \"<xsl:with-param name=\\\"\\\" select=\\\"\\\"/>\",\r\n\t\t\t\"key\": \"<xsl:key name=\\\"\\\" match=\\\"\\\" use=\\\"\\\"/>\",\r\n\r\n\t\t\t\"elem\": \"<xsl:element name=\\\"\\\">\",\r\n\t\t\t\"attr\": \"<xsl:attribute name=\\\"\\\">\",\r\n\t\t\t\"attrs\": \"<xsl:attribute-set name=\\\"\\\">\",\r\n\r\n\t\t\t\"cp\": \"<xsl:copy select=\\\"\\\"/>\",\r\n\t\t\t\"co\": \"<xsl:copy-of select=\\\"\\\"/>\",\r\n\t\t\t\"val\": \"<xsl:value-of select=\\\"\\\"/>\",\r\n\t\t\t\"each\": \"<xsl:for-each select=\\\"\\\">\",\r\n\t\t\t\"for\": \"each\",\r\n\t\t\t\"tex\": \"<xsl:text></xsl:text>\",\r\n\r\n\t\t\t\"com\": \"<xsl:comment>\",\r\n\t\t\t\"msg\": \"<xsl:message terminate=\\\"no\\\">\",\r\n\t\t\t\"fall\": \"<xsl:fallback>\",\r\n\t\t\t\"num\": \"<xsl:number value=\\\"\\\"/>\",\r\n\t\t\t\"nam\": \"<namespace-alias stylesheet-prefix=\\\"\\\" result-prefix=\\\"\\\"/>\",\r\n\t\t\t\"pres\": \"<xsl:preserve-space elements=\\\"\\\"/>\",\r\n\t\t\t\"strip\": \"<xsl:strip-space elements=\\\"\\\"/>\",\r\n\t\t\t\"proc\": \"<xsl:processing-instruction name=\\\"\\\">\",\r\n\t\t\t\"sort\": \"<xsl:sort select=\\\"\\\" order=\\\"\\\"/>\",\r\n\r\n\t\t\t\"choose+\": \"xsl:choose>xsl:when+xsl:otherwise\",\r\n\t\t\t\"xsl\": \"!!!+xsl:stylesheet[version=1.0 xmlns:xsl=http://www.w3.org/1999/XSL/Transform]>{\\n|}\"\r\n\t\t}, \r\n\t\t\"snippets\": {\r\n\t\t\t\"!!!\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\r\n\t\t}\r\n\t},\r\n\t\r\n\t\"haml\": {\r\n\t\t\"filters\": \"haml\",\r\n\t\t\"extends\": \"html\",\r\n\t\t\"profile\": \"xml\"\r\n\t},\r\n\t\r\n\t\"scss\": {\r\n\t\t\"extends\": \"css\"\r\n\t},\r\n\t\r\n\t\"sass\": {\r\n\t\t\"extends\": \"css\"\r\n\t},\r\n\t\r\n\t\"less\": {\r\n\t\t\"extends\": \"css\"\r\n\t},\r\n\t\r\n\t\"stylus\": {\r\n\t\t\"extends\": \"css\"\r\n\t},\r\n\r\n\t\"styl\": {\r\n\t\t\"extends\": \"stylus\"\r\n\t}\r\n}\r\n;\r\nvar res = require('resources');\r\nvar userData = res.getVocabulary('user') || {};\r\nres.setVocabulary(require('utils').deepMerge(userData, snippets), 'user');\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/emmet/emmet.js\n// module id = n7l+\n// module chunks = 0"],"sourceRoot":""}